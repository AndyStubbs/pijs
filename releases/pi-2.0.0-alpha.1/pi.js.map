{
  "version": 3,
  "sources": ["../src-pi-2.0.0-alpha.1/core/utils.js", "../src-pi-2.0.0-alpha.1/core/commands.js", "../src-pi-2.0.0-alpha.1/core/screen-manager.js", "../src-pi-2.0.0-alpha.1/core/renderer.js", "../src-pi-2.0.0-alpha.1/core/colors.js", "../src-pi-2.0.0-alpha.1/modules/keyboard.js", "../src-pi-2.0.0-alpha.1/modules/mouse.js", "../src-pi-2.0.0-alpha.1/modules/touch.js", "../src-pi-2.0.0-alpha.1/modules/press.js", "../src-pi-2.0.0-alpha.1/modules/gamepad.js", "../src-pi-2.0.0-alpha.1/core/events.js", "../src-pi-2.0.0-alpha.1/modules/graphics.js", "../src-pi-2.0.0-alpha.1/modules/graphics-advanced.js", "../src-pi-2.0.0-alpha.1/modules/draw.js", "../src-pi-2.0.0-alpha.1/modules/paint.js", "../src-pi-2.0.0-alpha.1/modules/images.js", "../src-pi-2.0.0-alpha.1/modules/font.js", "../src-pi-2.0.0-alpha.1/modules/print.js", "../src-pi-2.0.0-alpha.1/modules/sound.js", "../src-pi-2.0.0-alpha.1/modules/play.js", "../src-pi-2.0.0-alpha.1/core/plugins.js", "../src-pi-2.0.0-alpha.1/assets/font-data.js", "../src-pi-2.0.0-alpha.1/index.js"],
  "sourceRoot": "../src-pi-2.0.0-alpha.1/",
  "sourcesContent": ["/**\r\n * Pi.js - Utilities Module\r\n * \r\n * Common utility functions for math, colors, types, and data manipulation.\r\n * \r\n * @module modules/utils\r\n */\r\n\r\n\"use strict\";\r\n\r\n\r\n/***************************************************************************************************\r\n * General Utility Functions\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Parse options - normalizes input arguments into an object with named parameters.\r\n *\r\n * @param {Array<any>} args - Arguments passed to the command (from rest parameters like `...args`).\r\n * @param {Array<string>} parameterNames - Array of parameter names in expected order.\r\n * @returns {Object<string, any>} \tAn object where keys are `parameterNames` and values are the \r\n * \t\t\t\t\t\t\t\t\tparsed arguments. Missing values will be `null`.\r\n */\r\nexport function parseOptions( args, parameterNames ) {\r\n\tconst resultOptions = {};\r\n\r\n\t// Initialize all named parameters to null\r\n\tfor( const name of parameterNames ) {\r\n\t\tresultOptions[ name ] = null;\r\n\t}\r\n\r\n\tlet isNamedParameterFound = false;\r\n\r\n\t// Case 1: First argument is an object literal\r\n\tif( args.length > 0 && isObjectLiteral( args[ 0 ] ) ) {\r\n\t\tconst inputOptions = args[ 0 ];\r\n\r\n\t\tfor( const name of parameterNames ) {\r\n\t\t\tif( name in inputOptions ) {\r\n\t\t\t\tisNamedParameterFound = true;\r\n\t\t\t\tresultOptions[ name ] = inputOptions[ name ];\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\t\r\n\t// If no named parameters found then treat as positional array\r\n\tif( !isNamedParameterFound ) {\r\n\r\n\t\t// Case 2: Arguments are passed positionally\r\n\t\t// Map the positional arguments to the named parameters\r\n\t\t// If args[ i ] is out of bounds, it remains null from initialization\r\n\t\tfor( let i = 0; i < parameterNames.length; i++ ) {\r\n\t\t\tif( i < args.length ) {\r\n\t\t\t\tresultOptions[ parameterNames[ i ] ] = args[ i ];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn resultOptions;\r\n}\r\n\r\n// Type checking utilities\r\nexport const isFunction = ( fn ) => typeof fn === \"function\";\r\nexport const isDomElement = ( el ) => el instanceof Element;\r\nexport const isObjectLiteral = ( obj ) => {\r\n\tif( typeof obj !== \"object\" || obj === null || Array.isArray( obj ) ) {\r\n\t\treturn false;\r\n\t}\r\n\tconst proto = Object.getPrototypeOf( obj );\r\n\treturn proto === null || proto === Object.prototype;\r\n};\r\n\r\n// Data conversion utilities\r\n\r\n/**\r\n * Convert hex string to 2D data array\r\n * \r\n * @param {string} hex - Hex string\r\n * @param {number} width - Width of data\r\n * @param {number} height - Height of data\r\n * @returns {Array<Array<number>>} 2D array of binary data\r\n */\r\nexport function hexToData( hex, width, height ) {\r\n\thex = hex.toUpperCase();\r\n\tconst data = [];\r\n\tlet i = 0;\r\n\tlet digits = \"\";\r\n\tlet digitIndex = 0;\r\n\r\n\tfor( let y = 0; y < height; y++ ) {\r\n\t\tdata.push( [] );\r\n\t\tfor( let x = 0; x < width; x++ ) {\r\n\t\t\tif( digitIndex >= digits.length ) {\r\n\t\t\t\tlet hexPart = parseInt( hex[ i ], 16 );\r\n\t\t\t\tif( isNaN( hexPart ) ) {\r\n\t\t\t\t\thexPart = 0;\r\n\t\t\t\t}\r\n\t\t\t\tdigits = padL( hexPart.toString( 2 ), 4, \"0\" );\r\n\t\t\t\ti += 1;\r\n\t\t\t\tdigitIndex = 0;\r\n\t\t\t}\r\n\t\t\tdata[ y ].push( parseInt( digits[ digitIndex ] ) );\r\n\t\t\tdigitIndex += 1;\r\n\t\t}\r\n\t}\r\n\treturn data;\r\n}\r\n\r\n// Math utilities\r\n\r\n/**\r\n * Clamp a number between min and max\r\n * \r\n * @param {number} num - Number to clamp\r\n * @param {number} min - Minimum value\r\n * @param {number} max - Maximum value\r\n * @returns {number} Clamped value\r\n */\r\nexport function clamp( num, min, max ) {\r\n\treturn Math.min( Math.max( num, min ), max );\r\n}\r\n\r\n/**\r\n * Check if a point is in a rectangle\r\n * \r\n * @param {Object} point - Point with x, y properties\r\n * @param {Object} hitBox - Rectangle with x, y, width, height properties\r\n * @returns {boolean} True if point is inside rectangle\r\n */\r\nexport function inRange( point, hitBox ) {\r\n\treturn point.x >= hitBox.x && point.x < hitBox.x + hitBox.width &&\r\n\t\tpoint.y >= hitBox.y && point.y < hitBox.y + hitBox.height;\r\n}\r\n\r\n/**\r\n * Check if coordinates are in a rectangle\r\n * \r\n * @param {number} x1 - Point x\r\n * @param {number} y1 - Point y\r\n * @param {number} x2 - Rectangle x\r\n * @param {number} y2 - Rectangle y\r\n * @param {number} width - Rectangle width\r\n * @param {number} height - Rectangle height\r\n * @returns {boolean} True if point is inside rectangle\r\n */\r\nexport function inRange2( x1, y1, x2, y2, width, height ) {\r\n\treturn x1 >= x2 && x1 < x2 + width &&\r\n\t\ty1 >= y2 && y1 < y2 + height;\r\n}\r\n\r\n/**\r\n * Generate random number in range\r\n * \r\n * @param {number} min - Minimum value\r\n * @param {number} max - Maximum value\r\n * @returns {number} Random number between min and max\r\n */\r\nexport function rndRange( min, max ) {\r\n\treturn Math.random() * ( max - min ) + min;\r\n}\r\n\r\n/**\r\n * Convert degrees to radians\r\n * \r\n * @param {number} deg - Degrees\r\n * @returns {number} Radians\r\n */\r\nexport function degreesToRadian( deg ) {\r\n\treturn deg * ( Math.PI / 180 );\r\n}\r\n\r\n/**\r\n * Convert radians to degrees\r\n * \r\n * @param {number} rad - Radians\r\n * @returns {number} Degrees\r\n */\r\nexport function radiansToDegrees( rad ) {\r\n\treturn rad * ( 180 / Math.PI );\r\n}\r\n\r\n// String utilities\r\n\r\n/**\r\n * Pad string on left\r\n * \r\n * @param {string} str - String to pad\r\n * @param {number} len - Target length\r\n * @param {string} c - Padding character\r\n * @returns {string} Padded string\r\n */\r\nexport function padL( str, len, c ) {\r\n\tif( typeof c !== \"string\" ) {\r\n\t\tc = \" \";\r\n\t}\r\n\tlet pad = \"\";\r\n\tstr = str + \"\";\r\n\tfor( let i = str.length; i < len; i++ ) {\r\n\t\tpad += c;\r\n\t}\r\n\treturn pad + str;\r\n}\r\n\r\n/**\r\n * Pad string on both sides\r\n * \r\n * @param {string} str - String to pad\r\n * @param {number} len - Target length\r\n * @param {string} c - Padding character\r\n * @returns {string} Padded string\r\n */\r\nexport function pad( str, len, c ) {\r\n\tif( typeof c !== \"string\" || c.length === 0 ) {\r\n\t\tc = \" \";\r\n\t}\r\n\tstr = str + \"\";\r\n\twhile( str.length < len ) {\r\n\t\tstr = c + str + c;\r\n\t}\r\n\tif( str.length > len ) {\r\n\t\tstr = str.substring( 0, len );\r\n\t}\r\n\treturn str;\r\n}\r\n\r\n/**\r\n * Parse integer with default value\r\n * \r\n * @param {*} val - Value to parse\r\n * @param {number} def - Default value if parsing fails\r\n * @returns {number} Parsed integer or default\r\n */\r\nexport function getInt( val, def ) {\r\n\tif( val === null || val === undefined ) {\r\n\t\treturn def;\r\n\t}\r\n\tconst parsed = Number( val );\r\n\tif( !Number.isFinite( parsed ) ) {\r\n\t\treturn def;\r\n\t}\r\n\r\n\treturn Math.round( parsed );\r\n}\r\n\r\n/**\r\n * Parse float with default value\r\n * \r\n * @param {*} val - Value to parse\r\n * @param {number} def - Default value if parsing fails\r\n * @returns {number} Parsed float or default\r\n */\r\nexport function getFloat( val, def ) {\r\n\tif( val === null || val === undefined ) {\r\n\t\treturn def;\r\n\t}\r\n\tconst parsed = Number( val );\r\n\tif( !Number.isFinite( parsed ) ) {\r\n\t\treturn def;\r\n\t}\r\n\r\n\treturn parsed;\r\n}\r\n\r\n// Queue microtask (built-in in modern browsers)\r\n// Wrap to preserve window context\r\nexport const queueMicrotask = ( callback ) => {\r\n\tif( window.queueMicrotask ) {\r\n\t\twindow.queueMicrotask( callback );\r\n\t} else {\r\n\t\tsetTimeout( callback, 0 );\r\n\t}\r\n};\r\n\r\n\r\n/***************************************************************************************************\r\n * Color Utility Functions\r\n **************************************************************************************************/\r\n\r\n\r\nconst COLOR_PROTO = {\r\n\t\"key\": 0,\r\n\t\"r\": 0,\r\n\t\"g\": 0,\r\n\t\"b\": 0,\r\n\t\"a\": 0,\r\n\t\"rgba\": \"\",\r\n\t\"hex\": \"\"\r\n};\r\nconst m_colorCheckerContext = document.createElement( \"canvas\" ).getContext(\r\n\t\"2d\", { \"willReadFrequently\": true }\r\n);\r\n\r\n/**\r\n * Generates a unique 32-bit integer key for an opaque RGB color.\r\n * Each color component (R, G, B) is assumed to be an 8-bit integer (0-255).\r\n * The components are packed in the order: Red | Green | Blue.\r\n *\r\n * @param {number} r - Red component (0-255).\r\n * @param {number} g - Green component (0-255).\r\n * @param {number} b - Blue component (0-255).\r\n * @param {number} a - Alpha component (0-255).\r\n * @returns {number} A 32-bit integer representing the color.\r\n */\r\nexport function generateColorKey( r, g, b, a ) {\r\n\treturn ( r << 24 ) | ( g << 16 ) | ( b << 8 ) | a;\r\n}\r\n\r\n/**\r\n * Convert RGB to color object\r\n * \r\n * @param {number} r - Red component (0-255)\r\n * @param {number} g - Green component (0-255)\r\n * @param {number} b - Blue component (0-255)\r\n * @param {number} a - Alpha component (0-255)\r\n * @returns {Object} Color object\r\n */\r\nexport function rgbToColor( r, g, b, a ) {\r\n\tconst hex = rgbToHex( r, g, b, a );\r\n\treturn createColor( r, g, b, a, hex );\r\n}\r\n\r\n/**\r\n * Convert various color formats to color object\r\n * \r\n * @param {*} color - Color in various formats\r\n * @returns {Object|null} Color object or null if invalid\r\n */\r\nexport function convertToColor( color ) {\r\n\tif( color === undefined || color === null || color === \"\" ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Check if color is already a color prototype object\r\n\tif( Object.getPrototypeOf( color ) === COLOR_PROTO ) {\r\n\t\treturn color;\r\n\t} else if( Array.isArray( color ) ) {\r\n\r\n\t\t// Array format [r, g, b, a]\r\n\t\tif( color.length < 3 ) {\r\n\t\t\treturn null;\r\n\t\t} else if( color.length === 3 ) {\r\n\t\t\tcolor.push( 255 );\r\n\t\t}\r\n\t} else if( color.r !== undefined ) {\r\n\r\n\t\t// Convert from object literal or color object\r\n\t\tcolor = [ color.r, color.g, color.b, color.a ];\r\n\t} else if( typeof color === \"string\" ) {\r\n\r\n\t\t// Check if is hex format\r\n\t\tconst checkHexColor = /(^#[0-9A-F]{8}$)|(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;\r\n\t\tif( checkHexColor.test( color ) ) {\r\n\t\t\treturn hexToColor( color );\r\n\t\t}\r\n\r\n\t\t// RGB/RGBA format\r\n\t\tif( color.indexOf( \"rgb\" ) === 0 ) {\r\n\t\t\tcolor = splitRgb( color );\r\n\t\t\tif( color.length < 3 ) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else if( color.length === 3 ) {\r\n\t\t\t\tcolor.push( 255 );\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\t// Named color or other CSS color\r\n\t\t\treturn colorStringToColor( color );\r\n\t\t}\r\n\t}\r\n\r\n\t// Parse rgb colors\r\n\tfor( let i = 0; i < 3; i += 1 ) {\r\n\t\tcolor[ i ] = getInt( color[ i ], 0 );\r\n\t}\r\n\r\n\t// Parse alpha\r\n\tcolor[ 3 ] = getFloat( color[ 3 ], 0 );\r\n\tif( color[ 3 ] < 1 ) {\r\n\t\tcolor[ 3 ] = Math.round( color[ 3 ] * 255 );\r\n\t} else {\r\n\t\tcolor[ 3 ] = Math.round( color[ 3 ] );\r\n\t}\r\n\t\r\n\treturn rgbToColor( color[ 0 ], color[ 1 ], color[ 2 ], color[ 3 ] );\r\n}\r\n\r\nexport function calcColorDifference( c1, c2, w = [ 0.2, 0.68, 0.07, 0.05 ] ) {\r\n\tconst dr = c1.r - c2.r;\r\n\tconst dg = c1.g - c2.g;\r\n\tconst db = c1.b - c2.b;\r\n\tconst da = c1.a - c2.a;\r\n\r\n\treturn ( dr * dr * w[ 0 ] + dg * dg * w[ 1 ] + db * db * w[ 2 ] + da * da * w[ 3 ] );\r\n}\r\n\r\nfunction createColor( r, g, b, a, hex ) {\r\n\tconst color = Object.create( COLOR_PROTO );\r\n\tcolor.key = generateColorKey( r, g, b, a, hex );\r\n\tcolor.r = r;\r\n\tcolor.g = g;\r\n\tcolor.b = b;\r\n\tcolor.a = a;\r\n\tcolor.rgba = `rgba(${r},${g},${b},${( a / 255 ).toFixed( 3 )})`;\r\n\tcolor.hex = hex;\r\n\r\n\treturn color;\r\n}\r\n\r\n/**\r\n * Convert hex color to color object\r\n * \r\n * @param {string} hex - Hex color string (#RGB, #RRGGBB, or #RRGGBBAA)\r\n * @returns {Object} Color object with r, g, b, a, s, s2 properties\r\n */\r\nfunction hexToColor( hex ) {\r\n\tlet r, g, b, a;\r\n\r\n\tif( hex.length === 4 ) {\r\n\t\tr = parseInt( hex.slice( 1, 2 ), 16 ) * 16 - 1;\r\n\t\tg = parseInt( hex.slice( 2, 3 ), 16 ) * 16 - 1;\r\n\t\tb = parseInt( hex.slice( 3, 4 ), 16 ) * 16 - 1;\r\n\t} else {\r\n\t\tr = parseInt( hex.slice( 1, 3 ), 16 );\r\n\t\tg = parseInt( hex.slice( 3, 5 ), 16 );\r\n\t\tb = parseInt( hex.slice( 5, 7 ), 16 );\r\n\t}\r\n\r\n\tif( hex.length === 9 ) {\r\n\t\ta = parseInt( hex.slice( 7, 9 ), 16 );\r\n\t} else {\r\n\t\ta = 255;\r\n\t}\r\n\r\n\treturn createColor( r, g, b, a, hex );\r\n}\r\n\r\n/**\r\n * Split RGB/RGBA string into components\r\n * \r\n * @param {string} s - RGB or RGBA string\r\n * @returns {Array<number>} Array of color components\r\n */\r\nfunction splitRgb( s ) {\r\n\ts = s.slice( s.indexOf( \"(\" ) + 1, s.indexOf( \")\" ) );\r\n\tconst parts = s.split( \",\" );\r\n\tconst colors = [];\r\n\tfor( let i = 0; i < parts.length; i++ ) {\r\n\t\tlet val;\r\n\t\tif( i === 3 ) {\r\n\t\t\tval = parseFloat( parts[ i ].trim() ) * 255;\r\n\t\t} else {\r\n\t\t\tval = parseInt( parts[ i ].trim() );\r\n\t\t}\r\n\t\tcolors.push( val );\r\n\t}\r\n\treturn colors;\r\n}\r\n\r\n/**\r\n * Convert color component to hex\r\n * \r\n * @param {number} c - Color component (0-255)\r\n * @returns {string} Hex string\r\n */\r\nfunction cToHex( c ) {\r\n\tif( !Number.isInteger( c ) ) {\r\n\t\tc = Math.round( c );\r\n\t}\r\n\tc = clamp( c, 0, 255 );\r\n\tconst hex = Number( c ).toString( 16 );\r\n\treturn hex.length < 2 ? \"0\" + hex : hex.toUpperCase();\r\n}\r\n\r\n/**\r\n * Convert RGB to hex color\r\n * \r\n * @param {number} r - Red component (0-255)\r\n * @param {number} g - Green component (0-255)\r\n * @param {number} b - Blue component (0-255)\r\n * @param {number} a - Alpha component (0-255), defaults to 255\r\n * @returns {string} Hex color string\r\n */\r\nfunction rgbToHex( r, g, b, a ) {\r\n\tif( isNaN( a ) ) {\r\n\t\ta = 255;\r\n\t}\r\n\treturn \"#\" + cToHex( r ) + cToHex( g ) + cToHex( b ) + cToHex( a );\r\n}\r\n\r\n/**\r\n * Convert color string to color object using canvas\r\n * \r\n * @param {string} colorStr - CSS color string\r\n * @returns {Object} Color object\r\n */\r\nfunction colorStringToColor( colorStr ) {\r\n\tm_colorCheckerContext.clearRect( 0, 0, 1, 1 );\r\n\tm_colorCheckerContext.fillStyle = colorStr;\r\n\tm_colorCheckerContext.fillRect( 0, 0, 1, 1 );\r\n\tconst data = m_colorCheckerContext.getImageData( 0, 0, 1, 1 ).data;\r\n\treturn rgbToColor( data[ 0 ], data[ 1 ], data[ 2 ], data[ 3 ] );\r\n}\r\n", "/**\n * Pi.js - Command System Module\n * \n * Command registration and processing.\n * \n * @module core/commands\n */\n\n\"use strict\";\n\nimport * as utils from \"./utils\";\n\nconst m_commandList = [];\nconst m_settings = {};\nlet m_api;\nlet m_screenManager;\nlet m_readyCallbacks = [];\nlet m_isDocumentReady = false;\nlet m_waitCount = 0;\nlet m_checkReadyTimeout = null;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api, screenManager ) {\n\tm_api = api;\n\tm_screenManager = screenManager;\n\n\t// Set up document ready detection\n\tif( typeof document !== \"undefined\" ) {\n\t\tif( document.readyState === \"loading\" ) {\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", onDocumentReady );\n\t\t} else {\n\n\t\t\t// Document already ready\n\t\t\tm_isDocumentReady = true;\n\t\t}\n\t} else {\n\n\t\t// Not in browser environment, mark as ready immediately\n\t\tm_isDocumentReady = true;\n\t}\n}\n\n/**\n * Increment wait count - called by modules when starting async operations\n */\nexport function wait() {\n\tm_waitCount++;\n}\n\n/**\n * Decrement wait count - called by modules when async operations complete\n */\nexport function done() {\n\tm_waitCount--;\n\tif( m_waitCount < 0 ) {\n\t\tm_waitCount = 0;\n\t}\n\n\t// Check if ready to trigger callbacks\n\tscheduleReadyCheck();\n}\n\n/**\n * Add a command to the system\n * \n * @param {string} name - Command name\n * @param {Function} fn - Command function\n * @param {Array<string>} parameterNames - Parameter names\n * @param {boolean} isScreen - If true, command requires screen\n * @param {boolean} screenOptional - If true, screen is optional (only valid if isScreen is true)\n */\nexport function addCommand( name, fn, parameterNames, isScreen = false, screenOptional = false ) {\n\tconst cmd = {\n\t\t\"name\": name,\n\t\t\"fn\": fn,\n\t\t\"parameterNames\": parameterNames,\n\t\t\"isScreen\": isScreen,\n\t\t\"screenOptional\": screenOptional\n\t};\n\tm_commandList.push( cmd );\n\n\t// Add to settings item if starts with set\n\tif( name.startsWith( \"set\" ) && name !== \"set\" ) {\n\n\t\tconst settingName = cmd.name.substring( 3, 4 ).toLowerCase() + cmd.name.substring( 4 );\n\t\tm_settings[ settingName ] = cmd;\n\t}\n}\n\n/**\n * Sorts then sets commands on the api\n */\nexport function processApi() {\n\n\t// Get the settings list\n\tconst setList = []\n\tfor( const cmd of m_commandList ) {\n\t\tif( cmd.name.startsWith( \"set\" ) ) {\n\t\t\tconst settingName = cmd.name.substring( 3, 4 ).toLowerCase() + cmd.name.substring( 4 );\n\t\t\tsetList.push( settingName );\n\t\t}\n\t}\n\n\t// Sort the settings list\n\tsetList.sort( ( settingNameA, settingNameB ) => {\n\n\t\t// Screen should always go first\n\t\tif( settingNameA === \"screen\" ) {\n\t\t\treturn -1;\n\t\t} else if( settingNameB === \"screen\" ) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn settingNameA.localeCompare( settingNameB );\n\t} );\n\t\n\t// Add the set commands -- not all set commands are screen commands but some are so use\n\t// screenManager to add command. Set is screen-optional since it handles both screen and\n\t// non-screen settings.\n\tm_screenManager.addCommand( \"set\", set, setList, true );\n\n\t// Sort global command list\n\tm_commandList.sort( ( a, b ) => a.name.localeCompare( b.name ) );\n\n\t// Sort screen commands\n\tm_screenManager.sortScreenCommands();\n\n\t// Add all commands to API\n\tfor( const command of m_commandList ) {\n\t\tprocessApiCommand( command );\n\t}\n}\n\n// Process an api command\nexport function processApiCommand( command ) {\n\tif( command.isScreen ) {\n\t\tm_api[ command.name ] = ( ...args ) => {\n\t\t\tconst options = utils.parseOptions( args, command.parameterNames );\n\t\t\tconst screenData = m_screenManager.getActiveScreen();\n\t\t\tif( !screenData && !command.screenOptional ) {\n\t\t\t\tconst error = new Error( `${command.name}: No screens available for command.` );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\treturn command.fn( screenData, options );\n\t\t};\n\t} else {\n\t\tm_api[ command.name ] = ( ...args ) => {\n\t\t\tconst options = utils.parseOptions( args, command.parameterNames );\n\t\t\treturn command.fn( options );\n\t\t};\n\t}\n}\n\n\nexport function getApi() {\n\treturn m_api;\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n/**\n * ready command - waits for document ready and all pending resources\n * \n * Supports both callback and promise patterns:\n *   - $.ready( callback )        // Callback style\n *   - await $.ready()            // Promise style\n *   - $.ready().then( ... )      // Promise .then() style\n * \n * Behavior:\n *   - Never executes immediately (always defers to next tick)\n *   - Waits for document ready AND all resources with pending wait count\n *   - All ready() calls before resources are loaded trigger together\n *   - Each callback/promise only triggers once\n * \n * Example:\n *   $.loadImage( \"a.png\", \"a\" );\n *   $.loadImage( \"b.png\", \"b\" );\n *   $.ready( () => console.log( \"Both loaded\" ) );\n *   // Waits for both a and b, triggers once\n */\naddCommand( \"ready\", ready, [ \"callback\" ] );\nfunction ready( options ) {\n\tconst callback = options.callback;\n\n\t// Validate callback if provided\n\tif( callback != null && !utils.isFunction( callback ) ) {\n\t\tconst error = new TypeError( \"ready: Parameter callback must be a function.\" );\n\t\terror.code = \"INVALID_CALLBACK\";\n\t\tthrow error;\n\t}\n\n\t// Never execute immediately - always defer to next tick\n\treturn new Promise( ( resolve ) => {\n\t\tm_readyCallbacks.push( {\n\t\t\t\"callback\": callback,\n\t\t\t\"resolve\": resolve,\n\t\t\t\"triggered\": false\n\t\t} );\n\n\t\t// Schedule a check for next tick (allows more resources to be added in same thread)\n\t\tscheduleReadyCheck();\n\t} );\n}\n\n\n// Global settings command\n// -- (Command added in processApi) after all settings have been added as commands\n// -- Note: screenData will be null if the setting is not a screen setting\nfunction set( screenData, options ) {\n\n\t// Loop through all the options\n\tfor( const optionName in options ) {\n\n\t\t// Skip blanks\n\t\tif( options[ optionName ] === null ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If the option is a valid setting\n\t\tif( m_settings[ optionName ] ) {\n\n\t\t\t// Get the setting data\n\t\t\tconst setting = m_settings[ optionName ];\n\t\t\tconst optionValues = options[ optionName ];\n\n\t\t\t// Parse the options from the setting\n\t\t\t// Wrap optionValues in array if not already an array\n\t\t\t//const argsArray = Array.isArray( optionValues ) ? optionValues : [ optionValues ];\n\t\t\tconst argsArray = [ optionValues ];\n\t\t\tconst parsedOptions = utils.parseOptions( argsArray, setting.parameterNames );\n\n\t\t\t// Call the setting function\n\t\t\tif( setting.isScreen ) {\n\t\t\t\tsetting.fn( screenData, parsedOptions );\n\t\t\t} else {\n\t\t\t\tsetting.fn( parsedOptions );\n\t\t\t}\n\n\t\t\t// If we just set the screen then refresh the active screen\n\t\t\tif( optionName === \"screen\" ) {\n\t\t\t\tscreenData = m_screenManager.getActiveScreen();\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Called when document is ready\nfunction onDocumentReady() {\n\tm_isDocumentReady = true;\n\n\t// Check if we can trigger ready callbacks\n\tscheduleReadyCheck();\n}\n\n// Schedule a ready check on next tick (allows more load calls in same thread)\nfunction scheduleReadyCheck() {\n\n\t// Clear any existing timeout\n\tif( m_checkReadyTimeout !== null ) {\n\t\tclearTimeout( m_checkReadyTimeout );\n\t}\n\n\t// Schedule check for next tick\n\tm_checkReadyTimeout = setTimeout( checkReady, 0 );\n}\n\n// Check if all conditions are met to trigger ready callbacks\nfunction checkReady() {\n\tm_checkReadyTimeout = null;\n\n\t// Don't check if document not ready\n\tif( !m_isDocumentReady ) {\n\t\treturn;\n\t}\n\n\t// Don't trigger if resources are still loading\n\tif( m_waitCount !== 0 ) {\n\t\treturn;\n\t}\n\n\t// Trigger all pending ready callbacks together\n\t// Note: All ready() calls registered before this point will trigger at once\n\t// This allows loads in the same thread to be captured before triggering\n\tconst callbacks = m_readyCallbacks.slice();\n\tm_readyCallbacks = [];\n\n\tfor( const item of callbacks ) {\n\n\t\t// Skip if already triggered (shouldn't happen, but safety check)\n\t\tif( item.triggered ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Mark as triggered (ensures each callback only runs once)\n\t\titem.triggered = true;\n\n\t\t// Execute callback and resolve promise\n\t\tif( item.callback ) {\n\t\t\titem.callback();\n\t\t}\n\t\titem.resolve();\n\t}\n}\n", "/**\r\n * Pi.js - Screen Manager Module\r\n * \r\n * Screen creation and management for Pi.js.\r\n * Creates canvas elements, manages multiple screens, handles aspect ratios.\r\n * \r\n * @module core/screen-manager\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport * as commands from \"./commands\";\r\nimport * as utils from \"./utils\";\r\n\r\nconst SCREEN_API_PROTO = { \"screen\": true };\r\nconst m_screens = {};\r\nconst m_commandList = [];\r\nconst m_pixelCommands = {};\r\nconst m_aaCommands = {};\r\nconst m_screenDataItems = {};\r\nconst m_screenDataItemGetters = [];\r\nconst m_screenInternalCommands = [];\r\nconst m_screenDataInitFunctions = [];\r\nconst m_sceenDataCleanupFunctions = [];\r\n\r\n\r\nlet m_nextScreenId = 0;\r\nlet m_activeScreen = null;\r\nlet m_resizeObserver = null;\r\nconst m_observedContainers = new Set();\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\nexport function init() {\r\n\t\r\n\t// TODO: Add matchMedia to watch for DPR changes - if a user moves a browser to a new monitor\r\n\t// it could cause the canvas image to become blury, even if the actual CSS size of the canvas.\r\n\t// doesn't change.\r\n\t// matchMedia( `(resolution: ${dpr}dppx)` ).addEventListener( \"change\", resizeCanvases );\r\n\r\n\t// Create a single ResizeObserver for all screen containers\r\n\tm_resizeObserver = new ResizeObserver( ( entries ) => {\r\n\t\tfor( const entry of entries ) {\r\n\t\t\tconst container = entry.target;\r\n\t\t\t\r\n\t\t\t// Find all canvas elements in this container\r\n\t\t\tconst canvases = container.querySelectorAll( \"canvas[data-screen-id]\" );\r\n\t\t\tif( canvases.length === 0 ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Resize all screens in this container\r\n\t\t\tfor( const canvas of canvases ) {\r\n\t\t\t\tconst screenId = parseInt( canvas.dataset.screenId, 10 );\r\n\t\t\t\tconst screenData = m_screens[ screenId ];\r\n\t\t\t\t\r\n\t\t\t\tif( screenData ) {\r\n\t\t\t\t\tresizeScreen( screenData );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n}\r\n\r\nexport function addCommand( name, fn, parameterNames, screenOptional = false ) {\r\n\r\n\t// Add the command to the command list\r\n\tm_commandList.push( {\r\n\t\t\"name\": name,\r\n\t\t\"fn\": fn,\r\n\t\t\"parameterNames\": parameterNames,\r\n\t\t\"screenOptional\": screenOptional\r\n\t} );\r\n\r\n\t// Add the command to the global command list\r\n\tcommands.addCommand( name, fn, parameterNames, true, screenOptional );\r\n}\r\n\r\nexport function addPixelCommand( name, fn, parameterNames ) {\r\n\r\n\tconst cmd = {\r\n\t\t\"name\": name,\r\n\t\t\"fn\": fn,\r\n\t\t\"parameterNames\": parameterNames,\r\n\t\t\"isScreen\": true\r\n\t};\r\n\r\n\t// Add the command to the command list\r\n\tm_commandList.push( cmd );\r\n\r\n\t// Add the command to the global command list\r\n\tcommands.addCommand( name, fn, parameterNames, true );\r\n\t\r\n\t// Add the command to the pixel command list\r\n\tm_pixelCommands[ name ] = cmd;\r\n\r\n}\r\n\r\nexport function addAACommand( name, fn, parameterNames ) {\r\n\r\n\tconst cmd = {\r\n\t\t\"name\": name,\r\n\t\t\"fn\": fn,\r\n\t\t\"parameterNames\": parameterNames,\r\n\t\t\"isScreen\": true\r\n\t};\r\n\r\n\t// Add the command to the pixel command list\r\n\tm_aaCommands[ name ] = cmd;\r\n}\r\n\r\nexport function sortScreenCommands() {\r\n\tm_commandList.sort( ( a, b ) => a.name.localeCompare( b.name ) );\r\n}\r\n\r\nexport function addScreenDataItem( name, val ) {\r\n\tm_screenDataItems[ name ] = val;\r\n}\r\n\r\nexport function addScreenInternalCommands( name, fn ) {\r\n\tm_screenInternalCommands.push( { name, fn } );\r\n}\r\n\r\nexport function addScreenDataItemGetter( name, fn ) {\r\n\tm_screenDataItemGetters.push( { name, fn } );\r\n}\r\n\r\nexport function getActiveScreen() {\r\n\treturn m_activeScreen;\r\n}\r\n\r\nexport function addScreenInitFunction( fn ) {\r\n\tm_screenDataInitFunctions.push( fn );\r\n}\r\n\r\nexport function addScreenCleanupFunction( fn ) {\r\n\tm_sceenDataCleanupFunctions.push( fn );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * External API Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// screen command\r\ncommands.addCommand( \"screen\", screen, [\r\n\t\"aspect\", \"container\", \"isOffscreen\", \"willReadFrequently\", \"noStyles\", \"resizeCallback\"\r\n] );\r\nfunction screen( options ) {\r\n\r\n\t// Validate resize callback\r\n\tif( options.resizeCallback != null && !utils.isFunction( options.resizeCallback ) ) {\r\n\t\tconst error = new TypeError( \"screen: resizeCallback must be a function.\" );\r\n\t\terror.code = \"INVALID_CALLBACK\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Parse aspect ratio\r\n\tif( typeof options.aspect === \"string\" && options.aspect !== \"\" ) {\r\n\t\toptions.aspectData = parseAspect( options.aspect.toLowerCase() );\r\n\t\tif( !options.aspectData ) {\r\n\t\t\tconst error = new Error( \"screen: invalid value for aspect.\" );\r\n\t\t\terror.code = \"INVALID_ASPECT\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t// Create appropriate screen type\r\n\tlet screenData = createScreen( options );\r\n\r\n\t// Add all the screen commands to the screenData api\r\n\tfor( const command of m_commandList ) {\r\n\t\tprocessApiCommand( screenData, command );\r\n\t}\r\n\r\n\t// Assign screen to active screen\r\n\tm_activeScreen = screenData;\r\n\tm_screens[ screenData.id ] = screenData;\r\n\r\n\t// Setup the initial font for the screen\r\n\tscreenData.api.setFont( screenData.font.id );\r\n\r\n\t// Call init functions for all modules that need initialization\r\n\tfor( const fn of m_screenDataInitFunctions ) {\r\n\t\tfn( screenData );\r\n\t}\r\n\r\n\treturn screenData.api;\r\n}\r\n\r\n// Remove the screen from the page and memory\r\naddCommand( \"removeScreen\", removeScreen, [] );\r\nfunction removeScreen( screenData ) {\r\n\tconst screenId = screenData.id;\r\n\r\n\t// Cancel any inputs\r\n\tscreenData.api.cancelInput();\r\n\r\n\t// Clear all events\r\n\tscreenData.api.clearEvents();\r\n\r\n\t// Store the screen ID before we start nullifying properties\r\n\tconst errorMessage = `Cannot call {METHOD}() on removed screen (id: ${screenId}). ` +\r\n\t\t`The screen has been removed from the page.`;\r\n\r\n\t// Replace all commands from screen object - prevents outside reference to screen from calling\r\n\t// screen functions on screen that doesn't exist\r\n\tfor( const key in screenData.api ) {\r\n\t\tif( typeof screenData.api[ key ] === \"function\" ) {\r\n\r\n\t\t\t// Use string replacement to avoid capturing screenData in closure\r\n\t\t\tscreenData.api[ key ] = () => {\r\n\t\t\t\tconst error = new TypeError( errorMessage.replace( \"{METHOD}\", key ) );\r\n\t\t\t\terror.code = \"DELETED_METHOD\";\r\n\t\t\t\tthrow error;\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove the canvas from the page\r\n\tif( screenData.canvas && screenData.canvas.parentElement ) {\r\n\t\tscreenData.canvas.parentElement.removeChild( screenData.canvas );\r\n\t}\r\n\r\n\t// Unobserve the container from the global resize observer if no other screens use it\r\n\tif( screenData.container && m_resizeObserver && m_observedContainers.has( screenData.container ) ) {\r\n\t\t\r\n\t\t// Check if any other screens are using this container\r\n\t\tlet hasOtherScreens = false;\r\n\t\tfor( const id in m_screens ) {\r\n\t\t\tconst otherScreen = m_screens[ id ];\r\n\t\t\tif( otherScreen !== screenData && otherScreen.container === screenData.container ) {\r\n\t\t\t\thasOtherScreens = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Only unobserve if no other screens are using this container\r\n\t\tif( !hasOtherScreens ) {\r\n\t\t\tm_resizeObserver.unobserve( screenData.container );\r\n\t\t\tm_observedContainers.delete( screenData.container );\r\n\t\t}\r\n\t}\r\n\r\n\t// Clean up all references to prevent memory leaks\r\n\tscreenData.canvas = null;\r\n\tscreenData.bufferCanvas = null;\r\n\tscreenData.context = null;\r\n\tscreenData.bufferContext = null;\r\n\tscreenData.commands = null;\r\n\tscreenData.resizeCallback = null;\r\n\tscreenData.container = null;\r\n\tscreenData.aspectData = null;\r\n\tscreenData.clientRect = null;\r\n\tscreenData.previousOffsetSize = null;\r\n\r\n\t// Remove additional screenData items\r\n\tfor( const i in m_screenDataItems ) {\r\n\t\tscreenData[ i ] = null;\r\n\t}\r\n\tfor( const getter of m_screenDataItemGetters ) {\r\n\t\tscreenData[ getter.name ] = null;\r\n\t}\r\n\tfor( const internal of m_screenInternalCommands ) {\r\n\t\tscreenData[ internal.name ] = null;\r\n\t}\r\n\r\n\t// If the current screen is the active screen then we should set the active screen to the next\r\n\t// screen available, or null if no screens remain.\r\n\tif( screenData === m_activeScreen ) {\r\n\t\tm_activeScreen = null;\r\n\t\tfor( const i in m_screens ) {\r\n\t\t\tif( m_screens[ i ] !== screenData ) {\r\n\t\t\t\tm_activeScreen = m_screens[ i ];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Call cleanup functions for all modules that need cleanup\r\n\tfor( const fn of m_sceenDataCleanupFunctions ) {\r\n\t\tfn( screenData );\r\n\t}\r\n\r\n\t// Delete the screen from the screens container\r\n\tdelete m_screens[ screenId ];\r\n}\r\n\r\n// Set the active screen on pi\r\ncommands.addCommand( \"setScreen\", setScreen, [ \"screen\" ] );\r\nfunction setScreen( options ) {\r\n\tconst screenObj = options.screen;\r\n\tlet screenId;\r\n\r\n\tif( Number.isInteger( screenObj ) ) {\r\n\t\tscreenId = screenObj;\r\n\t} else if( screenObj && Number.isInteger( screenObj.id ) ) {\r\n\t\tscreenId = screenObj.id;\r\n\t}\r\n\tif( ! m_screens[ screenId ] ) {\r\n\t\tconst error = new Error( \"screen: Invalid screen.\" );\r\n\t\terror.code = \"INVALID_SCREEN\";\r\n\t\tthrow error;\r\n\t}\r\n\tm_activeScreen = m_screens[ screenId ];\r\n}\r\n\r\ncommands.addCommand( \"getScreen\", getScreen, [ \"screenId\" ] );\r\nfunction getScreen( options ) {\r\n\tconst screenId = utils.getInt( options.screenId, null );\r\n\tif( screenId === null ) {\r\n\t\tconst error = new Error( \"screen: Invalid screen id.\" );\r\n\t\terror.code = \"INVALID_SCREEN_ID\";\r\n\t\tthrow error;\r\n\t}\r\n\tconst screen = m_screens[ screenId ];\r\n\tif( !screen ) {\r\n\t\tconst error = new Error( `screen: Screen \"${screenId} not found.` );\r\n\t\terror.code = \"SCREEN_NOT_FOUND\";\r\n\t\tthrow error;\r\n\t}\r\n\treturn screen.api;\r\n}\r\n\r\n// width command\r\naddCommand( \"width\", width, [] );\r\nfunction width( screenData ) {\r\n\treturn screenData.width;\r\n}\r\n\r\n// Height Command\r\naddCommand( \"height\", height, [] );\r\nfunction height( screenData ) {\r\n\treturn screenData.height;\r\n}\r\n\r\n// Canvas Command\r\naddCommand( \"canvas\", canvas, [] );\r\nfunction canvas( screenData ) {\r\n\treturn screenData.canvas;\r\n}\r\n\r\n// TODO: Consider simplifying api commands. This fancy processApiCommand is complex and it only\r\n// saves 1 if statement per command call. It might be worth it to simplify it.\r\n// TODO: When pixel mode is set it's setting it in a mixed state. The global $ will get set for\r\n// all screens, but only the current screen on the screen state will get updated.\r\n// Preferred fix is to not set the global $ pixel mode but only for active screen. Or just\r\n// set pixel mode for global $ and all screens - make this a global command only.\r\n\r\n// Set pixel mode command\r\naddCommand( \"setPixelMode\", setPixelMode, [ \"isEnabled\" ] );\r\nfunction setPixelMode( screenData, options ) {\r\n\tconst isEnabled = !!options.isEnabled;\r\n\r\n\t// If we are enabling pixel mode and it's not already set then we setup pixel mode\r\n\tif( isEnabled ) {\r\n\t\tscreenData.context.imageSmoothingEnabled = false;\r\n\t\tfor( const name in m_pixelCommands ) {\r\n\t\t\tprocessApiCommand( screenData, m_pixelCommands[ name ] );\r\n\t\t\tcommands.processApiCommand( m_pixelCommands[ name ] );\r\n\t\t}\r\n\t} else {\r\n\t\tscreenData.context.imageSmoothingEnabled = true;\r\n\t\tfor( const name in m_aaCommands ) {\r\n\t\t\tprocessApiCommand( screenData, m_aaCommands[ name ] );\r\n\t\t\tcommands.processApiCommand( m_aaCommands[ name ] );\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Set pixel mode command\r\naddCommand( \"getPixelMode\", getPixelMode, [] );\r\nfunction getPixelMode( screenData ) {\r\n\treturn !screenData.context.imageSmoothingEnabled;\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Internal Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Process api command\r\nfunction processApiCommand( screenData, command ) {\r\n\tscreenData.api[ command.name ] = ( ...args ) => {\r\n\t\tconst options = utils.parseOptions( args, command.parameterNames );\r\n\t\treturn command.fn( screenData, options );\r\n\t};\r\n}\r\n\r\n/**\r\n * Parses an aspect ratio string into an object containing width, height, and splitter information.\r\n * Supports \"width:height\", \"widthxheight\", \"widtheheight\", and \"widthmheight\" formats.\r\n *\r\n * @param {string} aspect The aspect ratio string to parse.\r\n * @returns {object|null} An object with width, height, splitter, and isMultiple properties, or \r\n * \t\t\t\t\t\t  null if the input is invalid.\r\n */\r\nfunction parseAspect( aspect ) {\r\n\tconst match = aspect.replaceAll( \" \", \"\" ).match( /^(\\d+)(:|x|e|m)(\\d+)$/ );\r\n\r\n\tif( !match ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst width = Number( match[ 1 ] );\r\n\tconst splitter = match[ 2 ];\r\n\tconst height = Number( match[ 3 ] );\r\n\r\n\tif( isNaN( width ) || width === 0 || isNaN( height ) || height === 0 ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn {\r\n\t\t\"width\": width,\r\n\t\t\"height\": height,\r\n\t\t\"splitter\": splitter,\r\n\t\t\"isMultiple\": splitter === \"m\" || splitter === \"e\",\r\n\t};\r\n}\r\n\r\n// Determines the type of screen to create and returns the created screen\r\nfunction createScreen( options ) {\r\n\tif( options.isOffscreen ) {\r\n\t\tif( !options.aspectData ) {\r\n\t\t\tconst error = new Error(\r\n\t\t\t\t\"screen: You must supply an aspect ratio with exact dimensions \" +\r\n\t\t\t\t\"for offscreen screens.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"NO_ASPECT_OFFSCREEN\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tif( options.aspectData.splitter !== \"x\" ) {\r\n\t\t\tconst error = new Error(\r\n\t\t\t\t\"screen: You must use aspect ratio with e(x)act pixel dimensions for offscreen\" +\r\n\t\t\t\t\"screens. For example: 320x200 for width of 320 and height of 200 pixels.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_OFFSCREEN_ASPECT\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\treturn createOffscreenScreen( options );\r\n\t}\r\n\r\n\t// Get the container element from the dom if it's available\r\n\tif( typeof options.container === \"string\" ) {\r\n\t\toptions.container = document.getElementById( options.container );\r\n\t} else if( !options.container ) {\r\n\t\toptions.container = document.body;\r\n\t} else if( !utils.isDomElement( options.container ) ) {\r\n\t\tconst error = new TypeError(\r\n\t\t\t\"screen: Invalid argument container. Container must be a DOM element \" +\r\n\t\t\t\"or a string id of a DOM element.\"\r\n\t\t);\r\n\t\terror.code = \"INVALID_CONTAINER\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Return a no style screen\r\n\tif( options.noStyles ) {\r\n\t\treturn createNoStyleScreen( options );\r\n\t}\r\n\r\n\t// Return the default screen\r\n\treturn createDefaultScreen( options );\r\n}\r\n\r\n// Create offscreen canvas\r\nfunction createOffscreenScreen( options ) {\r\n\r\n\t// Add the canvas\r\n\toptions.canvas = document.createElement( \"canvas\" );\r\n\toptions.canvas.width = options.aspectData.width;\r\n\toptions.canvas.height = options.aspectData.height;\r\n\r\n\t// Add the buffer canvas\r\n\toptions.bufferCanvas = document.createElement( \"canvas\" );\r\n\toptions.bufferCanvas.width = options.aspectData.width;\r\n\toptions.bufferCanvas.height = options.aspectData.height;\r\n\r\n\t// Set additional options\r\n\toptions.container = null;\r\n\toptions.isOffscreen = true;\r\n\toptions.isNoStyles = false;\r\n\toptions.resizeCallback = null;\r\n\toptions.previousOffsetSize = null;\r\n\r\n\treturn createScreenData( options );\r\n}\r\n\r\n// Create screen with default styling\r\nfunction createDefaultScreen( options ) {\r\n\r\n\t// Create the canvases\r\n\toptions.canvas = document.createElement( \"canvas\" );\r\n\toptions.bufferCanvas = document.createElement( \"canvas\" );\r\n\r\n\t// Style the canvas\r\n\toptions.canvas.tabIndex = 0;\r\n\toptions.canvas.style.outline = \"none\";\r\n\toptions.canvas.style.backgroundColor = \"black\";\r\n\toptions.canvas.style.position = \"absolute\";\r\n\toptions.canvas.style.imageRendering = \"pixelated\";\r\n\toptions.canvas.style.imageRendering = \"crisp-edges\";\r\n\r\n\t// Check if the container is document.body\r\n\tlet isContainerBody = true;\r\n\tif( options.container === document.body ) {\r\n\t\tisContainerBody = false;\r\n\t\tdocument.documentElement.style.height = \"100%\";\r\n\t\tdocument.documentElement.style.margin = \"0\";\r\n\t\tdocument.body.style.height = \"100%\";\r\n\t\tdocument.body.style.margin = \"0\";\r\n\t\tdocument.body.style.overflow = \"hidden\";\r\n\t\toptions.canvas.style.left = \"0\";\r\n\t\toptions.canvas.style.top = \"0\";\r\n\t}\r\n\r\n\t// Make sure container is not blank\r\n\tif( options.container.offsetHeight === 0 ) {\r\n\t\toptions.container.style.height = \"200px\";\r\n\t}\r\n\r\n\t// Append canvas to container\r\n\toptions.container.appendChild( options.canvas );\r\n\r\n\tif( options.aspectData ) {\r\n\r\n\t\t// Calculate container size\r\n\t\tconst size = getSize( options.container );\r\n\r\n\t\t// Set the canvas size\r\n\t\tsetCanvasSize( options.aspectData, options.canvas, size.width, size.height );\r\n\r\n\t\t// Set the buffer size\r\n\t\toptions.bufferCanvas.width = options.canvas.width;\r\n\t\toptions.bufferCanvas.height = options.canvas.height;\r\n\t} else {\r\n\r\n\t\t// If canvas is inside an element, use static position\r\n\t\tif( isContainerBody ) {\r\n\t\t\toptions.canvas.style.position = \"static\";\r\n\t\t}\r\n\r\n\t\t// Set canvas to fullscreen\r\n\t\toptions.canvas.style.width = \"100%\";\r\n\t\toptions.canvas.style.height = \"100%\";\r\n\t\tconst size = getSize( options.canvas );\r\n\t\toptions.canvas.width = size.width;\r\n\t\toptions.canvas.height = size.height;\r\n\t\toptions.bufferCanvas.width = size.width;\r\n\t\toptions.bufferCanvas.height = size.height;\r\n\t}\r\n\r\n\t// Store initial offset size for resize callback\r\n\toptions.previousOffsetSize = {\r\n\t\t\"width\": options.canvas.offsetWidth,\r\n\t\t\"height\": options.canvas.offsetHeight\r\n\t};\r\n\r\n\t// Create screen data first\r\n\tconst screenData = createScreenData( options );\r\n\r\n\t// Add container to the global resize observer (only if not already observed)\r\n\tif( m_resizeObserver && options.container && !m_observedContainers.has( options.container ) ) {\r\n\t\tm_resizeObserver.observe( options.container );\r\n\t\tm_observedContainers.add( options.container );\r\n\t}\r\n\r\n\treturn screenData;\r\n}\r\n\r\n// Create screen without styles\r\nfunction createNoStyleScreen( options ) {\r\n\toptions.canvas = document.createElement( \"canvas\" );\r\n\toptions.bufferCanvas = document.createElement( \"canvas\" );\r\n\r\n\t// Append canvas to container\r\n\toptions.container.appendChild( options.canvas );\r\n\r\n\t// Add tabindex to canvas\r\n\toptions.canvas.tabIndex = 0;\r\n\r\n\tif( options.aspectData && options.aspectData.splitter === \"x\" ) {\r\n\r\n\t\t// Set the canvases size to the exact sizes specified\r\n\t\toptions.canvas.width = options.aspectData.width;\r\n\t\toptions.canvas.height = options.aspectData.height;\r\n\t\toptions.bufferCanvas.width = options.canvas.width;\r\n\t\toptions.bufferCanvas.height = options.canvas.height;\r\n\t} else {\r\n\t\tconst size = getSize( options.canvas );\r\n\t\toptions.bufferCanvas.width = size.width;\r\n\t\toptions.bufferCanvas.height = size.height;\r\n\t}\r\n\r\n\t// Store initial offset size for resize callback (not used for noStyles, but for consistency)\r\n\toptions.previousOffsetSize = null;\r\n\r\n\treturn createScreenData( options );\r\n}\r\n\r\n// Create the screen data object\r\nfunction createScreenData( options ) {\r\n\t\r\n\t// Set the will read frequently attribute to improve speed of primative graphics\r\n\tconst contextAttributes = { \"willReadFrequently\": !!options.willReadFrequently };\r\n\r\n\tconst screenApi = Object.create( SCREEN_API_PROTO );\r\n\tscreenApi.id = m_nextScreenId;\r\n\r\n\t// Create the screen data object\r\n\tconst screenData = {\r\n\t\t\"id\": m_nextScreenId,\r\n\t\t\"canvas\": options.canvas,\r\n\t\t\"width\": options.canvas.width,\r\n\t\t\"height\": options.canvas.height,\r\n\t\t\"container\": options.container,\r\n\t\t\"aspectData\": options.aspectData,\r\n\t\t\"isOffscreen\": options.isOffscreen,\r\n\t\t\"isNoStyles\": options.isNoStyles,\r\n\t\t\"context\": options.canvas.getContext( \"2d\", contextAttributes ),\r\n\t\t\"bufferCanvas\": options.bufferCanvas,\r\n\t\t\"bufferContext\": options.bufferCanvas.getContext( \"2d\", contextAttributes ),\r\n\t\t\"clientRect\": options.canvas.getBoundingClientRect(),\r\n\t\t\"resizeCallback\": options.resizeCallback,\r\n\t\t\"previousOffsetSize\": options.previousOffsetSize || null,\r\n\t\t\"api\": screenApi\r\n\t};\r\n\r\n\t// Append additional items onto the screendata\r\n\tObject.assign( screenData, structuredClone( m_screenDataItems ) );\r\n\r\n\t// Append dynamic screendata items\r\n\tfor( const itemGetter of m_screenDataItemGetters ) {\r\n\t\tscreenData[ itemGetter.name ] = structuredClone( itemGetter.fn() );\r\n\t}\r\n\r\n\t// Append internal screen commands to screen data\r\n\tfor( const cmd of m_screenInternalCommands ) {\r\n\t\tscreenData[ cmd.name ] = cmd.fn;\r\n\t}\r\n\r\n\t// Additional setup for screen data\r\n\tm_nextScreenId += 1;\r\n\toptions.canvas.dataset.screenId = screenData.id;\r\n\tscreenData.context.imageSmoothingEnabled = false;\r\n\tscreenData.context.fillStyle = screenData.color.hex;\r\n\tscreenData.context.strokeStyle = screenData.color.hex;\r\n\r\n\treturn screenData;\r\n}\r\n\r\n// Set canvas size based on aspect ratio\r\nfunction setCanvasSize( aspectData, canvas, maxWidth, maxHeight ) {\r\n\tlet width = aspectData.width;\r\n\tlet height = aspectData.height;\r\n\tconst splitter = aspectData.splitter;\r\n\tlet newWidth, newHeight;\r\n\r\n\t// If set size to exact multiple\r\n\tif( aspectData.isMultiple && splitter !== \":\" ) {\r\n\t\tconst factorX = Math.floor( maxWidth / width );\r\n\t\tconst factorY = Math.floor( maxHeight / height );\r\n\t\tlet factor = factorX > factorY ? factorY : factorX;\r\n\t\tif( factor < 1 ) {\r\n\t\t\tfactor = 1;\r\n\t\t}\r\n\t\tnewWidth = width * factor;\r\n\t\tnewHeight = height * factor;\r\n\r\n\t\t// Extending the canvas to match container size\r\n\t\tif( splitter === \"e\" ) {\r\n\t\t\twidth = Math.floor( maxWidth / factor );\r\n\t\t\theight = Math.floor( maxHeight / factor );\r\n\t\t\tnewWidth = width * factor;\r\n\t\t\tnewHeight = height * factor;\r\n\t\t}\r\n\t} else {\r\n\r\n\t\t// Calculate the screen ratios\r\n\t\tconst ratio1 = height / width;\r\n\t\tconst ratio2 = width / height;\r\n\t\tnewWidth = maxHeight * ratio2;\r\n\t\tnewHeight = maxWidth * ratio1;\r\n\r\n\t\t// Calculate the best fit\r\n\t\tif( newWidth > maxWidth ) {\r\n\t\t\tnewWidth = maxWidth;\r\n\t\t\tnewHeight = newWidth * ratio1;\r\n\t\t} else {\r\n\t\t\tnewHeight = maxHeight;\r\n\t\t}\r\n\r\n\t\t// Extending canvas\r\n\t\tif( splitter === \"e\" ) {\r\n\t\t\twidth += Math.round( ( maxWidth - newWidth ) * ( width / newWidth ) );\r\n\t\t\theight += Math.round( ( maxHeight - newHeight ) * ( height / newHeight ) );\r\n\t\t\tnewWidth = maxWidth;\r\n\t\t\tnewHeight = maxHeight;\r\n\t\t}\r\n\t}\r\n\r\n\t// Set the size\r\n\tcanvas.style.width = Math.floor( newWidth ) + \"px\";\r\n\tcanvas.style.height = Math.floor( newHeight ) + \"px\";\r\n\r\n\t// Set the margins\r\n\tcanvas.style.marginLeft = Math.floor( ( maxWidth - newWidth ) / 2 ) + \"px\";\r\n\tcanvas.style.marginTop = Math.floor( ( maxHeight - newHeight ) / 2 ) + \"px\";\r\n\r\n\t// Set the actual canvas dimensions\r\n\tif( splitter !== \":\" ) {\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\t} else {\r\n\r\n\t\t// For ratio mode, set to container size\r\n\t\tcanvas.width = Math.floor( newWidth );\r\n\t\tcanvas.height = Math.floor( newHeight );\r\n\t}\r\n}\r\n\r\n// Get size of container\r\nfunction getSize( element ) {\r\n\treturn {\r\n\t\t\"width\": element.offsetWidth || element.clientWidth || element.width,\r\n\t\t\"height\": element.offsetHeight || element.clientHeight || element.height\r\n\t};\r\n}\r\n\r\n// Resizes a single screen\r\nfunction resizeScreen( screenData ) {\r\n\r\n\t// Skip if screen is not visible or should not be resized\r\n\tif(\r\n\t\tscreenData.isOffscreen ||\r\n\t\tscreenData.isNoStyles ||\r\n\t\tscreenData.canvas.offsetParent === null\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Get the previous size (stored from last time)\r\n\tconst fromSize = screenData.previousOffsetSize || {\r\n\t\t\"width\": screenData.canvas.offsetWidth,\r\n\t\t\"height\": screenData.canvas.offsetHeight\r\n\t};\r\n\r\n\t// Draw the canvas to the buffer\r\n\tscreenData.bufferContext.clearRect( 0, 0, screenData.width, screenData.height );\r\n\tscreenData.bufferContext.drawImage( screenData.canvas, 0, 0 );\r\n\r\n\tlet size;\r\n\r\n\tif( screenData.aspectData ) {\r\n\r\n\t\t// Update the canvas to the new size\r\n\t\tsize = getSize( screenData.container );\r\n\t\tsetCanvasSize( screenData.aspectData, screenData.canvas, size.width, size.height );\r\n\r\n\t} else {\r\n\r\n\t\t// Update canvas to fullscreen absolute pixels\r\n\t\tsize = getSize( screenData.canvas );\r\n\t\tscreenData.canvas.width = size.width;\r\n\t\tscreenData.canvas.height = size.height;\r\n\r\n\t}\r\n\r\n\t// Resize the client rectangle\r\n\tscreenData.clientRect = screenData.canvas.getBoundingClientRect();\r\n\r\n\t// Draw the buffer back onto the canvas\r\n\tscreenData.context.drawImage(\r\n\t\tscreenData.bufferCanvas, 0, 0, screenData.width, screenData.height\r\n\t);\r\n\r\n\t// Set the new buffer size\r\n\tscreenData.bufferCanvas.width = screenData.canvas.width;\r\n\tscreenData.bufferCanvas.height = screenData.canvas.height;\r\n\r\n\t// Set the new screen size\r\n\tscreenData.width = screenData.canvas.width;\r\n\tscreenData.height = screenData.canvas.height;\r\n\r\n\t// Get the new size after resize\r\n\tconst toSize = {\r\n\t\t\"width\": screenData.canvas.offsetWidth,\r\n\t\t\"height\": screenData.canvas.offsetHeight\r\n\t};\r\n\r\n\t// Send the resize data to the client\r\n\tif( screenData.resizeCallback ) {\r\n\t\tif(\r\n\t\t\tfromSize.width !== toSize.width ||\r\n\t\t\tfromSize.height !== toSize.height\r\n\t\t) {\r\n\t\t\tscreenData.resizeCallback( screenData.api, fromSize, toSize );\r\n\t\t}\r\n\t}\r\n\r\n\t// Store the new size for next time\r\n\tscreenData.previousOffsetSize = toSize;\r\n}\r\n", "/**\r\n * Pi.js - Renderer Module\r\n * \r\n * Manages the screens image data including rendering the screen and getting the image data\r\n * Also handles clearing the screen and setting the image pixel data\r\n * \r\n * @module core/renderer\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport * as screenManager from \"./screen-manager\";\r\nimport * as utils from \"./utils\";\r\n\r\nconst m_pens = {};\r\nconst m_blends = {};\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Initialize the renderer\r\nexport function init() {\r\n\r\n\t// Add pens\r\n\taddPen( \"pixel\", penSetPixel, \"square\" );\r\n\taddPen( \"square\", penSquare, \"square\" );\r\n\taddPen( \"circle\", penCircle, \"round\" );\r\n\r\n\t// Add blends blend\r\n\taddBlend( \"replace\", blendReplace );\r\n\taddBlend( \"alpha\", blendAlpha );\r\n\r\n\t// Add Render Screen Data\r\n\tscreenManager.addScreenDataItem( \"imageData\", null );\r\n\tscreenManager.addScreenDataItem( \"imageData2\", null );\r\n\tscreenManager.addScreenDataItem( \"isDirty\", false );\r\n\tscreenManager.addScreenDataItem( \"penData\", { \"cap\": \"square\", \"size\": 1 } );\r\n\tscreenManager.addScreenDataItem( \"blendData\", { \"noise\": null } );\r\n\tscreenManager.addScreenDataItem( \"isAutoRender\", true );\r\n\tscreenManager.addScreenDataItem( \"autoRenderMicrotaskScheduled\", false );\r\n\r\n\t// Add Screen Internal Commands\r\n\tscreenManager.addScreenInternalCommands( \"pen\", m_pens[ \"pixel\" ].fn );\r\n\tscreenManager.addScreenInternalCommands( \"blend\", m_blends[ \"replace\" ].fn );\r\n\tscreenManager.addScreenInternalCommands( \"blendColor\", blendGetColorNoNoise );\r\n}\r\n\r\nexport function getImageData( screenData ) {\r\n\tif( screenData.isDirty === false || screenData.imageData === null ) {\r\n\t\tscreenData.imageData = screenData.context.getImageData(\r\n\t\t\t0, 0, screenData.width, screenData.height\r\n\t\t);\r\n\t\tscreenData.imageData2 = screenData.imageData.data;\r\n\t}\r\n}\r\n\r\nexport function setImageDirty( screenData ) {\r\n\tif( screenData.isDirty === false ) {\r\n\t\tscreenData.isDirty = true;\r\n\t\tif(\r\n\t\t\tscreenData.isAutoRender && \r\n\t\t\t! screenData.autoRenderMicrotaskScheduled \r\n\t\t) {\r\n\t\t\tscreenData.autoRenderMicrotaskScheduled = true;\r\n\t\t\tutils.queueMicrotask( function () {\r\n\t\t\t\tif( screenData.isAutoRender ) {\r\n\t\t\t\t\tscreenData.api.render();\r\n\t\t\t\t}\r\n\t\t\t\tscreenData.autoRenderMicrotaskScheduled = false;\r\n\t\t\t} );\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * External API Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Render command\r\nscreenManager.addCommand( \"render\", render, [] );\r\nfunction render( screenData ) {\r\n\tif( screenData.imageData && screenData.isDirty ) {\r\n\t\tscreenData.context.putImageData( screenData.imageData, 0, 0 );\r\n\t}\r\n\tscreenData.isDirty = false;\r\n}\r\n\r\n// cls (clear screen) command\r\nscreenManager.addCommand( \"cls\", cls, [ \"x\", \"y\", \"width\", \"height\" ] );\r\nfunction cls( screenData, options ) {\r\n\tconst x = utils.getInt( options.x, 0 );\r\n\tconst y = utils.getInt( options.y, 0 );\r\n\tconst width = utils.getInt( options.width, screenData.width );\r\n\tconst height = utils.getInt( options.height, screenData.height );\r\n\r\n\t// If clearing a partial region, render first to preserve other content\r\n\tif( x !== 0 || y !== 0 || width !== screenData.width || height !== screenData.height ) {\r\n\t\tscreenData.api.render();\r\n\t\tscreenData.context.clearRect( x, y, width, height );\r\n\t} else {\r\n\r\n\t\t// Full screen clear - reset everything\r\n\t\tscreenData.context.clearRect( x, y, width, height );\r\n\t\tscreenData.imageData = null;\r\n\t\tscreenData.isDirty = false;\r\n\t\tscreenData.printCursor.x = 0;\r\n\t\tscreenData.printCursor.y = 0;\r\n\t\tscreenData.cursor.x = 0;\r\n\t\tscreenData.cursor.y = 0;\r\n\t}\r\n}\r\n\r\n// setAutoRender command\r\nscreenManager.addCommand( \"setAutoRender\", setAutoRender, [ \"isAutoRender\" ] );\r\nfunction setAutoRender( screenData, options ) {\r\n\tconst isAutoRender = !!options.isAutoRender;\r\n\r\n\tscreenData.isAutoRender = isAutoRender;\r\n\r\n\t// If enabling auto-render, render any pending changes immediately\r\n\tif( isAutoRender ) {\r\n\t\tscreenData.api.render();\r\n\t}\r\n}\r\n\r\n// Set Pen Command\r\nscreenManager.addCommand( \"setPen\", setPen, [ \"pen\", \"size\" ] );\r\nfunction setPen( screenData, options ) {\r\n\tconst pen = options.pen;\r\n\tlet size = utils.getFloat( options.size, null );\r\n\r\n\tif( !m_pens[ pen ] ) {\r\n\t\tconst error = new TypeError(\r\n\t\t\t`setPen: parameter pen is not a valid pen.`\r\n\t\t);\r\n\t\terror.code = \"INVALID_PEN\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( size === null ) {\r\n\t\tconst error = new TypeError( \"setPen: parameter size must be a number\" );\r\n\t\terror.code = \"INVALID_SIZE\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( pen === \"pixel\" ) {\r\n\t\tsize = 1;\r\n\t}\r\n\r\n\t// Set the minimum pen size to 1\r\n\tif( size < 1 ) {\r\n\t\tsize = 1;\r\n\t}\r\n\r\n\t// Handle special case of size of one\r\n\tif( size === 1 ) {\r\n\r\n\t\t// Size is one so only draw one pixel\r\n\t\tscreenData.pen = m_pens[ \"pixel\" ].fn;\r\n\r\n\t\t// Set the line width for context draw\r\n\t\tscreenData.context.lineWidth = 1;\r\n\t} else {\r\n\r\n\t\t// Set the draw mode for pixel draw\r\n\t\tscreenData.pen = m_pens[ pen ].fn;\r\n\r\n\t\t// Set the line width for context draw\r\n\t\tscreenData.context.lineWidth = size;\r\n\t}\r\n\r\n\tscreenData.penData.size = size;\r\n\tscreenData.penData.cap = m_pens[ pen ].cap;\r\n\tscreenData.context.lineCap = m_pens[ pen ].cap;\r\n}\r\n\r\n// Set blend mode\r\nscreenManager.addCommand( \"setBlend\", setBlend, [ \"mode\", \"noise\" ] );\r\nfunction setBlend( screenData, options ) {\r\n\tconst mode = options.mode;\r\n\tlet noise = options.noise;\r\n\r\n\tif( !m_blends[ mode ] ) {\r\n\t\tconst error = new TypeError(\r\n\t\t\t`setBlend: Argument blend is not a valid blend mode.`\r\n\t\t);\r\n\t\terror.code = \"INVALID_BLEND_MODE\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( Array.isArray( noise ) ) {\r\n\t\tfor( let i = 0; i < noise.length; i++ ) {\r\n\t\t\tif( isNaN( noise[ i ] ) ) {\r\n\t\t\t\tconst error = new TypeError(\r\n\t\t\t\t\t\"setBlend: parameter noise array contains an invalid value\"\r\n\t\t\t\t);\r\n\t\t\t\terror.code = \"INVALID_NOISE_VALUE\";\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\t\tscreenData.blendColor = blendGetColorNoise;\r\n\t\tscreenData.blendData.noise = noise;\r\n\t} else {\r\n\t\tnoise = utils.getInt( noise, null );\r\n\t\tif( noise === null ) {\r\n\t\t\tscreenData.blendColor = blendGetColorNoNoise;\r\n\t\t\tscreenData.blendData.noise = null;\r\n\t\t} else {\r\n\t\t\tscreenData.blendColor = blendGetColorNoise;\r\n\t\t\tscreenData.blendData.noise = utils.clamp( noise, 0, 255 );\r\n\t\t}\r\n\t}\r\n\r\n\tscreenData.blend = m_blends[ mode ].fn;\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Internal Commands\r\n **************************************************************************************************/\r\n\r\n\r\nfunction addPen( name, fn, cap ) {\r\n\tm_pens[ name ] = { fn, cap, \"size\": 1 };\r\n}\r\n\r\nfunction addBlend( name, fn ) {\r\n\tm_blends[ name ] = { fn };\r\n}\r\n\r\n\r\n// Default Blend Color Picker\r\nfunction blendGetColorNoNoise( screenData, c ) {\r\n\treturn c;\r\n}\r\n\r\n// Default Noise Blend Color Picker\r\nfunction blendGetColorNoise( screenData, c ) {\r\n\tconst noise = screenData.blendData.noise;\r\n\tconst c2 = { \"r\": c.r, \"g\": c.g, \"b\": c.b, \"a\": c.a };\r\n\tconst half = noise / 2;\r\n\r\n\tif( Array.isArray( noise ) ) {\r\n\t\tc2.r = utils.clamp(\r\n\t\t\tMath.round( c2.r + utils.rndRange( -noise[ 0 ], noise[ 0 ] ) ),\t0, 255\r\n\t\t);\r\n\t\tc2.g = utils.clamp(\r\n\t\t\tMath.round( c2.g + utils.rndRange( -noise[ 1 ], noise[ 1 ] ) ), 0, 255\r\n\t\t);\r\n\t\tc2.b = utils.clamp(\r\n\t\t\tMath.round( c2.b + utils.rndRange( -noise[ 2 ], noise[ 2 ] ) ), 0, 255\r\n\t\t);\r\n\t\tc2.a = utils.clamp(\r\n\t\t\tc2.a + utils.rndRange( -noise[ 3 ], noise[ 3 ] ), 0, 255\r\n\t\t);\r\n\t} else {\r\n\t\tconst change = Math.round( Math.random() * noise - half );\r\n\t\tc2.r = utils.clamp( c2.r + change, 0, 255 );\r\n\t\tc2.g = utils.clamp( c2.g + change, 0, 255 );\r\n\t\tc2.b = utils.clamp( c2.b + change, 0, 255 );\r\n\t}\r\n\r\n\treturn c2;\r\n}\r\n\r\n/***************************************************************************************************\r\n * Blends\r\n **************************************************************************************************/\r\n\r\n\r\nfunction blendReplace( screenData, x, y, c ) {\r\n\r\n\tc = screenData.blendColor( screenData, c );\r\n\r\n\t// Get the image data\r\n\tconst data = screenData.imageData2;\r\n\r\n\t// Calculate the index\r\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\r\n\r\n\tdata[ i ] = c.r;\r\n\tdata[ i + 1 ] = c.g;\r\n\tdata[ i + 2 ] = c.b;\r\n\tdata[ i + 3 ] = c.a;\r\n}\r\n\r\nfunction blendAlpha( screenData, x, y, c ) {\r\n\r\n\tc = screenData.blendColor( screenData, c );\r\n\t\r\n\t// Get the image data\r\n\tconst data = screenData.imageData2\r\n\r\n\t// Calculate the index\r\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\r\n\r\n\t// Normalize alpha to [ 0, 1 ]\r\n\tconst srcA = c.a / 255;\r\n\tconst dstA = data[ i + 3 ] / 255;\r\n\tconst outA = srcA + dstA * ( 1 - srcA );\r\n\r\n\t// Blend the RGB channels\r\n\tdata[ i ] = Math.round( ( c.r * srcA + data[ i ] * dstA * ( 1 - srcA ) ) / outA );\r\n\tdata[ i + 1 ] = Math.round( ( c.g * srcA + data[ i + 1 ] * dstA * ( 1 - srcA ) ) / outA );\r\n\tdata[ i + 2 ] = Math.round( ( c.b * srcA + data[ i + 2 ] * dstA * ( 1 - srcA ) ) / outA );\r\n\r\n\t// Update alpha channel\r\n\tdata[ i + 3 ] = Math.round( outA * 255 );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Pens\r\n **************************************************************************************************/\r\n\r\n\r\n// Set pixel pen\r\nfunction penSetPixel( screenData, x, y, c ) {\r\n\tif( x < 0 || x >= screenData.width || y < 0 || y >= screenData.height ) {\r\n\t\treturn;\r\n\t}\r\n\tscreenData.blend( screenData, x, y, c );\r\n}\r\n\r\nfunction penSquare( screenData, x, y, c ) {\r\n\r\n\t// Size must always be an odd integer\r\n\tconst size = Math.round( screenData.penData.size ) | 1;\r\n\r\n\t// Compute the center offset of the square\r\n\tconst offset = Math.round( size / 2 ) - 1;\r\n\r\n\t// Calculate bounds and clip to screen\r\n\tconst startX = utils.clamp( x - offset, 0, screenData.width );\r\n\tconst endX = utils.clamp( x - offset + size, 0, screenData.width );\r\n\tconst startY = utils.clamp( y - offset, 0, screenData.height );\r\n\tconst endY = utils.clamp( y - offset + size, 0, screenData.height );\r\n\r\n\t// Draw the clipped square\r\n\tfor( let py = startY; py < endY; py++ ) {\r\n\t\tfor( let px = startX; px < endX; px++ ) {\r\n\t\t\tscreenData.blend( screenData, px, py, c );\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction penCircle( screenData, x, y, c ) {\r\n\r\n\t// Pen circle size must be an integer\r\n\tconst baseSize = Math.round( screenData.penData.size );\r\n\r\n\t// Special case for pen size 2\r\n\tif( baseSize === 2 ) {\r\n\t\tif( x >= 0 && x < screenData.width && y >= 0 && y < screenData.height ) {\r\n\t\t\tscreenData.blend( screenData, x, y, c );\r\n\t\t}\r\n\t\tif( x + 1 >= 0 && x + 1 < screenData.width && y >= 0 && y < screenData.height ) {\r\n\t\t\tscreenData.blend( screenData, x + 1, y, c );\r\n\t\t}\r\n\t\tif( x - 1 >= 0 && x - 1 < screenData.width && y >= 0 && y < screenData.height ) {\r\n\t\t\tscreenData.blend( screenData, x - 1, y, c );\r\n\t\t}\r\n\t\tif( x >= 0 && x < screenData.width && y + 1 >= 0 && y + 1 < screenData.height ) {\r\n\t\t\tscreenData.blend( screenData, x, y + 1, c );\r\n\t\t}\r\n\t\tif( x >= 0 && x < screenData.width && y - 1 >= 0 && y - 1 < screenData.height ) {\r\n\t\t\tscreenData.blend( screenData, x, y - 1, c );\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Double size to get the size of the outer box\r\n\tconst diameter = baseSize * 2;\r\n\r\n\t// Half is size of radius\r\n\tconst half = baseSize;\r\n\r\n\t// Calculate the center of circle\r\n\tconst offset = half - 1;\r\n\r\n\t// Pre-calculate squared radius threshold\r\n\t// We compare squared distance to (half - 0.5)^2\r\n\tconst radiusThresholdSq = ( half - 0.5 ) * ( half - 0.5 );\r\n\r\n\t// Calculate bounds and clip to screen\r\n\tconst startX = utils.clamp( x - offset, 0, screenData.width );\r\n\tconst endX = utils.clamp( x - offset + diameter, 0, screenData.width );\r\n\tconst startY = utils.clamp( y - offset, 0, screenData.height );\r\n\tconst endY = utils.clamp( y - offset + diameter, 0, screenData.height );\r\n\r\n\t// Loop through the clipped square boundary\r\n\tfor( let py = startY; py < endY; py++ ) {\r\n\t\tconst dy = py - y;\r\n\r\n\t\tfor( let px = startX; px < endX; px++ ) {\r\n\t\t\tconst dx = px - x;\r\n\r\n\t\t\t// Compute the squared distance from the center\r\n\t\t\tconst distSq = dx * dx + dy * dy;\r\n\r\n\t\t\t// Only draw the pixel if its squared distance is less than the threshold\r\n\t\t\tif( distSq < radiusThresholdSq ) {\r\n\t\t\t\tscreenData.blend( screenData, px, py, c );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "/**\n * Pi.js - Colors Module\n * \n * Manages the color palettes and color values\n * \n * @module core/colors\n */\n\n\"use strict\";\n\nimport * as commands from \"./commands\";\nimport * as utils from \"./utils\";\nimport * as screenManager from \"./screen-manager\";\nimport * as renderer from \"./renderer\";\n\nlet m_defaultPal = [];\nlet m_defaultPalMap = new Map();\nlet m_defaultColor = -1;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\n// Initialize color defaults\nexport function init() {\n\n\t// Default 256-color palette (CGA + extended colors) - raw hex strings\n\tconst defaultPaletteHex = [\n\t\t\"#0000AA\", \"#00AA00\", \"#00AAAA\", \"#AA0000\", \"#AA00AA\", \"#AA5500\", \"#AAAAAA\", \"#555555\",\n\t\t\"#5555FF\", \"#55FF55\", \"#55FFFF\", \"#FF5555\", \"#FF55FF\", \"#FFFF55\", \"#FFFFFF\", \"#000000\",\n\t\t\"#141414\", \"#202020\", \"#2D2D2D\", \"#393939\", \"#454545\", \"#515151\", \"#616161\", \"#717171\",\n\t\t\"#828282\", \"#929292\", \"#A2A2A2\", \"#B6B6B6\", \"#CACACA\", \"#E3E3E3\", \"#FFFFFF\", \"#0000FF\",\n\t\t\"#4100FF\", \"#7D00FF\", \"#BE00FF\", \"#FF00FF\", \"#FF00BE\", \"#FF007D\", \"#FF0041\", \"#FF0000\",\n\t\t\"#FF4100\", \"#FF7D00\", \"#FFBE00\", \"#FFFF00\", \"#BEFF00\", \"#7DFF00\", \"#41FF00\", \"#00FF00\",\n\t\t\"#00FF41\", \"#00FF7D\", \"#00FFBE\", \"#00FFFF\", \"#00BEFF\", \"#007DFF\", \"#0041FF\", \"#7D7DFF\",\n\t\t\"#9E7DFF\", \"#BE7DFF\", \"#DF7DFF\", \"#FF7DFF\", \"#FF7DDF\", \"#FF7DBE\", \"#FF7D9E\", \"#FF7D7D\",\n\t\t\"#FF9E7D\", \"#FFBE7D\", \"#FFDF7D\", \"#FFFF7D\", \"#DFFF7D\", \"#BEFF7D\", \"#9EFF7D\", \"#7DFF7D\",\n\t\t\"#7DFF9E\", \"#7DFFBE\", \"#7DFFDF\", \"#7DFFFF\", \"#7DDFFF\", \"#7DBEFF\", \"#7D9EFF\", \"#B6B6FF\",\n\t\t\"#C6B6FF\", \"#DBB6FF\", \"#EBB6FF\", \"#FFB6FF\", \"#FFB6EB\", \"#FFB6DB\", \"#FFB6C6\", \"#FFB6B6\",\n\t\t\"#FFC6B6\", \"#FFDBB6\", \"#FFEBB6\", \"#FFFFB6\", \"#EBFFB6\", \"#DBFFB6\", \"#C6FFB6\", \"#B6FFB6\",\n\t\t\"#B6FFC6\", \"#B6FFDB\", \"#B6FFEB\", \"#B6FFFF\", \"#B6EBFF\", \"#B6DBFF\", \"#B6C6FF\", \"#000071\",\n\t\t\"#1C0071\", \"#390071\", \"#550071\", \"#710071\", \"#710055\", \"#710039\", \"#71001C\", \"#710000\",\n\t\t\"#711C00\", \"#713900\", \"#715500\", \"#717100\", \"#557100\", \"#397100\", \"#1C7100\", \"#007100\",\n\t\t\"#00711C\", \"#007139\", \"#007155\", \"#007171\", \"#005571\", \"#003971\", \"#001C71\", \"#393971\",\n\t\t\"#453971\", \"#553971\", \"#613971\", \"#713971\", \"#713961\", \"#713955\", \"#713945\", \"#713939\",\n\t\t\"#714539\", \"#715539\", \"#716139\", \"#717139\", \"#617139\", \"#557139\", \"#457139\", \"#397139\",\n\t\t\"#397145\", \"#397155\", \"#397161\", \"#397171\", \"#396171\", \"#395571\", \"#394571\", \"#515171\",\n\t\t\"#595171\", \"#615171\", \"#695171\", \"#715171\", \"#715169\", \"#715161\", \"#715159\", \"#715151\",\n\t\t\"#715951\", \"#716151\", \"#716951\", \"#717151\", \"#697151\", \"#617151\", \"#597151\", \"#517151\",\n\t\t\"#517159\", \"#517161\", \"#517169\", \"#517171\", \"#516971\", \"#516171\", \"#515971\", \"#000041\",\n\t\t\"#100041\", \"#200041\", \"#310041\", \"#410041\", \"#410031\", \"#410020\", \"#410010\", \"#410000\",\n\t\t\"#411000\", \"#412000\", \"#413100\", \"#414100\", \"#314100\", \"#204100\", \"#104100\", \"#004100\",\n\t\t\"#004110\", \"#004120\", \"#004131\", \"#004141\", \"#003141\", \"#002041\", \"#001041\", \"#202041\",\n\t\t\"#282041\", \"#312041\", \"#392041\", \"#412041\", \"#412039\", \"#412031\", \"#412028\", \"#412020\",\n\t\t\"#412820\", \"#413120\", \"#413920\", \"#414120\", \"#394120\", \"#314120\", \"#284120\", \"#204120\",\n\t\t\"#204128\", \"#204131\", \"#204139\", \"#204141\", \"#203941\", \"#203141\", \"#202841\", \"#2D2D41\",\n\t\t\"#312D41\", \"#352D41\", \"#3D2D41\", \"#412D41\", \"#412D3D\", \"#412D35\", \"#412D31\", \"#412D2D\",\n\t\t\"#41312D\", \"#41352D\", \"#413D2D\", \"#41412D\", \"#3D412D\", \"#35412D\", \"#31412D\", \"#2D412D\",\n\t\t\"#2D4131\", \"#2D4135\", \"#2D413D\", \"#2D4141\", \"#2D3D41\", \"#2D3541\", \"#2D3141\", \"#000000\",\n\t\t\"#000000\", \"#000000\", \"#000000\", \"#000000\", \"#000000\", \"#000000\"\n\t];\n\n\t// Set the default pal and color\n\tsetDefaultPal( { \"pal\": defaultPaletteHex } );\n\tsetDefaultColor( { \"color\": 7 } );\n\n\t// Add getters for screen manager to get defaults for dynamic items\n\tscreenManager.addScreenDataItemGetter( \"pal\", () => m_defaultPal );\n\tscreenManager.addScreenDataItemGetter( \"color\", () => m_defaultColor );\n\tscreenManager.addScreenDataItemGetter( \"palMap\", () => m_defaultPalMap );\n}\n\nexport { findColorIndexByColorValue, getColorValueByRawInput };\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n// Set default pal\ncommands.addCommand( \"setDefaultPal\", setDefaultPal, [ \"pal\" ] );\nfunction setDefaultPal( options ) {\n\tconst pal = options.pal;\n\n\tif( !Array.isArray( pal ) ) {\n\t\tconst error = new TypeError( \"setDefaultPal: Parameter pal must be an array.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( pal.length === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setDefaultPal: Parameter pal must have at least one color value.\"\n\t\t);\n\t\terror.code = \"EMPTY_PALETTE\";\n\t\tthrow error;\n\t}\n\n\t// Create default pal with the 0'th item set as a black transparent color\n\tm_defaultPal = [ utils.convertToColor( [ 0, 0, 0, 0 ] ) ];\n\n\t// Convert palette to color format\n\tfor( let i = 0; i < pal.length; i++ ) {\n\t\tconst c = utils.convertToColor( pal[ i ] );\n\t\tif( c === null ) {\n\t\t\tconsole.warn( `setDefaultPal: Invalid color value inside array pal at index: ${i}.` );\n\t\t\tm_defaultPal.push( utils.convertToColor( \"#000000\" ) );\n\t\t} else {\n\t\t\tm_defaultPal.push( c );\n\t\t}\n\t}\n\n\t// Set the default pal map\n\tm_defaultPalMap = new Map();\n\tfor( let i = 0; i < m_defaultPal.length; i++ ) {\n\t\tm_defaultPalMap.set( m_defaultPal[ i ].key, i );\n\t}\n\n\t// Make sure default color is in the new palette\n\tif( !m_defaultPalMap.has( m_defaultColor.key ) ) {\n\t\tm_defaultColor = m_defaultPal[ 1 ];\n\t}\n}\n\n// Set default color\ncommands.addCommand( \"setDefaultColor\", setDefaultColor, [ \"color\" ] );\nfunction setDefaultColor( options ) {\n\tlet c = options.color;\n\n\tif( !isNaN( Number( c ) ) && m_defaultPal.length > c ) {\n\t\tm_defaultColor = m_defaultPal[ c ];\n\t} else {\n\t\tc = utils.convertToColor( c );\n\t\tif( c === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"setDefaultColor: Parameter color is not a valid color format.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tm_defaultColor = c;\n\t}\n}\n\n// Set color\nscreenManager.addCommand( \"setColor\", setColor, [ \"color\", \"isAddToPalette\" ] );\nfunction setColor( screenData, options ) {\n\tconst colorInput = options.color;\n\tconst isAddToPalette = !!options.isAddToPalette;\n\n\tlet colorValue;\n\n\t// If colorInput is an number then get colorValue for pal\n\tif( typeof colorInput === \"number\" ) {\n\t\tif( colorInput >= screenData.pal.length ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t`setColor: Parameter color index is not in pal.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tcolorValue = screenData.pal[ colorInput ];\n\t} else {\n\n\t\t// Convert the color to a colorValue\n\t\tcolorValue = utils.convertToColor( colorInput );\n\n\t\t// If we were unable to convert this color than it is not a valid color format\n\t\tif( colorValue === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t`setColor: Parameter color is not a valid color format.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// If we are adding to palette then we need to do an additional check to see if the color\n\t\t// is already in the palette or not\n\t\tif( isAddToPalette && findColorIndexByColorValue( screenData, colorValue ) === null ) {\n\t\t\tscreenData.pal.push( colorValue );\n\t\t\tscreenData.palMap.set( colorValue.key, screenData.pal.length - 1 );\n\t\t}\n\t}\n\n\t// Update the color values\n\tscreenData.color = colorValue;\n\tscreenData.context.fillStyle = screenData.color.hex;\n\tscreenData.context.strokeStyle = screenData.color.hex;\n\n\treturn true;\n}\n\n// TODO: Add getColor command to get the active screen color\n\n// Given a color value, find the index from the color palette.\nscreenManager.addCommand( \"getPalIndex\", getPalIndex, [ \"color\", \"tolerance\" ] );\nfunction getPalIndex( screenData, options ) {\n\tlet color = options.color;\n\tlet tolerance = utils.getFloat( options.tolerance, 1 );\n\n\t// Validate tolerance variable\n\tif( tolerance < 0 || tolerance > 1 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"getPalIndex: Parameter tolerance must be a number between 0 and 1.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Convert to color value\n\tconst colorValue = utils.convertToColor( color );\n\tif( colorValue === null ) {\n\t\tconst error = new TypeError(\n\t\t\t`getPalIndex: Parameter color is not a valid color format.`\n\t\t);\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n\n\tconst index = findColorIndexByColorValue( screenData, colorValue, tolerance );\n\tif( index === null ) {\n\t\treturn false;\n\t}\n\treturn index;\n}\n\n// Set the background color of the canvas\nscreenManager.addCommand( \"setBgColor\", setBgColor, [ \"color\" ] );\nfunction setBgColor( screenData, options ) {\n\tconst color = options.color;\n\tlet bc;\n\n\tif( Number.isInteger( color ) ) {\n\t\tbc = screenData.pal[ color ];\n\t} else {\n\t\tbc = utils.convertToColor( color );\n\t}\n\tif( bc && typeof bc.hex === \"string\" ) {\n\t\tscreenData.canvas.style.backgroundColor = bc.hex;\n\t} else {\n\t\tconst error = new TypeError( \"bgColor: invalid color value for parameter color.\" );\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n}\n\n// Set the background color of the container\nscreenManager.addCommand( \"setContainerBgColor\", setContainerBgColor, [ \"color\" ] );\nfunction setContainerBgColor( screenData, options ) {\n\tconst color = options.color;\n\tlet bc;\n\tif( screenData.container ) {\n\t\tif( Number.isInteger( color ) ) {\n\t\t\tbc = screenData.pal[ color ];\n\t\t} else {\n\t\t\tbc = utils.convertToColor( color );\n\t\t}\n\t\tif( bc && typeof bc.hex === \"string\" ) {\n\t\t\tscreenData.container.style.backgroundColor = bc.hex;\n\t\t\treturn;\n\t\t} else {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"containerBgColor: invalid color value for parameter color.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COLOR\";\n\t\t\tthrow error\n\t\t}\n\t}\n}\n\n// Set palette color\nscreenManager.addCommand( \"setPalColor\", setPalColor, [ \"index\", \"color\" ] );\nfunction setPalColor( screenData, options ) {\n\tconst index = options.index;\n\tconst color = options.color;\n\n\t// index must be an integer\n\tif(\n\t\t!Number.isInteger( index ) ||\n\t\tindex < 0 ||\n\t\tindex >= screenData.pal.length\n\t) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPalColor: Parameter index must be an integer value.\"\n\t\t);\n\t\terror.code = \"INVALID_INDEX\";\n\t\tthrow error;\n\t}\n\n\t// index cannot be 0\n\tif( index === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPalColor: Parameter index cannot be 0, this is reserved for transparency. To set \" +\n\t\t\t\"background color of the screen use the setBgColor command.\"\n\t\t);\n\t\terror.code = \"INVALID_INDEX\";\n\t\tthrow error;\n\t}\n\n\t// Get the color value\n\tconst colorValue = utils.convertToColor( color );\n\tif( colorValue === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"setPalColor: Parameter color is not a valid color format.\"\n\t\t);\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n\n\t// Store the old color before replacing\n\tconst oldColor = screenData.pal[ index ];\n\n\t// Check if we are changing the current selected fore color\n\tif( screenData.color.key === oldColor.key ) {\n\t\tscreenData.color = colorValue;\n\t\tscreenData.context.fillStyle = colorValue.hex;\n\t\tscreenData.context.strokeStyle = colorValue.hex;\n\t}\n\n\t// Set the new palette color\n\tscreenData.pal[ index ] = colorValue;\n\n\t// Update the palMap - remove old color entry and add new one\n\tscreenData.palMap.delete( oldColor.key );\n\tscreenData.palMap.set( colorValue.key, index );\n}\n\n// Get palette\nscreenManager.addCommand( \"getPal\", getPal, [] );\nfunction getPal( screenData ) {\n\tconst filteredPal = [];\n\n\t// Need to explicitly convert each color because they need to have the \n\tfor( let i = 1; i < screenData.pal.length; i += 1 ) {\n\t\tfilteredPal.push( { ...screenData.pal[ i ] } );\n\t}\n\treturn filteredPal;\n}\n\n// Get palette with 0'th item transparent black color\nscreenManager.addCommand( \"getPalInternal\", getPalInternal, [] );\nfunction getPalInternal( screenData ) {\n\tconst filteredPal = [];\n\tfor( let i = 0; i < screenData.pal.length; i += 1 ) {\n\t\tfilteredPal.push( { ...screenData.pal[ i ] } );\n\t}\n\treturn filteredPal;\n}\n\n// Set entire palette\nscreenManager.addCommand( \"setPal\", setPal, [ \"pal\" ] );\nfunction setPal( screenData, options ) {\n\tconst pal = options.pal;\n\n\tif( !Array.isArray( pal ) ) {\n\t\tconst error = new TypeError( \"setPal: Parameter pal is must be an array.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( pal.length === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPal: Parameter pal must have at least one color value.\"\n\t\t);\n\t\terror.code = \"EMPTY_PALETTE\";\n\t\tthrow error;\n\t}\n\n\t// Create a new pal with 0'th color set to black transparent\n\tconst newPal = [ utils.convertToColor( [ 0, 0, 0, 0 ] ) ];\n\n\t// Convert all colors and validate\n\tfor( let i = 0; i < pal.length; i++ ) {\n\t\tconst c = utils.convertToColor( pal[ i ] );\n\t\tif( c === null ) {\n\t\t\tconsole.warn( `setPal: Invalid color value inside array pal at index: ${i}.` );\n\t\t\tnewPal.push( utils.convertToColor( \"#000000\" ) );\n\t\t} else {\n\t\t\tnewPal.push( c );\n\t\t}\n\t}\n\n\t// Set the new palette\n\tscreenData.pal = newPal;\n\n\t// Clear the palMap since we've replaced the entire palette\n\tscreenData.palMap = new Map();\n\n\t// Rebuild palMap for new palette colors\n\tfor( let i = 0; i < newPal.length; i++ ) {\n\t\tscreenData.palMap.set( newPal[ i ].key, i );\n\t}\n\n\t// Check if current drawing color needs to be updated\n\t// Find the new palette index that best matches the current color\n\tconst currentColor = screenData.color;\n\tconst newIndex = findColorIndexByColorValue( screenData, currentColor );\n\tif( newIndex !== null ) {\n\t\tscreenData.color = newPal[ newIndex ];\n\t\tscreenData.context.fillStyle = screenData.color.hex;\n\t\tscreenData.context.strokeStyle = screenData.color.hex;\n\t} else {\n\n\t\t// If current color not found, default to palette index 1\n\t\tscreenData.color = newPal[ 1 ];\n\t\tscreenData.context.fillStyle = screenData.color.hex;\n\t\tscreenData.context.strokeStyle = screenData.color.hex;\n\t}\n}\n\n// replaceColors command - replaces colors on the canvas\nscreenManager.addCommand( \"replaceColors\", replaceColors, [ \"findColors\", \"newColors\" ] );\nfunction replaceColors( screenData, options ) {\n\n\tlet findColors = options.findColors;\n\tconst newColors = options.newColors;\n\n\t// Validate findColors\n\tif( !Array.isArray( findColors ) || !Array.isArray( newColors ) ) {\n\t\tconst error = new TypeError( \"replaceColors: Parameter findColors is must be an array.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Make sure there are enough newColors to replace the findColors\n\tif( findColors.length > newColors.length ) {\n\n\t\t// Remove the findColors that don't have a replacement value\n\t\tlet newArray = [];\n\t\tfor( let i = 0; i < newColors.length; i += 1 ) {\n\t\t\tnewArray.push( findColors[ i ] );\n\t\t}\n\t\tfindColors = newArray;\n\t}\n\n\t// Build the findKeys map\n\tlet findKeys = {};\n\tfor( let i = 0; i < findColors.length; i += 1 ) {\n\n\t\t// Make sure the findColor is a valid color\n\t\tconst findColor = getColorValueByRawInput( screenData, findColors[ i ] );\n\t\tif( findColor === null ) {\n\t\t\t\n\t\t\t// Skip and warn\n\t\t\tconsole.warn(\n\t\t\t\t`replaceColors: Invalid color value inside array findColors at index: ${i}.`\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t// Make sure the newColor is a valid color\n\t\tlet newColor = getColorValueByRawInput( screenData, newColors[ i ] );\n\t\tif( newColor === null ) {\n\t\t\t\n\t\t\t// Skip and warn\n\t\t\tconsole.warn(\n\t\t\t\t`replaceColors: Invalid color value inside array newColors at index: ${i}.`\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\n\t\tfindKeys[ findColor.key ] = newColor;\n\t}\n\n\t// Might want to throw an exception but trying to make this consistant with replacePalColors\n\tif( Object.keys( findKeys ).length === 0 ) {\n\t\tconst error = new TypeError( \"replaceColors: No valid find and new colors found.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\trenderer.getImageData( screenData );\n\tconst data = screenData.imageData2;\n\n\t// Replace all the colors\n\tfor( let y = 0; y < screenData.height; y++ ) {\n\t\tfor( let x = 0; x < screenData.width; x++ ) {\n\t\t\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\t\t\tconst r = data[ i ];\n\t\t\tconst g = data[ i + 1 ];\n\t\t\tconst b = data[ i + 2 ];\n\t\t\tconst a = data[ i + 3 ];\n\t\t\tconst colorKey = utils.generateColorKey( r, g, b, a );\n\t\t\tif( findKeys[ colorKey ] ) {\n\t\t\t\tdata[ i ] = findKeys[ colorKey ].r;\n\t\t\t\tdata[ i + 1 ] = findKeys[ colorKey ].g;\n\t\t\t\tdata[ i + 2 ] = findKeys[ colorKey ].b;\n\t\t\t\tdata[ i + 3 ] = findKeys[ colorKey ].a;\n\t\t\t}\n\t\t}\n\t}\n\n\trenderer.setImageDirty( screenData );\n}\n\n// replaceColors command - replaces colors on the canvas and in the palette\nscreenManager.addCommand( \"replacePalColors\", replacePalColors, [ \"findColors\", \"newColors\" ] );\nfunction replacePalColors( screenData, options ) {\n\n\tlet findColors = options.findColors;\n\tconst newColors = options.newColors;\n\n\t// Validate findColors\n\tif( !Array.isArray( findColors ) || !Array.isArray( newColors ) ) {\n\t\tconst error = new TypeError(\n\t\t\t\"replacePalColors: Parameter findColors is must be an array.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Make sure there are enough newColors to replace the findColors\n\tif( findColors.length > newColors.length ) {\n\n\t\t// Remove the findColors that don't have a replacement value\n\t\tlet newArray = [];\n\t\tfor( let i = 0; i < newColors.length; i += 1 ) {\n\t\t\tnewArray.push( findColors[ i ] );\n\t\t}\n\t\tfindColors = newArray;\n\t}\n\n\t// Build the findKeys map\n\tlet findKeys = {};\n\tfor( let i = 0; i < findColors.length; i += 1 ) {\n\t\t\n\t\t// Make sure the findColor is a valid color or pal index value\n\t\tlet findColorValue = null;\n\t\tif( Number.isInteger( findColors[ i ] ) && findColors[ i ] < screenData.pal.length ) {\n\t\t\tfindColorValue = screenData.pal[ findColors[ i ] ];\n\t\t}\n\t\tif( findColorValue === null ) {\n\t\t\tfindColorValue = utils.convertToColor( findColors[ i ] );\n\n\t\t\t// If index can't be found skip and continue silently\n\t\t\tif( findColorIndexByColorValue( screenData, findColorValue ) === null ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Make sure the newColor is a valid color\n\t\tlet newColorValue = null;\n\t\tif( Number.isInteger( newColors[ i ] ) && newColors[ i ] < screenData.pal.length ) {\n\t\t\tnewColorValue = screenData.pal[ newColors[ i ] ];\n\t\t}\n\t\tif( newColorValue === null ) {\n\t\t\tnewColorValue = utils.convertToColor( newColors[ i ] );\n\t\t}\n\t\tif( newColorValue === null ) {\n\t\t\tconsole.warn(\n\t\t\t\t`replacePalColors: Invalid color value inside array newColors at index: ${i}.`\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\t\tfindKeys[ findColorValue.key ] = newColorValue;\n\t}\n\n\tif( Object.keys( findKeys ).length === 0 ) {\n\n\t\t// Return silently no need to warn or throw an error this could be what the user expected\n\t\treturn;\n\t}\n\n\trenderer.getImageData( screenData );\n\tconst data = screenData.imageData2;\n\n\t// Replace all the colors in the screen\n\tfor( let y = 0; y < screenData.height; y++ ) {\n\t\tfor( let x = 0; x < screenData.width; x++ ) {\n\t\t\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\t\t\tconst r = data[ i ];\n\t\t\tconst g = data[ i + 1 ];\n\t\t\tconst b = data[ i + 2 ];\n\t\t\tconst a = data[ i + 3 ];\n\t\t\tconst colorKey = utils.generateColorKey( r, g, b, a );\n\t\t\tif( findKeys[ colorKey ] ) {\n\t\t\t\tdata[ i ] = findKeys[ colorKey ].r;\n\t\t\t\tdata[ i + 1 ] = findKeys[ colorKey ].g;\n\t\t\t\tdata[ i + 2 ] = findKeys[ colorKey ].b;\n\t\t\t\tdata[ i + 3 ] = findKeys[ colorKey ].a;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Replace the colors in the palette\n\tfor( let i = 0; i < screenData.pal.length; i += 1 ) {\n\t\tconst colorKey = screenData.pal[ i ].key;\n\t\tif( findKeys[ colorKey ] ) {\n\t\t\tscreenData.pal[ i ] = findKeys[ colorKey ];\n\t\t}\n\t}\n\n\t// Rebuild the palette map\n\tscreenData.palMap = new Map();\n\tfor( let i = 0; i < screenData.pal.length; i += 1 ) {\n\t\tscreenData.palMap.set( screenData.pal[ i ].key, i );\n\t}\n\n\trenderer.setImageDirty( screenData );\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\nfunction getColorValueByRawInput( screenData, rawInput ) {\n\tlet colorValue;\n\n\t// If it is an integer than get from pal array\n\tif( Number.isInteger( rawInput ) ) {\n\t\tif( rawInput >= screenData.pal.length ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn screenData.pal[ rawInput ];\n\t}\n\t\n\t// Convert to a color value\n\tcolorValue = utils.convertToColor( rawInput );\n\n\treturn colorValue;\n}\n\n\n// Finds a color index without adding it to palette\nfunction findColorIndexByColorValue( screenData, color, tolerance = 1 ) {\n\n\t// First check by key - fastest lookup\n\tif( screenData.palMap.has( color.key ) ) {\n\t\treturn screenData.palMap.get( color.key );\n\t}\n\n\t// Max color difference constant\n\tconst maxDifference = ( 255 * 255 ) * 3.25;\n\ttolerance = tolerance * ( 2 - tolerance ) * maxDifference;\n\n\t// Find exact match or closest color in palette\n\tfor( let i = 0; i < screenData.pal.length; i++ ) {\n\t\tif( screenData.pal[ i ].key === color.key ) {\n\t\t\treturn i;\n\t\t} else {\n\t\t\tlet difference;\n\n\t\t\t//Special case for color 0 we care more about alpha values for 0 - transparent color\n\t\t\tif( i === 0 ) {\n\t\t\t\tdifference = utils.calcColorDifference(\n\t\t\t\t\tscreenData.pal[ i ], color, [ 0.2, 0.2, 0.2, 0.4 ]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tdifference = utils.calcColorDifference( screenData.pal[ i ], color );\n\t\t\t}\n\n\t\t\t// Compare the similarity with the tolerance level\n\t\t\tconst similarity = maxDifference - difference;\n\t\t\tif( similarity >= tolerance ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\n", "/**\r\n * Pi.js - Keyboard Module\r\n * \r\n * Basic keyboard handler for screens\r\n * \r\n * @module modules/keyboard\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport * as commands from \"../core/commands\";\r\nimport * as screenManager from \"../core/screen-manager\";\r\nimport * as utils from \"../core/utils\";\r\n\r\n// Input tags that we don't want to capture\r\nconst INPUT_TAGS = new Set( [ \"INPUT\", \"TEXTAREA\", \"SELECT\", \"BUTTON\" ] );\r\nconst CURSOR_BLINK = 500;\r\n\r\n// Key information containers\r\nconst m_inCodes = {};\r\nconst m_inKeys = {};\r\nconst m_actionKeys = new Set();\r\nconst m_onKeyHandlers = {};\r\n\r\n// Status variables\r\nlet m_inputData = null;\r\nlet m_isKeyboardActive = false;\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Initialize keyboard module\r\nexport function init() {\r\n\tstartKeyboard();\r\n\twindow.addEventListener( \"blur\", clearInKeys );\r\n}\r\n\r\n/**\r\n * Clear all keyboard event handlers\r\n * Called by clearEvents command\r\n */\r\nexport function clearKeyboardEvents() {\r\n\tfor( const mode in m_onKeyHandlers ) {\r\n\t\tdelete m_onKeyHandlers[ mode ];\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * External API Commands\r\n **************************************************************************************************/\r\n\r\n\r\ncommands.addCommand( \"startKeyboard\", startKeyboard, [] );\r\nfunction startKeyboard() {\r\n\tif( m_isKeyboardActive ) {\r\n\t\treturn;\r\n\t}\r\n\twindow.addEventListener( \"keydown\", onKeyDown, { \"capture\": true } );\r\n\twindow.addEventListener( \"keyup\", onKeyUp, { \"capture\": true } );\r\n\tm_isKeyboardActive = true;\r\n\tif( document.activeElement ) {\r\n\t\tdocument.activeElement.blur();\r\n\t}\r\n}\r\n\r\ncommands.addCommand( \"stopKeyboard\", stopKeyboard, [] );\r\nfunction stopKeyboard() {\r\n\tif( !m_isKeyboardActive ) {\r\n\t\treturn;\r\n\t}\r\n\twindow.removeEventListener( \"keydown\", onKeyDown, { \"capture\": true } );\r\n\twindow.removeEventListener( \"keyup\", onKeyUp, { \"capture\": true } );\r\n\tm_isKeyboardActive = false;\r\n\r\n\t// Clear keys to prevent any after effects\r\n\tclearInKeys();\r\n}\r\n\r\ncommands.addCommand( \"inkey\", inkey, [ \"key\" ] );\r\nfunction inkey( options ) {\r\n\tconst key = options.key;\r\n\r\n\tif( key ) {\r\n\r\n\t\tif( typeof key !== \"string\" ) {\r\n\t\t\tconst error = new TypeError( \"inkey: key must be a string.\" );\r\n\t\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\t// Get key by code property\r\n\t\tif( m_inCodes[ key ] ) {\r\n\t\t\treturn m_inCodes[ key ];\r\n\t\t}\r\n\r\n\t\t// Get key by key property\r\n\t\tif( m_inKeys[ key ] ) {\r\n\t\t\treturn m_inKeys[ key ];\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// If inkey is blank return all key codes\r\n\tconst keyCodes = [];\r\n\tfor( const code in m_inCodes ) {\r\n\t\tif( m_inCodes[ code ] ) {\r\n\t\t\tkeyCodes.push( m_inCodes[ code ] );\r\n\t\t}\r\n\t}\r\n\r\n\treturn keyCodes;\r\n}\r\n\r\ncommands.addCommand( \"setActionKeys\", setActionKeys, [ \"keys\" ] );\r\nfunction setActionKeys( options ) {\r\n\tconst keys = options.keys;\r\n\r\n\tif( !Array.isArray( keys ) ) {\r\n\t\tconst error = new TypeError( \"setActionKeys: keys must be an array.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\tfor( const key of keys ) {\r\n\t\tm_actionKeys.add( key );\r\n\t}\r\n}\r\n\r\ncommands.addCommand( \"removeActionKeys\", removeActionKeys, [ \"keys\" ] );\r\nfunction removeActionKeys( options ) {\r\n\tconst keys = options.keys;\r\n\r\n\tif( !Array.isArray( keys ) ) {\r\n\t\tconst error = new TypeError( \"removeActionKeys: keys must be an array.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\tfor( const key of keys ) {\r\n\t\tm_actionKeys.delete( key );\r\n\t}\r\n}\r\n\r\ncommands.addCommand( \"onkey\", onkey, [ \"key\", \"mode\", \"fn\", \"once\", \"allowRepeat\" ] );\r\nfunction onkey( options ) {\r\n\tconst key = options.key;\r\n\tconst mode = options.mode;\r\n\tconst fn = options.fn;\r\n\tconst once = !!options.once;\r\n\tconst allowRepeat = !!options.allowRepeat;\r\n\t\r\n\tif( !key || ( typeof key !== \"string\" && !Array.isArray( key ) ) ) {\r\n\t\tconst error = new TypeError( \"onkey: key must be a string or an array of strings.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( !mode || ( typeof mode !== \"string\" ) ) {\r\n\t\tconst error = new TypeError( \"onkey: mode must be a string with value of up or down.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( typeof fn !== \"function\" ) {\r\n\t\tconst error = new TypeError( \"onkey: fn must be a function.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Normalize key into an array for easier processing\r\n\tconst combo = typeof key === \"string\" ? [ key ] : key;\r\n\r\n\tconst handler = {\r\n\t\t\"comboKey\": combo.sort().join( \"\" ),\r\n\t\t\"combo\": combo,\r\n\t\t\"mode\": mode,\r\n\t\t\"fn\": fn,\r\n\t\t\"once\": once,\r\n\t\t\"allowRepeat\": allowRepeat,\r\n\t\t\"isRemoved\": false\r\n\t};\r\n\t\r\n\t// Add a on key handler for each of the key codes - in combo all must be pressed\r\n\tfor( const key of combo ) {\r\n\t\tif( !m_onKeyHandlers[ key ] ) {\r\n\t\t\tm_onKeyHandlers[ key ] = [];\r\n\t\t}\r\n\t\tm_onKeyHandlers[ key ].push( handler );\r\n\t}\r\n}\r\n\r\ncommands.addCommand( \"offkey\", offkey, [ \"key\", \"mode\", \"fn\", \"once\", \"allowRepeat\" ] );\r\nfunction offkey( options ) {\r\n\tconst key = options.key;\r\n\tconst mode = options.mode;\r\n\tconst fn = options.fn;\r\n\tconst once = !!options.once;\r\n\tconst allowRepeat = !!options.allowRepeat;\r\n\r\n\tif( !key || ( typeof key !== \"string\" && !Array.isArray( key ) ) ) {\r\n\t\tconst error = new TypeError( \"offkey: key must be a string or an array of strings.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( typeof fn !== \"function\" ) {\r\n\t\tconst error = new TypeError( \"offkey: callback must be a function.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Normalize key into an array for easier processing\r\n\tconst combo = typeof key === \"string\" ? [ key ] : key;\r\n\tconst comboKey = combo.sort().join( \"\" );\r\n\r\n\t// Find the handlers and remove them\r\n\tfor( const key of combo ) {\r\n\t\tconst handlers = m_onKeyHandlers[ key ];\r\n\t\tif( !handlers ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tconst toRemove = [];\r\n\t\tfor( let i = 0; i < handlers.length; i += 1 ) {\r\n\t\t\tconst handler = handlers[ i ];\r\n\t\t\tif(\r\n\t\t\t\thandler.comboKey === comboKey &&\r\n\t\t\t\thandler.mode === mode &&\r\n\t\t\t\thandler.fn === fn &&\r\n\t\t\t\thandler.once === once &&\r\n\t\t\t\thandler.allowRepeat === allowRepeat\r\n\t\t\t) {\r\n\t\t\t\ttoRemove.push( i );\r\n\t\t\t\thandler.isRemoved = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor( let i = toRemove.length - 1; i >= 0; i -= 1 ) {\r\n\t\t\thandlers.splice( toRemove[ i ], 1 );\r\n\t\t}\r\n\t\tif( handlers.length === 0 ) {\r\n\t\t\tdelete m_onKeyHandlers[ key ];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// TODO: A couple of bugs notice with input at 640x480. First sometimes I see rogue cursor after\r\n// hitting the backspace. Then If I type in the letter A as the first character I noticed the left\r\n// side looks like it's getting sliced a little bit. This may be due to the drawing of the cursor\r\n// and clearing space for the flashing display.\r\n// FIX: Grabbing the background and drawing the background is a bit messy. I think a better solution\r\n// would be to draw the input on a separate canvas that is overlaying the current screen canvas.\r\n// But I don't know. I am refactoring to WebGL so I will address this as part of the refactor.\r\nscreenManager.addCommand(\r\n\t\"input\", input, [ \"prompt\", \"fn\", \"cursor\", \"isNumber\", \"isInteger\", \"allowNegative\" ]\r\n);\r\nfunction input( screenData, options ) {\r\n\tconst prompt = options.prompt;\r\n\tconst fn = options.fn;\r\n\tconst cursor = options.cursor ? options.cursor : String.fromCharCode( 219 );\r\n\tconst isNumber = !!options.isNumber;\r\n\tconst isInteger = !!options.isInteger;\r\n\tconst allowNegative = !!options.allowNegative;\r\n\r\n\tif( typeof prompt !== \"string\" ) {\r\n\t\tconst error = new TypeError( \"input: prompt must be a string\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( fn && typeof fn !== \"function\" ) {\r\n\t\tconst error = new TypeError( \"input: fn must be a function.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( typeof cursor !== \"string\" ) {\r\n\t\tconst error = new TypeError( \"input: cursor must be a string\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Create promise for async/await support\r\n\tlet resolvePromise, rejectPromise;\r\n\tconst promise = new Promise( ( resolve, reject ) => {\r\n\t\tresolvePromise = resolve;\r\n\t\trejectPromise = reject;\r\n\t} );\r\n\r\n\tif( m_inputData ) {\r\n\t\tfinishInput( true );\r\n\t}\r\n\r\n\tm_inputData = {\r\n\t\t\"screenData\": screenData,\r\n\t\t\"prompt\": prompt,\r\n\t\t\"cursor\": cursor,\r\n\t\t\"lastCursorBlink\": Date.now(),\r\n\t\t\"showCursor\": true,\r\n\t\t\"isNumber\": isNumber,\r\n\t\t\"isInteger\": isInteger,\r\n\t\t\"allowNegative\": allowNegative,\r\n\t\t\"val\": \"\",\r\n\t\t\"fn\": fn,\r\n\t\t\"resolve\": resolvePromise,\r\n\t\t\"reject\": rejectPromise\r\n\t};\r\n\r\n\tstartInput();\r\n\r\n\treturn promise;\r\n}\r\n\r\nscreenManager.addCommand( \"cancelInput\", cancelInput, [] );\r\nfunction cancelInput( screenData ) {\r\n\tif( m_inputData ) {\r\n\t\tfinishInput( true );\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Internal Helper Functions\r\n **************************************************************************************************/\r\n\r\n\r\nfunction onKeyDown( event ) {\r\n\r\n\t// Ignore typing when focus is inside an editable\r\n\tif( isFromEditableTarget( event ) ) {\r\n\t\tclearInKeys();\r\n\t\treturn;\r\n\t}\r\n\tconst keyData = {\r\n\t\t\"code\": event.code,\r\n\t\t\"key\": event.key,\r\n\t\t\"location\": event.location,\r\n\t\t\"altKey\": event.altKey,\r\n\t\t\"ctrlKey\": event.ctrlKey,\r\n\t\t\"metaKey\": event.metaKey,\r\n\t\t\"shiftKey\": event.shiftKey,\r\n\t\t\"repeat\": event.repeat\r\n\t};\r\n\tm_inCodes[ event.code ] = keyData;\r\n\tm_inKeys[ event.key ] = keyData;\r\n\r\n\ttriggerKeyEventHandlers( event, \"down\", event.code );\r\n\ttriggerKeyEventHandlers( event, \"down\", event.key );\r\n\ttriggerKeyEventHandlers( event, \"down\", \"any\" );\r\n\tif( m_actionKeys.has( event.code ) || m_actionKeys.has( event.key ) ) {\r\n\t\tevent.preventDefault();\r\n\t}\r\n}\r\n\r\nfunction onKeyUp( event ) {\r\n\t\r\n\t// Ignore typing when focus is inside an editable\r\n\tif( isFromEditableTarget( event ) ) {\r\n\t\tclearInKeys();\r\n\t\treturn;\r\n\t}\r\n\ttriggerKeyEventHandlers( event, \"up\", event.code );\r\n\ttriggerKeyEventHandlers( event, \"up\", event.key );\r\n\ttriggerKeyEventHandlers( event, \"up\", \"any\" );\r\n\r\n\tdelete m_inCodes[ event.code ];\r\n\tdelete m_inKeys[ event.key ];\r\n\r\n\tif( m_actionKeys.has( event.code ) || m_actionKeys.has( event.key ) ) {\r\n\t\tevent.preventDefault();\r\n\t}\r\n}\r\n\r\nfunction triggerKeyEventHandlers( event, mode, keyOrCode ) {\r\n\r\n\tconst handlers = m_onKeyHandlers[ keyOrCode ];\r\n\tif( !handlers ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst isAnyKey = keyOrCode === \"any\";\r\n\tconst handlersCopy = handlers.slice();\r\n\tconst toRemove = new Set();\r\n\r\n\tfor( let i = 0; i < handlersCopy.length; i += 1 ) {\r\n\t\tconst handler = handlersCopy[ i ];\r\n\r\n\t\tif( handler.mode !== mode ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tif( event.repeat && !handler.allowRepeat ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// Need to check if handler has been removed in case a previous handler includes an offkey\r\n\t\tif( handler.isRemoved ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// For \"any\" key handlers, pass the current key data\r\n\t\tif( isAnyKey ) {\r\n\t\t\tlet keyData = m_inCodes[ event.code ];\r\n\t\t\tif( !keyData ) {\r\n\t\t\t\tkeyData = m_inKeys[ event.key ];\r\n\t\t\t}\r\n\r\n\t\t\t// In case stopKeyboard gets called in another key event handler keyData will be blank\r\n\t\t\tif( keyData !== undefined ) {\r\n\t\t\t\thandler.fn( keyData );\r\n\t\t\t}\r\n\r\n\t\t\tif( handler.once ) {\r\n\t\t\t\ttoRemove.add( handler );\r\n\t\t\t\thandler.isRemoved = true;\r\n\t\t\t}\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// For specific key handlers, check combo and pass combo data\r\n\t\tconst isAllKeysPressed = handler.combo.every( key => m_inKeys[ key ] || m_inCodes[ key ] );\r\n\r\n\t\tif( isAllKeysPressed ) {\r\n\t\t\tconst comboData = handler.combo.map( key => {\r\n\t\t\t\tif( m_inKeys[ key ] ) {\r\n\t\t\t\t\treturn m_inKeys[ key ];\r\n\t\t\t\t}\r\n\t\t\t\treturn m_inCodes[ key ];\r\n\t\t\t} );\r\n\r\n\t\t\tif( comboData.length === 1 ) {\r\n\t\t\t\thandler.fn( comboData[ 0 ] );\r\n\t\t\t} else {\r\n\t\t\t\thandler.fn( comboData );\r\n\t\t\t}\r\n\r\n\t\t\tif( handler.once ) {\r\n\t\t\t\ttoRemove.add( handler );\r\n\t\t\t\thandler.isRemoved = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove the handlers that are one time only calls\r\n\tif( toRemove.size > 0 ) {\r\n\t\tm_onKeyHandlers[ keyOrCode ] = handlers.filter( h => !toRemove.has( h ) );\r\n\t\t\r\n\t\t// Delete the array if empty\r\n\t\tif( m_onKeyHandlers[ keyOrCode ].length === 0 ) {\r\n\t\t\tdelete m_onKeyHandlers[ keyOrCode ];\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction isFromEditableTarget ( event ) {\r\n\tconst element = event.target;\r\n\tif( !element ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Standard form controls\r\n\tif( INPUT_TAGS.has( element.tagName ) ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Contenteditable\r\n\tif( element.isContentEditable ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Inputs inside shadow roots\r\n\tconst role = element.getAttribute && element.getAttribute( \"role\" );\r\n\tif( role === \"textbox\" || role === \"searchbox\" ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\nfunction clearInKeys() {\r\n\r\n\t// Clear all key states\r\n\tfor( const code in m_inCodes ) {\r\n\t\tdelete m_inCodes[ code ];\r\n\t}\r\n\tfor( const key in m_inKeys ) {\r\n\t\tdelete m_inKeys[ key ];\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Input Commands\r\n **************************************************************************************************/\r\n\r\n\r\nfunction startInput() {\r\n\r\n\tconst screenData = m_inputData.screenData;\r\n\r\n\t// Create a background canvas\r\n\tconst backCanvas = document.createElement( \"canvas\" );\r\n\tbackCanvas.width = screenData.width;\r\n\tbackCanvas.height = screenData.height;\r\n\t\r\n\t// Get the context for the background canvas\r\n\tconst backContext = backCanvas.getContext( \"2d\" );\r\n\r\n\t// Copy the background image to the canvas\r\n\tscreenData.api.render();\r\n\tbackContext.drawImage( screenData.canvas, 0, 0 );\r\n\r\n\t// Save the background canvas to the input data\r\n\tm_inputData.backCanvas = backCanvas;\r\n\tm_inputData.backContext = backContext;\r\n\r\n\t// Add input event listerner\r\n\tcommands.getApi().onkey( \"any\", \"down\", onInputKeyDown );\r\n\r\n\t// Add interval for blinking cursor\r\n\tm_inputData.interval = setInterval( showPrompt, 100 );\r\n}\r\n\r\nfunction onInputKeyDown( keyData ) {\r\n\r\n\t// Handle Enter Key - Complete Input\r\n\tif( keyData.key === \"Enter\" ) {\r\n\t\tfinishInput();\r\n\t\treturn;\r\n\t\r\n\t// Handle Escape - Cancel Input\r\n\t} else if( keyData.key === \"Escape\" ) {\r\n\t\tfinishInput( true );\r\n\t\treturn;\r\n\t\r\n\t// Handle Backspace - Erase last character\r\n\t} else if( keyData.key === \"Backspace\" ) {\r\n\t\tif( m_inputData.val.length > 0 ) {\r\n\t\t\tm_inputData.val = m_inputData.val.substring( 0, m_inputData.val.length - 1 );\r\n\t\t}\r\n\t\r\n\t// Handle single length keys\r\n\t} else if( keyData.key && keyData.key.length === 1 ) {\r\n\r\n\t\tlet inputHandled = false;\r\n\r\n\t\t// Handle +/- numbers\r\n\t\tif( m_inputData.isNumber && m_inputData.allowNegative ) {\r\n\r\n\t\t\t// If user enters a \"-\" then insert \"-\" at the start\r\n\t\t\tif( keyData.key === \"-\" ) {\r\n\t\t\t\tif( m_inputData.val.charAt( 0 ) !== \"-\" ) {\r\n\t\t\t\t\tm_inputData.val = \"-\" + m_inputData.val;\r\n\t\t\t\t}\r\n\t\t\t\tinputHandled = true;\r\n\t\t\t\r\n\t\t\t// Any time the user enters a \"+\" key then replace the minus symbol\r\n\t\t\t} else if( keyData.key === \"+\" && m_inputData.val.charAt( 0 ) === \"-\" ) {\r\n\t\t\t\tm_inputData.val = m_inputData.val.substring( 1 );\r\n\t\t\t\tinputHandled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif( !inputHandled ) {\r\n\t\t\tm_inputData.val += keyData.key;\r\n\r\n\t\t\t// Make sure it's a valid number or valid integer\r\n\t\t\tif(\r\n\t\t\t\t( m_inputData.isNumber && isNaN( Number( m_inputData.val ) ) ) ||\r\n\t\t\t\t( m_inputData.isInteger && !Number.isInteger( Number( m_inputData.val ) ) )\r\n\t\t\t) {\r\n\t\t\t\tm_inputData.val = m_inputData.val.substring( 0, m_inputData.val.length - 1 );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction showPrompt( hideCursorOverride ) {\r\n\tconst screenData = m_inputData.screenData;\r\n\tlet msg = m_inputData.prompt + m_inputData.val;\r\n\r\n\t// Blink cursor after every blink duration\r\n\tif( !hideCursorOverride ) {\r\n\t\tconst now = Date.now();\r\n\t\tif( now - m_inputData.lastCursorBlink > CURSOR_BLINK ) {\r\n\t\t\tm_inputData.lastCursorBlink = now;\r\n\t\t\tm_inputData.showCursor = !m_inputData.showCursor;\r\n\t\t}\r\n\r\n\t\t// Show cursor if not hidden\r\n\t\tif( m_inputData.showCursor ) {\r\n\t\t\tmsg += m_inputData.cursor;\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if need to scroll first\r\n\tlet pos = screenData.api.getPos();\r\n\tif( pos.row >= screenData.api.getRows() ) {\r\n\t\tscreenData.api.print( \"\" );\r\n\t\tscreenData.api.setPos( pos.col, pos.row - 1 );\r\n\t\tpos = screenData.api.getPos( screenData );\r\n\t}\r\n\r\n\t// Get the background pixels\r\n\tconst posPx = screenData.api.getPosPx( screenData );\r\n\tconst width = ( msg.length + 1 ) * screenData.font.width;\r\n\tconst height = screenData.font.height;\r\n\r\n\t// Restore the background image over the prompt\r\n\tscreenData.context.clearRect( posPx.x, posPx.y, width, height );\r\n\tscreenData.context.drawImage(\r\n\t\tm_inputData.backCanvas,\r\n\t\tposPx.x, posPx.y, width, height,\r\n\t\tposPx.x, posPx.y, width, height\r\n\t);\r\n\tscreenData.imageData = null;\r\n\t\r\n\t// Print the prompt + input + cursor\r\n\tscreenData.api.print( msg, true );\r\n\r\n\t// Restore the cursor\r\n\tscreenData.api.setPos( pos.col, pos.row );\r\n}\r\n\r\nfunction finishInput( isCancel ) {\r\n\tconst screenData = m_inputData.screenData;\r\n\r\n\t// Remove input key handler\r\n\tcommands.getApi().offkey( \"any\", \"down\", onInputKeyDown );\r\n\r\n\t// Show prompt on complete, without the cursor\r\n\tshowPrompt( true );\r\n\r\n\t// Move cursor down one line\r\n\tscreenData.printCursor.y += screenData.font.height;\r\n\r\n\t// Clear the interval\r\n\tclearInterval( m_inputData.interval );\r\n\r\n\t// Process Input Value\r\n\tlet val = m_inputData.val;\r\n\tif( m_inputData.isNumber ) {\r\n\t\tif( val === \"\" || val === \"-\" ) {\r\n\t\t\tval = 0;\r\n\t\t} else {\r\n\t\t\tval = Number( val );\r\n\t\t\tif( m_inputData.isInteger ) {\r\n\t\t\t\tval = Math.floor( val );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Clear out the inputData\r\n\tconst tempInputData = m_inputData;\r\n\tm_inputData = null;\r\n\r\n\t// Handle cancel input\r\n\tif( isCancel ) {\r\n\t\ttempInputData.reject( val );\r\n\t\r\n\t// Handle successful input\r\n\t} else {\r\n\t\ttempInputData.resolve( val );\r\n\r\n\t\t// Callback function\r\n\t\tif( tempInputData.fn ) {\r\n\t\t\ttempInputData.fn( val );\r\n\t\t}\r\n\t}\r\n}\r\n", "/**\n * Pi.js - Mouse Module\n * \n * Mouse input handling for screens including events and position tracking.\n * \n * @module modules/mouse\n */\n\n\"use strict\";\n\nimport * as screenManager from \"../core/screen-manager\";\nimport * as events from \"../core/events\";\nimport * as utils from \"../core/utils\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init() {\n\n\t// Add screen data items\n\tscreenManager.addScreenDataItem( \"mouseStarted\", false );\n\tscreenManager.addScreenDataItem( \"mouse\", null );\n\tscreenManager.addScreenDataItem( \"lastEvent\", null );\n\tscreenManager.addScreenDataItem( \"isContextMenuEnabled\", false );\n\n\t// Event listener tracking\n\tscreenManager.addScreenDataItem( \"mouseEventListenersActive\", 0 );\n\tscreenManager.addScreenDataItem( \"onMouseEventListeners\", {\n\t\t\"down\": [],\n\t\t\"up\": [],\n\t\t\"move\": []\n\t} );\n\n\t// Add screen initialization\n\tscreenManager.addScreenInitFunction( initMouseData );\n\n\t// Add window blur handler\n\twindow.addEventListener( \"blur\", onWindowBlur );\n}\n\n/**\n * Clear all mouse event handlers for a screen\n * Called by clearEvents command\n * \n * @param {Object} screenData - Screen data object\n */\nexport function clearMouseEvents( screenData ) {\n\tscreenData.onMouseEventListeners = {\n\t\t\"down\": [],\n\t\t\"up\": [],\n\t\t\"move\": []\n\t};\n\tscreenData.mouseEventListenersActive = 0;\n}\n\nfunction initMouseData( screenData ) {\n\n\t// Initialize mouse position to center of screen\n\tscreenData.mouse = {\n\t\t\"x\": Math.floor( screenData.width / 2 ),\n\t\t\"y\": Math.floor( screenData.height / 2 ),\n\t\t\"lastX\": Math.floor( screenData.width / 2 ),\n\t\t\"lastY\": Math.floor( screenData.height / 2 ),\n\t\t\"buttons\": 0,\n\t\t\"action\": \"none\"\n\t};\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\nscreenManager.addCommand( \"startMouse\", startMouse, [] );\nfunction startMouse( screenData ) {\n\tif( !screenData.mouseStarted ) {\n\t\tscreenData.canvas.addEventListener( \"mousemove\", mouseMove );\n\t\tscreenData.canvas.addEventListener( \"mousedown\", mouseDown );\n\t\tscreenData.canvas.addEventListener( \"mouseup\", mouseUp );\n\t\tscreenData.canvas.addEventListener( \"contextmenu\", onContextMenu );\n\t\tscreenData.mouseStarted = true;\n\t}\n}\n\nscreenManager.addCommand( \"stopMouse\", stopMouse, [] );\nfunction stopMouse( screenData ) {\n\tif( screenData.mouseStarted ) {\n\t\tscreenData.canvas.removeEventListener( \"mousemove\", mouseMove );\n\t\tscreenData.canvas.removeEventListener( \"mousedown\", mouseDown );\n\t\tscreenData.canvas.removeEventListener( \"mouseup\", mouseUp );\n\t\tscreenData.canvas.removeEventListener( \"contextmenu\", onContextMenu );\n\t\tscreenData.mouseStarted = false;\n\t}\n}\n\nscreenManager.addCommand( \"getMouse\", getMouse, [] );\nfunction getMouse( screenData ) {\n\tconst mouse = {};\n\tmouse.x = screenData.mouse.x;\n\tmouse.y = screenData.mouse.y;\n\tmouse.lastX = screenData.mouse.lastX;\n\tmouse.lastY = screenData.mouse.lastY;\n\tmouse.buttons = screenData.mouse.buttons;\n\tmouse.action = screenData.mouse.action;\n\tmouse.type = \"mouse\";\n\n\treturn mouse;\n}\n\nscreenManager.addCommand( \"inmouse\", inmouse, [] );\nfunction inmouse( screenData ) {\n\n\t// Activate the mouse event listeners\n\tstartMouse( screenData );\n\n\treturn getMouse( screenData );\n}\n\nscreenManager.addCommand( \"setEnableContextMenu\", setEnableContextMenu, [ \"isEnabled\" ] );\nfunction setEnableContextMenu( screenData, options ) {\n\tscreenData.isContextMenuEnabled = !!( options.isEnabled );\n\n\t// Activate the mouse event listeners\n\tstartMouse( screenData );\n}\n\nscreenManager.addCommand( \"onmouse\", onmouse, [ \"mode\", \"fn\", \"once\", \"hitBox\", \"customData\" ] );\nfunction onmouse( screenData, options ) {\n\tconst mode = options.mode;\n\tconst fn = options.fn;\n\tconst once = options.once;\n\tconst hitBox = options.hitBox;\n\tconst customData = options.customData;\n\n\tconst isValid = events.onevent(\n\t\tmode, fn, once, hitBox, [ \"down\", \"up\", \"move\" ], \"onmouse\",\n\t\tscreenData.onMouseEventListeners, null, null, customData\n\t);\n\n\t// Activate the mouse event listeners\n\tif( isValid ) {\n\t\tstartMouse( screenData );\n\t\tscreenData.mouseEventListenersActive += 1;\n\t}\n}\n\nscreenManager.addCommand( \"offmouse\", offmouse, [ \"mode\", \"fn\" ] );\nfunction offmouse( screenData, options ) {\n\tconst mode = options.mode;\n\tconst fn = options.fn;\n\n\tconst isValid = events.offevent(\n\t\tmode, fn, [ \"down\", \"up\", \"move\" ], \"offmouse\",\n\t\tscreenData.onMouseEventListeners\n\t);\n\n\tif( isValid ) {\n\t\tif( fn == null ) {\n\t\t\tscreenData.mouseEventListenersActive = 0;\n\t\t} else {\n\t\t\tscreenData.mouseEventListenersActive -= 1;\n\t\t\tif( screenData.mouseEventListenersActive < 0 ) {\n\t\t\t\tscreenData.mouseEventListenersActive = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\nfunction mouseMove( e ) {\n\tconst screenData = getScreenDataFromEvent( e );\n\tif( !screenData ) {\n\t\treturn;\n\t}\n\n\tupdateMouse( screenData, e, \"move\" );\n\n\tconst mouseData = getMouse( screenData );\n\n\tif( screenData.mouseEventListenersActive > 0 ) {\n\t\tevents.triggerEventListeners( \"move\", mouseData, screenData.onMouseEventListeners );\n\t}\n\n\tif( screenData.triggerPressListeners ) {\n\t\tscreenData.triggerPressListeners( screenData, \"move\", mouseData );\n\t}\n}\n\nfunction mouseDown( e ) {\n\tconst screenData = getScreenDataFromEvent( e );\n\tif( !screenData ) {\n\t\treturn;\n\t}\n\n\tupdateMouse( screenData, e, \"down\" );\n\n\tconst mouseData = getMouse( screenData );\n\n\tif( screenData.mouseEventListenersActive > 0 ) {\n\t\tevents.triggerEventListeners( \"down\", mouseData, screenData.onMouseEventListeners );\n\t}\n\n\tif( screenData.triggerPressListeners ) {\n\t\tscreenData.triggerPressListeners( screenData, \"down\", mouseData );\n\t}\n\n\tif( screenData.triggerClickListeners ) {\n\t\tscreenData.triggerClickListeners( screenData, mouseData, \"down\" );\n\t}\n}\n\nfunction mouseUp( e ) {\n\tconst screenData = getScreenDataFromEvent( e );\n\tif( !screenData ) {\n\t\treturn;\n\t}\n\n\tupdateMouse( screenData, e, \"up\" );\n\n\tconst mouseData = getMouse( screenData );\n\n\tif( screenData.mouseEventListenersActive > 0 ) {\n\t\tevents.triggerEventListeners( \"up\", mouseData, screenData.onMouseEventListeners );\n\t}\n\n\tif( screenData.triggerPressListeners ) {\n\t\tscreenData.triggerPressListeners( screenData, \"up\", mouseData );\n\t}\n\n\tif( screenData.triggerClickListeners ) {\n\t\tscreenData.triggerClickListeners( screenData, mouseData, \"up\" );\n\t}\n}\n\nfunction onContextMenu( e ) {\n\tconst screenData = getScreenDataFromEvent( e );\n\tif( !screenData ) {\n\t\treturn;\n\t}\n\n\tif( !screenData.isContextMenuEnabled ) {\n\t\te.preventDefault();\n\t\treturn false;\n\t}\n}\n\nfunction updateMouse( screenData, e, action ) {\n\tconst rect = screenData.clientRect;\n\tconst x = Math.floor(\n\t\te.offsetX / rect.width * screenData.width\n\t);\n\tconst y = Math.floor(\n\t\te.offsetY / rect.height * screenData.height\n\t);\n\n\tlet lastX = x;\n\tlet lastY = y;\n\n\tif( screenData.mouse ) {\n\t\tif( screenData.mouse.x !== undefined ) {\n\t\t\tlastX = screenData.mouse.x;\n\t\t}\n\t\tif( screenData.mouse.y !== undefined ) {\n\t\t\tlastY = screenData.mouse.y;\n\t\t}\n\t}\n\n\tscreenData.mouse = {\n\t\t\"x\": x,\n\t\t\"y\": y,\n\t\t\"lastX\": lastX,\n\t\t\"lastY\": lastY,\n\t\t\"buttons\": e.buttons,\n\t\t\"action\": action\n\t};\n\tscreenData.lastEvent = \"mouse\";\n}\n\nfunction getScreenDataFromEvent( e ) {\n\tconst screenId = e.target.dataset?.screenId;\n\tif( screenId === undefined ) {\n\t\treturn null;\n\t}\n\n\t// Get screen from screenManager\n\tconst activeScreen = screenManager.getActiveScreen();\n\tif( activeScreen && activeScreen.id === parseInt( screenId ) ) {\n\t\treturn activeScreen;\n\t}\n\n\treturn null;\n}\n\nfunction onWindowBlur() {\n\n\t// Reset mouse button state when window loses focus\n\tconst activeScreen = screenManager.getActiveScreen();\n\tif( activeScreen && activeScreen.mouse ) {\n\t\tactiveScreen.mouse.buttons = 0;\n\t\tactiveScreen.mouse.action = \"up\";\n\t}\n}\n\n", "/**\n * Pi.js - Touch Module\n * \n * Touch input handling for screens including multi-touch support.\n * \n * @module modules/touch\n */\n\n\"use strict\";\n\nimport * as screenManager from \"../core/screen-manager\";\nimport * as commands from \"../core/commands\";\nimport * as events from \"../core/events\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nlet m_isTouchScreen = false;\n\nexport function init() {\n\n\t// Add screen data items\n\tscreenManager.addScreenDataItem( \"touchStarted\", false );\n\tscreenManager.addScreenDataItem( \"touches\", {} );\n\tscreenManager.addScreenDataItem( \"lastTouches\", {} );\n\n\t// Event listener tracking\n\tscreenManager.addScreenDataItem( \"touchEventListenersActive\", 0 );\n\tscreenManager.addScreenDataItem( \"onTouchEventListeners\", {} );\n\n\t// Add screen initialization\n\tscreenManager.addScreenInitFunction( initTouchData );\n\n\t// Add window blur handler\n\twindow.addEventListener( \"blur\", onWindowBlur );\n}\n\n/**\n * Clear all touch event handlers for a screen\n * Called by clearEvents command\n * \n * @param {Object} screenData - Screen data object\n */\nexport function clearTouchEvents( screenData ) {\n\tscreenData.onTouchEventListeners = {};\n\tscreenData.touchEventListenersActive = 0;\n}\n\nfunction initTouchData( screenData ) {\n\n\t// Initialize touch event listeners\n\tscreenData.onTouchEventListeners = {\n\t\t\"start\": [],\n\t\t\"end\": [],\n\t\t\"move\": []\n\t};\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\nscreenManager.addCommand( \"startTouch\", startTouch, [] );\nfunction startTouch( screenData ) {\n\tif( !screenData.touchStarted ) {\n\n\t\t// Mark as non-passive because we call preventDefault() to prevent mouse events\n\t\t// and scrolling behavior on the canvas\n\t\tconst options = { \"passive\": false };\n\n\t\tscreenData.canvas.addEventListener( \"touchstart\", touchStart, options );\n\t\tscreenData.canvas.addEventListener( \"touchmove\", touchMove, options );\n\t\tscreenData.canvas.addEventListener( \"touchend\", touchEnd, options );\n\t\tscreenData.canvas.addEventListener( \"touchcancel\", touchEnd, options );\n\t\tscreenData.touchStarted = true;\n\t}\n}\n\nscreenManager.addCommand( \"stopTouch\", stopTouch, [] );\nfunction stopTouch( screenData ) {\n\tif( screenData.touchStarted ) {\n\t\tscreenData.canvas.removeEventListener( \"touchstart\", touchStart );\n\t\tscreenData.canvas.removeEventListener( \"touchmove\", touchMove );\n\t\tscreenData.canvas.removeEventListener( \"touchend\", touchEnd );\n\t\tscreenData.canvas.removeEventListener( \"touchcancel\", touchEnd );\n\t\tscreenData.touchStarted = false;\n\t}\n}\n\nscreenManager.addCommand( \"intouch\", intouch, [] );\nfunction intouch( screenData ) {\n\tstartTouch( screenData );\n\treturn getTouch( screenData );\n}\n\nscreenManager.addCommand( \"ontouch\", ontouch, [ \"mode\", \"fn\", \"once\", \"hitBox\", \"customData\" ] );\nfunction ontouch( screenData, options ) {\n\tconst mode = options.mode;\n\tconst fn = options.fn;\n\tconst once = options.once;\n\tconst hitBox = options.hitBox;\n\tconst customData = options.customData;\n\n\tconst isValid = events.onevent(\n\t\tmode, fn, once, hitBox, [ \"start\", \"end\", \"move\" ], \"ontouch\",\n\t\tscreenData.onTouchEventListeners, null, null, customData\n\t);\n\n\tif( isValid ) {\n\t\tstartTouch( screenData );\n\t\tscreenData.touchEventListenersActive += 1;\n\t}\n}\n\nscreenManager.addCommand( \"offtouch\", offtouch, [ \"mode\", \"fn\" ] );\nfunction offtouch( screenData, options ) {\n\tconst mode = options.mode;\n\tconst fn = options.fn;\n\n\tconst isValid = events.offevent(\n\t\tmode, fn, [ \"start\", \"end\", \"move\" ], \"offtouch\",\n\t\tscreenData.onTouchEventListeners\n\t);\n\n\tif( isValid ) {\n\t\tif( fn == null ) {\n\t\t\tscreenData.touchEventListenersActive = 0;\n\t\t} else {\n\t\t\tscreenData.touchEventListenersActive -= 1;\n\t\t\tif( screenData.touchEventListenersActive < 0 ) {\n\t\t\t\tscreenData.touchEventListenersActive = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\ncommands.addCommand( \"setPinchZoom\", setPinchZoom, [ \"isEnabled\" ] );\nfunction setPinchZoom( options ) {\n\tconst isEnabled = !!( options.isEnabled );\n\n\tif( isEnabled ) {\n\t\tdocument.body.style.touchAction = \"\";\n\t} else {\n\t\tdocument.body.style.touchAction = \"none\";\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\nfunction touchStart( e ) {\n\tm_isTouchScreen = true;\n\n\tconst screenData = getScreenDataFromEvent( e );\n\tif( screenData == null ) {\n\t\treturn;\n\t}\n\n\tupdateTouch( screenData, e, \"start\" );\n\n\tconst touchData = getTouch( screenData );\n\n\tif( screenData.touchEventListenersActive > 0 ) {\n\t\tevents.triggerEventListeners( \"start\", touchData, screenData.onTouchEventListeners );\n\t}\n\n\tif( screenData.triggerPressListeners && screenData.getTouchPress ) {\n\t\tscreenData.triggerPressListeners( screenData, \"down\", screenData.getTouchPress( screenData ) );\n\n\t\t// Prevent mouse down event from firing\n\t\te.preventDefault();\n\t}\n\n\tif( screenData.triggerClickListeners && screenData.getTouchPress ) {\n\t\tscreenData.triggerClickListeners(\n\t\t\tscreenData, screenData.getTouchPress( screenData ), \"down\"\n\t\t);\n\t}\n}\n\nfunction touchMove( e ) {\n\tconst screenData = getScreenDataFromEvent( e );\n\tif( screenData == null ) {\n\t\treturn;\n\t}\n\n\tupdateTouch( screenData, e, \"move\" );\n\n\tconst touchData = getTouch( screenData );\n\n\tif( screenData.touchEventListenersActive > 0 ) {\n\t\tevents.triggerEventListeners( \"move\", touchData, screenData.onTouchEventListeners );\n\t}\n\n\tif( screenData.triggerPressListeners && screenData.getTouchPress ) {\n\t\tscreenData.triggerPressListeners( screenData, \"move\", screenData.getTouchPress( screenData ) );\n\t}\n}\n\nfunction touchEnd( e ) {\n\tconst screenData = getScreenDataFromEvent( e );\n\tif( screenData == null ) {\n\t\treturn;\n\t}\n\n\tupdateTouch( screenData, e, \"end\" );\n\n\tconst touchData = getTouch( screenData );\n\n\tif( screenData.touchEventListenersActive > 0 ) {\n\t\tevents.triggerEventListeners( \"end\", touchData, screenData.onTouchEventListeners );\n\t}\n\n\tif( screenData.triggerPressListeners && screenData.getTouchPress ) {\n\t\tscreenData.triggerPressListeners( screenData, \"up\", screenData.getTouchPress( screenData ) );\n\t}\n\n\tif( screenData.triggerClickListeners && screenData.getTouchPress ) {\n\t\tscreenData.triggerClickListeners(\n\t\t\tscreenData, screenData.getTouchPress( screenData ), \"up\"\n\t\t);\n\t}\n}\n\nfunction updateTouch( screenData, e, action ) {\n\tif( !screenData.clientRect ) {\n\t\treturn;\n\t}\n\n\tconst newTouches = {};\n\tconst rect = screenData.clientRect;\n\n\tfor( let j = 0; j < e.touches.length; j++ ) {\n\t\tconst touch = e.touches[ j ];\n\t\tconst touchData = {};\n\n\t\ttouchData.x = Math.floor(\n\t\t\t( touch.clientX - rect.left ) / rect.width * screenData.width\n\t\t);\n\t\ttouchData.y = Math.floor(\n\t\t\t( touch.clientY - rect.top ) / rect.height * screenData.height\n\t\t);\n\t\ttouchData.id = touch.identifier;\n\n\t\tif( screenData.touches[ touchData.id ] ) {\n\t\t\ttouchData.lastX = screenData.touches[ touchData.id ].x;\n\t\t\ttouchData.lastY = screenData.touches[ touchData.id ].y;\n\t\t} else {\n\t\t\ttouchData.lastX = null;\n\t\t\ttouchData.lastY = null;\n\t\t}\n\n\t\ttouchData.action = action;\n\t\tnewTouches[ touchData.id ] = touchData;\n\t}\n\n\tscreenData.lastTouches = screenData.touches;\n\tscreenData.touches = newTouches;\n\tscreenData.lastEvent = \"touch\";\n}\n\nfunction getTouch( screenData ) {\n\tconst touchArr = [];\n\n\t// Make a local copy of touch Object\n\tfor( const i in screenData.touches ) {\n\t\tconst touch = screenData.touches[ i ];\n\t\tconst touchData = {\n\t\t\t\"x\": touch.x,\n\t\t\t\"y\": touch.y,\n\t\t\t\"id\": touch.id,\n\t\t\t\"lastX\": touch.lastX,\n\t\t\t\"lastY\": touch.lastY,\n\t\t\t\"action\": touch.action,\n\t\t\t\"type\": \"touch\"\n\t\t};\n\t\ttouchArr.push( touchData );\n\t}\n\n\treturn touchArr;\n}\n\nfunction getScreenDataFromEvent( e ) {\n\tconst screenId = e.target.dataset?.screenId;\n\tif( screenId === undefined ) {\n\t\treturn null;\n\t}\n\n\t// Get screen from screenManager\n\tconst activeScreen = screenManager.getActiveScreen();\n\tif( activeScreen && activeScreen.id === parseInt( screenId ) ) {\n\t\treturn activeScreen;\n\t}\n\n\treturn null;\n}\n\nfunction onWindowBlur() {\n\n\t// Clear all touch states when window loses focus\n\tconst activeScreen = screenManager.getActiveScreen();\n\tif( activeScreen ) {\n\t\tactiveScreen.lastTouches = activeScreen.touches;\n\t\tactiveScreen.touches = {};\n\t}\n}\n\n", "/**\n * Pi.js - Press Module\n * \n * Unified press/click events that work with both mouse and touch.\n * \n * @module modules/press\n */\n\n\"use strict\";\n\nimport * as screenManager from \"../core/screen-manager\";\nimport * as events from \"../core/events\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init() {\n\n\t// Add screen data items for press events\n\tscreenManager.addScreenDataItem( \"pressEventListenersActive\", 0 );\n\tscreenManager.addScreenDataItem( \"onPressEventListeners\", {} );\n\n\t// Add screen data items for click events\n\tscreenManager.addScreenDataItem( \"clickEventListenersActive\", 0 );\n\tscreenManager.addScreenDataItem( \"onClickEventListeners\", {} );\n\n\t// Add screen initialization\n\tscreenManager.addScreenInitFunction( initPressData );\n}\n\n/**\n * Clear all press event handlers for a screen\n * Called by clearEvents command\n * \n * @param {Object} screenData - Screen data object\n */\nexport function clearPressEvents( screenData ) {\n\tscreenData.onPressEventListeners = {};\n\tscreenData.pressEventListenersActive = 0;\n}\n\n/**\n * Clear all click event handlers for a screen\n * Called by clearEvents command\n * \n * @param {Object} screenData - Screen data object\n */\nexport function clearClickEvents( screenData ) {\n\tscreenData.onClickEventListeners = {};\n\tscreenData.clickEventListenersActive = 0;\n}\n\nfunction initPressData( screenData ) {\n\n\t// Initialize press event listeners\n\tscreenData.onPressEventListeners = {\n\t\t\"down\": [],\n\t\t\"up\": [],\n\t\t\"move\": []\n\t};\n\n\t// Initialize click event listeners\n\tscreenData.onClickEventListeners = {\n\t\t\"click\": []\n\t};\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\nscreenManager.addCommand( \"inpress\", inpress, [] );\nfunction inpress( screenData ) {\n\n\t// Start both mouse and touch\n\tscreenData.api.startMouse();\n\tscreenData.api.startTouch();\n\n\t// Return the appropriate input based on last event\n\tif( screenData.lastEvent === \"touch\" ) {\n\t\treturn getTouchPress( screenData );\n\t} else {\n\t\treturn screenData.api.getMouse();\n\t}\n}\n\nscreenManager.addCommand( \"onpress\", onpress, [ \"mode\", \"fn\", \"once\", \"hitBox\", \"customData\" ] );\nfunction onpress( screenData, options ) {\n\tconst mode = options.mode;\n\tconst fn = options.fn;\n\tconst once = options.once;\n\tconst hitBox = options.hitBox;\n\tconst customData = options.customData;\n\n\tconst isValid = events.onevent(\n\t\tmode, fn, once, hitBox, [ \"down\", \"up\", \"move\" ], \"onpress\",\n\t\tscreenData.onPressEventListeners, null, null, customData\n\t);\n\n\t// Activate both mouse and touch event listeners\n\tif( isValid ) {\n\t\tscreenData.api.startMouse();\n\t\tscreenData.api.startTouch();\n\t\tscreenData.pressEventListenersActive += 1;\n\t}\n}\n\nscreenManager.addCommand( \"offpress\", offpress, [ \"mode\", \"fn\" ] );\nfunction offpress( screenData, options ) {\n\tconst mode = options.mode;\n\tconst fn = options.fn;\n\n\tconst isValid = events.offevent(\n\t\tmode, fn, [ \"down\", \"up\", \"move\" ], \"offpress\",\n\t\tscreenData.onPressEventListeners\n\t);\n\n\tif( isValid ) {\n\t\tif( fn == null ) {\n\t\t\tscreenData.pressEventListenersActive = 0;\n\t\t} else {\n\t\t\tscreenData.pressEventListenersActive -= 1;\n\t\t\tif( screenData.pressEventListenersActive < 0 ) {\n\t\t\t\tscreenData.pressEventListenersActive = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nscreenManager.addCommand( \"onclick\", onclick, [ \"fn\", \"once\", \"hitBox\", \"customData\" ] );\nfunction onclick( screenData, options ) {\n\tconst fn = options.fn;\n\tconst once = options.once;\n\tlet hitBox = options.hitBox;\n\tconst customData = options.customData;\n\n\t// Default hitbox to entire screen\n\tif( hitBox == null ) {\n\t\thitBox = {\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"width\": screenData.width,\n\t\t\t\"height\": screenData.height\n\t\t};\n\t}\n\n\tconst isValid = events.onevent(\n\t\t\"click\", fn, once, hitBox, [ \"click\" ], \"onclick\",\n\t\tscreenData.onClickEventListeners, null, null, customData\n\t);\n\n\t// Activate both mouse and touch event listeners\n\tif( isValid ) {\n\t\tscreenData.api.startMouse();\n\t\tscreenData.api.startTouch();\n\t\tscreenData.clickEventListenersActive += 1;\n\t}\n}\n\nscreenManager.addCommand( \"offclick\", offclick, [ \"fn\" ] );\nfunction offclick( screenData, options ) {\n\tconst fn = options.fn;\n\n\tconst isValid = events.offevent(\n\t\t\"click\", fn, [ \"click\" ], \"offclick\",\n\t\tscreenData.onClickEventListeners\n\t);\n\n\tif( isValid ) {\n\t\tif( fn == null ) {\n\t\t\tscreenData.clickEventListenersActive = 0;\n\t\t} else {\n\t\t\tscreenData.clickEventListenersActive -= 1;\n\t\t\tif( screenData.clickEventListenersActive < 0 ) {\n\t\t\t\tscreenData.clickEventListenersActive = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands - Exposed for mouse/touch modules to call\n **************************************************************************************************/\n\n\nscreenManager.addScreenInternalCommands( \"triggerPressListeners\", triggerPressListeners );\nfunction triggerPressListeners( screenData, mode, data ) {\n\tif( screenData.pressEventListenersActive > 0 ) {\n\t\tevents.triggerEventListeners( mode, data, screenData.onPressEventListeners );\n\t}\n}\n\nscreenManager.addScreenInternalCommands( \"triggerClickListeners\", triggerClickListeners );\nfunction triggerClickListeners( screenData, data, clickStatus ) {\n\tif( screenData.clickEventListenersActive > 0 ) {\n\t\tevents.triggerEventListeners( \"click\", data, screenData.onClickEventListeners, clickStatus );\n\t}\n}\n\nscreenManager.addScreenInternalCommands( \"getTouchPress\", getTouchPress );\nfunction getTouchPress( screenData ) {\n\n\tfunction copyTouches( touches, touchArr, action ) {\n\t\tfor( const i in touches ) {\n\t\t\tconst touch = touches[ i ];\n\t\t\tconst touchData = {\n\t\t\t\t\"x\": touch.x,\n\t\t\t\t\"y\": touch.y,\n\t\t\t\t\"id\": touch.id,\n\t\t\t\t\"lastX\": touch.lastX,\n\t\t\t\t\"lastY\": touch.lastY,\n\t\t\t\t\"action\": touch.action,\n\t\t\t\t\"type\": \"touch\"\n\t\t\t};\n\t\t\tif( action !== undefined ) {\n\t\t\t\ttouchData.action = action;\n\t\t\t}\n\t\t\ttouchArr.push( touchData );\n\t\t}\n\t}\n\n\tconst touchArr = [];\n\n\tcopyTouches( screenData.touches, touchArr );\n\n\tif( touchArr.length === 0 ) {\n\t\tcopyTouches( screenData.lastTouches, touchArr, \"up\" );\n\t}\n\n\tif( touchArr.length > 0 ) {\n\t\tconst touchData = touchArr[ 0 ];\n\t\tif( touchData.action === \"up\" ) {\n\t\t\ttouchData.buttons = 0;\n\t\t} else {\n\t\t\ttouchData.buttons = 1;\n\t\t}\n\t\ttouchData.touches = touchArr;\n\n\t\treturn touchData;\n\t} else {\n\t\treturn {\n\t\t\t\"x\": -1,\n\t\t\t\"y\": -1,\n\t\t\t\"id\": -1,\n\t\t\t\"lastX\": -1,\n\t\t\t\"lastY\": -1,\n\t\t\t\"action\": \"none\",\n\t\t\t\"buttons\": 0,\n\t\t\t\"type\": \"touch\"\n\t\t};\n\t}\n}\n\n", "/**\n * Pi.js - Gamepad Module\n * \n * Global gamepad input handling independent of screens.\n * \n * @module modules/gamepad\n */\n\n\"use strict\";\n\nimport * as commands from \"../core/commands\";\n\n\n/***************************************************************************************************\n * Module State\n **************************************************************************************************/\n\n\nconst m_gamepads = {};\nconst m_onConnectHandlers = [];\nconst m_onDisconnectHandlers = [];\n\nlet m_isInitialized = false;\nlet m_isLooping = false;\nlet m_gamepadLoopId = null;\nlet m_axesSensitivity = 0.2;\nlet m_tick = 0;\nlet m_lastGamepadUpdateTick = -1;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init() {\n\n\t// Add window blur/focus handlers\n\twindow.addEventListener( \"blur\", onWindowBlur );\n\twindow.addEventListener( \"focus\", onWindowFocus );\n}\n\n/**\n * Clear all gamepad event handlers\n * Called by clearEvents command\n */\nexport function clearGamepadEvents() {\n\tm_onConnectHandlers.length = 0;\n\tm_onDisconnectHandlers.length = 0;\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\ncommands.addCommand( \"startGamepad\", startGamepad, [] );\nfunction startGamepad() {\n\tif( !m_isInitialized ) {\n\t\twindow.addEventListener( \"gamepadconnected\", gamepadConnected );\n\t\twindow.addEventListener( \"gamepaddisconnected\", gamepadDisconnected );\n\t\tm_isInitialized = true;\n\t}\n\n\tif( !m_isLooping ) {\n\t\tm_isLooping = true;\n\t\tm_gamepadLoopId = requestAnimationFrame( gamepadLoop );\n\t}\n}\n\ncommands.addCommand( \"stopGamepad\", stopGamepad, [] );\nfunction stopGamepad() {\n\tif( m_isLooping ) {\n\t\tm_isLooping = false;\n\t\tif( m_gamepadLoopId ) {\n\t\t\tcancelAnimationFrame( m_gamepadLoopId );\n\t\t\tm_gamepadLoopId = null;\n\t\t}\n\t}\n}\n\ncommands.addCommand( \"ingamepad\", ingamepad, [ \"gamepadIndex\" ] );\nfunction ingamepad( options ) {\n\tconst gamepadIndex = options.gamepadIndex;\n\n\tstartGamepad();\n\tupdateGamepads();\n\n\t// If no index specified, return all gamepads\n\tif( gamepadIndex === null || gamepadIndex === undefined ) {\n\t\treturn Object.values( m_gamepads ).sort( ( a, b ) => a.index - b.index );\n\t}\n\n\t// Validate gamepadIndex\n\tif( !Number.isInteger( gamepadIndex ) || gamepadIndex < 0 ) {\n\t\tconst error = new TypeError(\n\t\t\t\"ingamepad: gamepadIndex must be a non-negative integer or null.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETERS\";\n\t\tthrow error;\n\t}\n\n\t// Return specific gamepad or undefined if not found\n\treturn m_gamepads[ gamepadIndex ];\n}\n\ncommands.addCommand( \"setGamepadSensitivity\", setGamepadSensitivity, [ \"sensitivity\" ] );\nfunction setGamepadSensitivity( options ) {\n\tconst sensitivity = options.sensitivity;\n\n\tif( typeof sensitivity !== \"number\" || sensitivity < 0 || sensitivity > 1 ) {\n\t\tconst error = new TypeError(\n\t\t\t\"setGamepadSensitivity: sensitivity must be a number between 0 and 1.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETERS\";\n\t\tthrow error;\n\t}\n\n\tif( sensitivity === 1 ) {\n\t\tm_axesSensitivity = 0.99999;\n\t} else {\n\t\tm_axesSensitivity = sensitivity;\n\t}\n}\n\ncommands.addCommand( \"onGamepadConnected\", onGamepadConnected, [ \"fn\" ] );\nfunction onGamepadConnected( options ) {\n\tconst fn = options.fn;\n\n\tif( typeof fn !== \"function\" ) {\n\t\tconst error = new TypeError( \"onGamepadConnected: fn must be a function.\" );\n\t\terror.code = \"INVALID_PARAMETERS\";\n\t\tthrow error;\n\t}\n\n\tm_onConnectHandlers.push( fn );\n\tstartGamepad();\n}\n\ncommands.addCommand( \"onGamepadDisconnected\", onGamepadDisconnected, [ \"fn\" ] );\nfunction onGamepadDisconnected( options ) {\n\tconst fn = options.fn;\n\n\tif( typeof fn !== \"function\" ) {\n\t\tconst error = new TypeError( \"onGamepadDisconnected: fn must be a function.\" );\n\t\terror.code = \"INVALID_PARAMETERS\";\n\t\tthrow error;\n\t}\n\n\tm_onDisconnectHandlers.push( fn );\n\tstartGamepad();\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\nfunction gamepadConnected( e ) {\n\n\tupdateGamepad( e.gamepad );\n\n\t// Trigger connect handlers\n\tconst gamepadData = m_gamepads[ e.gamepad.index ];\n\tfor( const handler of m_onConnectHandlers ) {\n\t\thandler( gamepadData );\n\t}\n}\n\nfunction gamepadDisconnected( e ) {\n\n\t// Trigger disconnect handlers\n\tconst data = {\n\t\t\"index\": e.gamepad.index,\n\t\t\"id\": e.gamepad.id,\n\t\t\"mapping\": e.gamepad.mapping,\n\t\t\"connected\": e.gamepad.connected\n\t};\n\n\tfor( const handler of m_onDisconnectHandlers ) {\n\t\thandler( data );\n\t}\n\n\tdelete m_gamepads[ e.gamepad.index ];\n}\n\nfunction gamepadLoop() {\n\tif( !m_isLooping ) {\n\t\treturn;\n\t}\n\n\tupdateGamepads();\n\n\tm_tick += 1;\n\tm_gamepadLoopId = requestAnimationFrame( gamepadLoop );\n}\n\nfunction updateGamepads() {\n\tlet gamepads;\n\n\t// Prevent updateGamepads from triggering multiple times in the same loop\n\tif( m_lastGamepadUpdateTick === m_tick ) {\n\t\treturn;\n\t}\n\tm_lastGamepadUpdateTick = m_tick;\n\n\tif( \"getGamepads\" in navigator ) {\n\t\tgamepads = navigator.getGamepads();\n\t} else if( \"webkitGetGamepads\" in navigator ) {\n\t\tgamepads = navigator.webkitGetGamepads();\n\t} else {\n\t\tgamepads = [];\n\t}\n\n\tfor( let i = 0; i < gamepads.length; i++ ) {\n\t\tif( gamepads[ i ] && gamepads[ i ].index in m_gamepads ) {\n\t\t\tupdateGamepad( gamepads[ i ] );\n\t\t}\n\t}\n\n\t\n}\n\nfunction createNewGamepadData( gamepadDataRaw ) {\n\n\t// Create the new gamepad data object\n\tconst newGamepadData = {\n\t\t\"index\": gamepadDataRaw.index,\n\t\t\"id\": gamepadDataRaw.id,\n\t\t\"connected\": gamepadDataRaw.connected,\n\t\t\"mapping\": gamepadDataRaw.mapping,\n\t\t\"timestamp\": gamepadDataRaw.timestamp,\n\t\t\"vibrationActuator\": gamepadDataRaw.vibrationActuator,\n\t\t\"axes\": [],\n\t\t\"lastAxes\": [],\n\t\t\"buttons\": []\n\t};\n\n\t// Attach event listeners with helper functions\n\tnewGamepadData.getButton = function( buttonIndex ) {\n\t\tif( buttonIndex < 0 || buttonIndex >= this.buttons.length ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.buttons[ buttonIndex ];\n\t};\n\tnewGamepadData.getButtonPressed = function ( buttonIndex ) {\n\t\tif( buttonIndex < 0 || buttonIndex >= this.buttons.length ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.buttons[ buttonIndex ].pressed;\n\t}\n\tnewGamepadData.getButtonJustPressed = function( buttonIndex ) {\n\t\tif( buttonIndex < 0 || buttonIndex >= this.buttons.length ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.buttons[ buttonIndex ].pressStarted;\n\t};\n\tnewGamepadData.getButtonJustReleased = function( buttonIndex ) {\n\t\tif( buttonIndex < 0 || buttonIndex >= this.buttons.length ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.buttons[ buttonIndex ].pressReleased;\n\t};\n\tnewGamepadData.getAxis = function( axisIndex ) {\n\t\tif( axisIndex < 0 || axisIndex >= this.axes.length ) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.axes[ axisIndex ];\n\t};\n\tnewGamepadData.getAxisChanged = function( axisIndex ) {\n\t\tif( axisIndex < 0 || axisIndex >= this.axes.length ) {\n\t\t\treturn false;\n\t\t}\n\t\tconst current = this.axes[ axisIndex ];\n\t\tconst last = this.lastAxes[ axisIndex ] || 0;\n\t\treturn current !== last;\n\t};\n\n\treturn newGamepadData;\n}\n\nfunction updateGamepad( gamepadRawData ) {\n\tlet gamepadData = m_gamepads[ gamepadRawData.index ];\n\tif( !gamepadData ) {\n\t\tgamepadData = createNewGamepadData( gamepadRawData );\n\t\tm_gamepads[ gamepadRawData.index ] = gamepadData;\n\t}\n\n\t// Update buttons\n\tconst newButtons = [];\n\tfor( let i = 0; i < gamepadRawData.buttons.length; i += 1 ) {\n\t\tconst buttonNew = gamepadRawData.buttons[ i ];\n\t\tconst buttonOld = gamepadData.buttons[ i ] || { \"pressed\": false };\n\t\tnewButtons.push( {\n\t\t\t\"pressed\": buttonNew.pressed,\n\t\t\t\"value\": buttonNew.value,\n\t\t\t\"pressStarted\": !buttonOld.pressed && buttonNew.pressed,\n\t\t\t\"pressReleased\": buttonOld.pressed && !buttonNew.pressed\n\t\t} );\n\t}\n\tgamepadData.buttons = newButtons;\n\n\t// Update Axes\n\tgamepadData.lastAxes = gamepadData.axes.slice();\n\tgamepadData.axes = [];\n\tfor( let i = 0; i < gamepadRawData.axes.length; i++ ) {\n\t\tgamepadData.axes.push( smoothAxis( gamepadRawData.axes[ i ] ) );\n\t}\n\n\t// Update Raw Data\n\tgamepadData.timestamp = gamepadRawData.timestamp;\n\tgamepadData.connected = gamepadRawData.connected;\n\tgamepadData.vibrationActuator = gamepadRawData.vibrationActuator;\n\n}\n\nfunction smoothAxis( axis ) {\n\tif( Math.abs( axis ) < m_axesSensitivity ) {\n\t\treturn 0;\n\t}\n\taxis = axis - Math.sign( axis ) * m_axesSensitivity;\n\taxis = axis / ( 1 - m_axesSensitivity );\n\treturn axis;\n}\n\nfunction onWindowBlur() {\n\n\t// Pause gamepad loop when window loses focus\n\tif( m_isLooping ) {\n\t\tif( m_gamepadLoopId ) {\n\t\t\tcancelAnimationFrame( m_gamepadLoopId );\n\t\t\tm_gamepadLoopId = null;\n\t\t}\n\t}\n}\n\nfunction onWindowFocus() {\n\n\t// Resume gamepad loop when window regains focus\n\tif( m_isLooping && !m_gamepadLoopId ) {\n\t\tm_gamepadLoopId = requestAnimationFrame( gamepadLoop );\n\t}\n}", "/**\n * Pi.js - Event Management Module\n * \n * Centralized event listener management for input events (mouse, touch, keyboard, etc.)\n * \n * @module core/events\n */\n\n\"use strict\";\n\nimport * as utils from \"./utils\";\nimport * as screenManager from \"./screen-manager\";\n\n// Import clear functions from input modules\nimport { clearKeyboardEvents } from \"../modules/keyboard\";\nimport { clearMouseEvents } from \"../modules/mouse\";\nimport { clearTouchEvents } from \"../modules/touch\";\nimport { clearPressEvents, clearClickEvents } from \"../modules/press\";\nimport { clearGamepadEvents } from \"../modules/gamepad\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init() {\n\n\t// Register clearEvents command\n\t// Screen is optional since keyboard and gamepad don't require a screen\n\tscreenManager.addCommand( \"clearEvents\", clearEvents, [ \"type\" ], true );\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n/**\n * Clear event handlers for specified input types\n * \n * @param {Object|null} screenData - Screen data object (null if no screen available)\n * @param {Object} options - Command options\n * @param {string|Array<string>} options.type - Type(s) to clear (keyboard, mouse, touch, press, click, gamepad)\n */\nfunction clearEvents( screenData, options ) {\n\tconst type = options.type;\n\tconst types = Array.isArray( type ) ? type : ( type ? [ type ] : null );\n\n\t// If no type specified, clear all\n\tif( !types ) {\n\t\tclearKeyboardEvents();\n\t\tclearGamepadEvents();\n\t\tif( screenData ) {\n\t\t\tclearMouseEvents( screenData );\n\t\t\tclearTouchEvents( screenData );\n\t\t\tclearPressEvents( screenData );\n\t\t\tclearClickEvents( screenData );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Clear specific types\n\tfor( const t of types ) {\n\t\tconst lowerType = t.toLowerCase();\n\t\tif( lowerType === \"keyboard\" ) {\n\t\t\tclearKeyboardEvents();\n\t\t} else if( lowerType === \"gamepad\" ) {\n\t\t\tclearGamepadEvents();\n\t\t} else if( lowerType === \"mouse\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear mouse events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearMouseEvents( screenData );\n\t\t} else if( lowerType === \"touch\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear touch events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearTouchEvents( screenData );\n\t\t} else if( lowerType === \"press\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear press events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearPressEvents( screenData );\n\t\t} else if( lowerType === \"click\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear click events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearClickEvents( screenData );\n\t\t} else {\n\t\t\tconst error = new Error(\n\t\t\t\t`clearEvents: Invalid type \"${t}\". ` +\n\t\t\t\t`Valid types: keyboard, mouse, touch, press, click, gamepad.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_TYPE\";\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\n\n/***************************************************************************************************\n * Event Management Functions\n **************************************************************************************************/\n\n\n/**\n * Register an event listener\n * \n * @param {string} mode - Event mode (e.g., \"down\", \"up\", \"move\")\n * @param {Function} fn - Callback function\n * @param {boolean} once - If true, listener is removed after first trigger\n * @param {Object} hitBox - Optional hit box with x, y, width, height properties\n * @param {Array<string>} modes - Valid modes for this event type\n * @param {string} name - Command name for error messages\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} extraId - Optional extra ID to append to mode\n * @param {*} extraData - Optional extra data to store with listener\n * @param {*} customData - Optional custom data passed to callback\n * @returns {boolean} True if listener was successfully registered\n */\nexport function onevent(\n\tmode, fn, once, hitBox, modes, name, listenerArr, extraId, extraData, customData\n) {\n\tlet modeFound = false;\n\n\t// Validate mode\n\tfor( let i = 0; i < modes.length; i++ ) {\n\t\tif( mode === modes[ i ] ) {\n\t\t\tmodeFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !modeFound ) {\n\t\tconst error = new Error(\n\t\t\t`${name}: mode needs to be one of the following: ${modes.join( \", \" )}.`\n\t\t);\n\t\terror.code = \"INVALID_MODE\";\n\t\tthrow error;\n\t}\n\n\t// Validate once parameter\n\tonce = !!( once );\n\n\t// Validate callback function\n\tif( !utils.isFunction( fn ) ) {\n\t\tconst error = new Error( `${name}: fn is not a valid function.` );\n\t\terror.code = \"INVALID_FUNCTION\";\n\t\tthrow error;\n\t}\n\n\t// Validate hitBox\n\tif( hitBox ) {\n\t\tif(\n\t\t\t!Number.isInteger( hitBox.x ) ||\n\t\t\t!Number.isInteger( hitBox.y ) ||\n\t\t\t!Number.isInteger( hitBox.width ) ||\n\t\t\t!Number.isInteger( hitBox.height )\n\t\t) {\n\t\t\tconst error = new Error(\n\t\t\t\t`${name}: hitBox must have properties x, y, width, and height ` +\n\t\t\t\t`whose values are integers.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_HITBOX\";\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Use setTimeout to prevent event from being triggered if called within an event\n\tsetTimeout( () => {\n\t\tconst originalFn = fn;\n\t\tlet newMode = mode;\n\n\t\t// Add extraId to mode if provided\n\t\tif( typeof extraId === \"string\" ) {\n\t\t\tnewMode = mode + extraId;\n\t\t}\n\n\t\t// Wrap function if it should only run once\n\t\tlet wrappedFn = fn;\n\t\tif( once ) {\n\t\t\twrappedFn = ( data, customData ) => {\n\t\t\t\toffevent( mode, originalFn, modes, name, listenerArr, extraId );\n\t\t\t\toriginalFn( data, customData );\n\t\t\t};\n\t\t}\n\n\t\t// Initialize listener array for this mode if needed\n\t\tif( !listenerArr[ newMode ] ) {\n\t\t\tlistenerArr[ newMode ] = [];\n\t\t}\n\n\t\t// Add listener\n\t\tlistenerArr[ newMode ].push( {\n\t\t\t\"fn\": wrappedFn,\n\t\t\t\"hitBox\": hitBox,\n\t\t\t\"extraData\": extraData,\n\t\t\t\"clickDown\": false,\n\t\t\t\"originalFn\": originalFn,\n\t\t\t\"customData\": customData\n\t\t} );\n\t}, 1 );\n\n\treturn true;\n}\n\n/**\n * Unregister an event listener\n * \n * @param {string} mode - Event mode\n * @param {Function} fn - Callback function to remove, or null to remove all\n * @param {Array<string>} modes - Valid modes for this event type\n * @param {string} name - Command name for error messages\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} extraId - Optional extra ID appended to mode\n * @returns {boolean} True if listener(s) were successfully removed\n */\nexport function offevent( mode, fn, modes, name, listenerArr, extraId ) {\n\tlet modeFound = false;\n\n\t// Validate mode\n\tfor( let i = 0; i < modes.length; i++ ) {\n\t\tif( mode === modes[ i ] ) {\n\t\t\tmodeFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !modeFound ) {\n\t\tconst error = new Error(\n\t\t\t`${name}: mode needs to be one of the following: ${modes.join( \", \" )}.`\n\t\t);\n\t\terror.code = \"INVALID_MODE\";\n\t\tthrow error;\n\t}\n\n\t// Add extraId to mode if provided\n\tif( typeof extraId === \"string\" ) {\n\t\tmode += extraId;\n\t}\n\n\t// Determine if clearing all listeners or specific function\n\tconst isClear = fn == null;\n\n\tif( !isClear && !utils.isFunction( fn ) ) {\n\t\tconst error = new Error( `${name}: fn is not a valid function.` );\n\t\terror.code = \"INVALID_FUNCTION\";\n\t\tthrow error;\n\t}\n\n\t// Remove listeners\n\tif( listenerArr[ mode ] ) {\n\t\tif( isClear ) {\n\n\t\t\t// Remove all listeners for this mode\n\t\t\tdelete listenerArr[ mode ];\n\t\t} else {\n\n\t\t\t// Remove specific function\n\t\t\tfor( let i = listenerArr[ mode ].length - 1; i >= 0; i-- ) {\n\t\t\t\tif( listenerArr[ mode ][ i ].originalFn === fn ) {\n\t\t\t\t\tlistenerArr[ mode ].splice( i, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clean up empty array\n\t\t\tif( listenerArr[ mode ].length === 0 ) {\n\t\t\t\tdelete listenerArr[ mode ];\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Trigger all event listeners for a specific mode\n * \n * @param {string} mode - Event mode to trigger\n * @param {*} data - Event data to pass to listeners\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} clickStatus - Optional \"down\" or \"up\" for click tracking\n */\nexport function triggerEventListeners( mode, data, listenerArr, clickStatus ) {\n\tif( !listenerArr[ mode ] ) {\n\t\treturn;\n\t}\n\n\t// Make a copy to prevent infinite loops if listener adds new listeners\n\tconst temp = listenerArr[ mode ].slice();\n\n\t// Loop through all event listeners\n\tfor( let i = 0; i < temp.length; i++ ) {\n\t\tconst listener = temp[ i ];\n\n\t\t// Handle click up without click down\n\t\tif( clickStatus === \"up\" && !listener.clickDown ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check hitBox if present\n\t\tif( listener.hitBox ) {\n\t\t\tlet isHit = false;\n\t\t\tlet newData;\n\n\t\t\t// Handle array data (touches)\n\t\t\tif( Array.isArray( data ) ) {\n\t\t\t\tnewData = [];\n\t\t\t\tfor( let j = 0; j < data.length; j++ ) {\n\t\t\t\t\tconst pos = data[ j ];\n\t\t\t\t\tif( utils.inRange( pos, listener.hitBox ) ) {\n\t\t\t\t\t\tnewData.push( pos );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( newData.length > 0 ) {\n\t\t\t\t\tisHit = true;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Handle single data point (mouse)\n\t\t\t\tnewData = data;\n\t\t\t\tif( utils.inRange( data, listener.hitBox ) ) {\n\t\t\t\t\tisHit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( isHit ) {\n\n\t\t\t\t// For click events, track down state\n\t\t\t\tif( clickStatus === \"down\" ) {\n\t\t\t\t\tlistener.clickDown = true;\n\t\t\t\t} else {\n\t\t\t\t\tlistener.clickDown = false;\n\t\t\t\t\tlistener.fn( newData, listener.customData );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\t// No hitBox, trigger for all events\n\t\t\tlistener.fn( data, listener.customData );\n\t\t}\n\t}\n}\n\n", "/**\r\n * Pi.js - Graphics Module\r\n * \r\n * Basic Graphics Commands: pset, line, rect, circle, get, put, getPixel\r\n * \r\n * @module modules/graphics\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport * as screenManager from \"../core/screen-manager\";\r\nimport * as utils from \"../core/utils\";\r\nimport * as renderer from \"../core/renderer\";\r\nimport * as colors from \"../core/colors\";\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Initialize graphics module\r\nexport function init() {\r\n\tscreenManager.addScreenDataItem( \"cursor\", { \"x\": 0, \"y\": 0 } );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * External API Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// pset command\r\nscreenManager.addPixelCommand( \"pset\", pset, [ \"x\", \"y\" ] );\r\nfunction pset( screenData, options ) {\r\n\tconst x = utils.getInt( options.x, null );\r\n\tconst y = utils.getInt( options.y, null );\r\n\r\n\t// Make sure x and y are integers\r\n\tif( x === null || y === null ) {\r\n\t\tconst error = new TypeError( \"pset: Parameters x and y must be integers.\" );\r\n\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Make sure x and y are on the screen\r\n\tif( ! utils.inRange2( x, y, 0, 0, screenData.width, screenData.height ) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Get the fore color\r\n\tconst color = screenData.color;\r\n\r\n\trenderer.getImageData( screenData );\r\n\tscreenData.pen( screenData, x, y, color );\r\n\trenderer.setImageDirty( screenData );\r\n\r\n\t// Set the cursor after drawing\r\n\tscreenData.cursor.x = x;\r\n\tscreenData.cursor.y = y;\r\n}\r\n\r\nscreenManager.addAACommand( \"pset\", aaPset, [ \"x\", \"y\" ] );\r\nfunction aaPset( screenData, options ) {\r\n\tconst x = utils.getFloat( options.x, null );\r\n\tconst y = utils.getFloat( options.y, null );\r\n\r\n\tif( x === null || y === null ) {\r\n\t\tconst error = new TypeError( \"pset: Parameters x and y must be numbers.\" );\r\n\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tscreenData.api.render();\r\n\tscreenData.context.beginPath();\r\n\tscreenData.context.moveTo( x, y );\r\n\tscreenData.context.lineTo( x, y );\r\n\tscreenData.context.stroke();\r\n\r\n\t// Set the cursor after drawing\r\n\tscreenData.cursor.x = x;\r\n\tscreenData.cursor.y = y;\r\n}\r\n\r\n\r\n// line command\r\nscreenManager.addPixelCommand( \"line\", line, [ \"x1\", \"y1\", \"x2\", \"y2\" ] );\r\nfunction line( screenData, options ) {\r\n\tlet x1 = utils.getInt( options.x1, null );\r\n\tlet y1 = utils.getInt( options.y1, null );\r\n\tconst x2 = utils.getInt( options.x2, null );\r\n\tconst y2 = utils.getInt( options.y2, null );\r\n\r\n\t// Make sure x and y are integers\r\n\tif( x1 === null || y1 === null || x2 === null || y2 === null ) {\r\n\t\tconst error = new TypeError( \"line: Arguments x1, y1, x2, and y2 must be integers.\" );\r\n\t\terror.code = \"INVALID_COORDINATES\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Initialize the color for the line\r\n\tconst color = screenData.color;\r\n\r\n\tconst dx = Math.abs( x2 - x1 );\r\n\tconst dy = Math.abs( y2 - y1 );\r\n\r\n\t// Set the x slope\r\n\tlet sx;\r\n\tif( x1 < x2 ) {\r\n\t\tsx = 1;\r\n\t} else {\r\n\t\tsx = -1;\r\n\t}\r\n\r\n\t// Set the y slope\r\n\tlet sy;\r\n\tif( y1 < y2 ) {\r\n\t\tsy = 1;\r\n\t} else {\r\n\t\tsy = -1;\r\n\t}\r\n\r\n\t// Set the err\r\n\tlet err = dx - dy;\r\n\r\n\t// Get the image data\r\n\trenderer.getImageData( screenData );\r\n\r\n\t// Set the first pixel\r\n\tscreenData.pen( screenData, x1, y1, color );\r\n\r\n\t// Loop until the end of the line\r\n\twhile( !( ( x1 === x2 ) && ( y1 === y2 ) ) ) {\r\n\t\tconst e2 = err << 1;\r\n\r\n\t\tif( e2 > -dy ) {\r\n\t\t\terr -= dy;\r\n\t\t\tx1 += sx;\r\n\t\t}\r\n\r\n\t\tif( e2 < dx ) {\r\n\t\t\terr += dx;\r\n\t\t\ty1 += sy;\r\n\t\t}\r\n\r\n\t\t// Set the next pixel\r\n\t\tscreenData.pen( screenData, x1, y1, color );\r\n\t}\r\n\r\n\trenderer.setImageDirty( screenData );\r\n}\r\n\r\nscreenManager.addAACommand( \"line\", aaLine, [ \"x1\", \"y1\", \"x2\", \"y2\" ] );\r\nfunction aaLine( screenData, options ) {\r\n\tconst x1 = utils.getFloat( options.x1, null );\r\n\tconst y1 = utils.getFloat( options.y1, null );\r\n\tconst x2 = utils.getFloat( options.x2, null );\r\n\tconst y2 = utils.getFloat( options.y2, null );\r\n\r\n\tif( x1 === null || y1 === null || x2 === null || y2 === null ) {\r\n\t\tconst error = new TypeError( \"line: Parameters x1, y1, x2, y2 must be numbers.\" );\r\n\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tscreenData.api.render();\r\n\tscreenData.context.strokeStyle = screenData.color.hex;\r\n\tscreenData.context.beginPath();\r\n\tscreenData.context.moveTo( x1, y1 );\r\n\tscreenData.context.lineTo( x2, y2 );\r\n\tscreenData.context.stroke();\r\n}\r\n\r\n\r\n// rect command\r\nscreenManager.addPixelCommand( \"rect\", rect, [ \"x\", \"y\", \"width\", \"height\", \"fillColor\" ] );\r\nfunction rect( screenData, options ) {\r\n\tlet x = utils.getInt( options.x, null );\r\n\tlet y = utils.getInt( options.y, null );\r\n\tconst width = utils.getInt( options.width, null );\r\n\tconst height = utils.getInt( options.height, null );\r\n\tlet fillColor = options.fillColor;\r\n\r\n\tif( x === null || y === null || width === null || height === null ) {\r\n\t\tconst error = new TypeError( \"rect: Paramters x, y, width, and height must be integers.\" );\r\n\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tlet isFill = false;\r\n\tif( fillColor != null ) {\r\n\t\tfillColor = colors.getColorValueByRawInput( screenData, fillColor );\r\n\t\tif( fillColor === null ) {\r\n\t\t\tconst error = new TypeError(\r\n\t\t\t\t\"rect: Parameter fillColor must be a valid color format.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tisFill = true;\r\n\t}\r\n\r\n\tconst x2 = x + width - 1;\r\n\tconst y2 = y + height - 1;\r\n\r\n\t// Draw the four lines of the rectangle\r\n\tscreenData.api.line( x, y, x2, y );\r\n\tscreenData.api.line( x2, y, x2, y2 );\r\n\tscreenData.api.line( x2, y2, x, y2 );\r\n\tscreenData.api.line( x, y2, x, y );\r\n\r\n\tif(\r\n\t\tisFill && width > screenData.penData.size && height > screenData.penData.size &&\r\n\t\twidth > 2 && height > 2\r\n\t) {\r\n\r\n\t\tconst tempColor = screenData.color;\r\n\t\tscreenData.color = fillColor;\r\n\r\n\t\trenderer.getImageData( screenData );\r\n\r\n\t\ty = y + screenData.penData.size;\r\n\t\tlet y2Adjusted = y2 - screenData.penData.size + 1;\r\n\t\tx = x + screenData.penData.size;\r\n\t\tlet x2Adjusted = x2 - screenData.penData.size + 1;\r\n\r\n\t\tif( x < 0 ) {\r\n\t\t\tx = 0;\r\n\t\t}\r\n\t\tif( x2Adjusted > screenData.width ) {\r\n\t\t\tx2Adjusted = screenData.width;\r\n\t\t}\r\n\r\n\t\tif( y < 0 ) {\r\n\t\t\ty = 0;\r\n\t\t}\r\n\t\tif( y2Adjusted > screenData.height ) {\r\n\t\t\ty2Adjusted = screenData.height;\r\n\t\t}\r\n\r\n\t\t// Draw line by line\r\n\t\tfor( ; y < y2Adjusted; y += 1 ) {\r\n\t\t\tfor( let x3 = x; x3 < x2Adjusted; x3 += 1 ) {\r\n\t\t\t\tscreenData.pen( screenData, x3, y, fillColor );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trenderer.setImageDirty( screenData );\r\n\t\tscreenData.color = tempColor;\r\n\t}\r\n}\r\n\r\nscreenManager.addAACommand( \"rect\", aaRect, [ \"x\", \"y\", \"width\", \"height\", \"fillColor\" ] );\r\nfunction aaRect( screenData, options ) {\r\n\tconst x = utils.getFloat( options.x, null );\r\n\tconst y = utils.getFloat( options.y, null );\r\n\tconst width = utils.getFloat( options.width, null );\r\n\tconst height = utils.getFloat( options.height );\r\n\tlet fillColor = options.fillColor;\r\n\tlet isFill = false;\r\n\r\n\tif( x === null || y === null || width === null || height === null ) {\r\n\t\tconst error = new TypeError( \"rect: Parameters x, y, width, height must be numbers.\" );\r\n\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( fillColor != null ) {\r\n\t\tfillColor = colors.getColorValueByRawInput( screenData, fillColor );\r\n\t\tif( fillColor === null ) {\r\n\t\t\tconst error = new TypeError(\r\n\t\t\t\t\"rect: Parameter fillColor must be a valid color format.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tisFill = true;\r\n\t}\r\n\r\n\tscreenData.api.render();\r\n\tscreenData.context.beginPath();\r\n\tscreenData.context.strokeStyle = screenData.color.hex;\r\n\tscreenData.context.rect( x, y, width, height );\r\n\tif( isFill ) {\r\n\t\tscreenData.context.fillStyle = fillColor.hex;\r\n\t\tscreenData.context.fill();\r\n\t}\r\n\tscreenData.context.stroke();\r\n}\r\n\r\n\r\n// circle command\r\nscreenManager.addPixelCommand( \"circle\", circle, [ \"x\", \"y\", \"radius\", \"fillColor\" ] );\r\nfunction circle( screenData, options ) {\r\n\tconst x = utils.getInt( options.x, null );\r\n\tconst y = utils.getInt( options.y, null );\r\n\tlet radius = utils.getInt( options.radius, null );\r\n\tlet fillColor = options.fillColor;\r\n\tlet isFill = false;\r\n\r\n\tif( x === null || y === null || radius === null ) {\r\n\t\tconst error = new TypeError( \"circle: Paramters x, y, and radius must be integers.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( fillColor != null ) {\r\n\t\tfillColor = colors.getColorValueByRawInput( screenData, fillColor );\r\n\t\tif( fillColor === null ) {\r\n\t\t\tconst error = new TypeError(\r\n\t\t\t\t\"circle: Parameter fillColor must be a valid color format.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tisFill = true;\r\n\t}\r\n\r\n\trenderer.getImageData( screenData );\r\n\r\n\t// Initialize the color for the circle\r\n\tconst color = screenData.color;\r\n\r\n\t// Fill the circle first if needed (draw horizontal lines)\r\n\tif( isFill ) {\r\n\t\tconst r = radius - 1;\r\n\t\tconst rSquared = r * r;\r\n\r\n\t\t// Draw horizontal lines for each row of the circle\r\n\t\tfor( let dy = -r; dy <= r; dy++ ) {\r\n\t\t\tconst py = y + dy;\r\n\r\n\t\t\t// Skip if row is out of bounds\r\n\t\t\tif( py < 0 || py >= screenData.height ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Calculate half-width of circle at this y coordinate\r\n\t\t\tconst dx = Math.floor( Math.sqrt( rSquared - dy * dy ) );\r\n\r\n\t\t\t// Draw horizontal line from -dx to +dx\r\n\t\t\tfor( let px = x - dx; px <= x + dx; px++ ) {\r\n\r\n\t\t\t\t// Skip if pixel is out of bounds\r\n\t\t\t\tif( px < 0 || px >= screenData.width ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set individual pixel for scanline fill\r\n\t\t\t\tconst i = ( py * screenData.width + px ) * 4;\r\n\t\t\t\tconst data = screenData.imageData2;\r\n\t\t\t\tdata[ i ] = fillColor.r;\r\n\t\t\t\tdata[ i + 1 ] = fillColor.g;\r\n\t\t\t\tdata[ i + 2 ] = fillColor.b;\r\n\t\t\t\tdata[ i + 3 ] = fillColor.a;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Draw the outline after fill (outline will overwrite fill pixels on border)\r\n\tradius -= 1;\r\n\tlet x2 = radius;\r\n\tlet y2 = 0;\r\n\r\n\t// Only print initial points if r > 0\r\n\tif( radius > 1 ) {\r\n\t\tscreenData.pen( screenData, x2 + x, y2 + y, color );\r\n\t\tscreenData.pen( screenData, -x2 + x, y2 + y, color );\r\n\t\tscreenData.pen( screenData, x, x2 + y, color );\r\n\t\tscreenData.pen( screenData, x, -x2 + y, color );\r\n\t} else if( radius === 1 ) {\r\n\t\tscreenData.pen( screenData, x + 1, y, color );\r\n\t\tscreenData.pen( screenData, x - 1, y, color );\r\n\t\tscreenData.pen( screenData, x, y + 1, color );\r\n\t\tscreenData.pen( screenData, x, y - 1, color );\r\n\t\ty2 = x2 + 1;\r\n\t} else if( radius === 0 ) {\r\n\t\tscreenData.pen( screenData, x, y, color );\r\n\t\ty2 = x2 + 1;\r\n\t}\r\n\r\n\t// Initialize p\r\n\tlet midPoint = 1 - radius;\r\n\twhile( x2 > y2 ) {\r\n\t\ty2 += 1;\r\n\r\n\t\tif( midPoint <= 0 ) {\r\n\r\n\t\t\t// Mid-point is inside or on the perimeter\r\n\t\t\tmidPoint = midPoint + 2 * y2 + 1;\r\n\t\t} else {\r\n\r\n\t\t\t// Mid point is outside the perimeter\r\n\t\t\tx2 -= 1;\r\n\t\t\tmidPoint = midPoint + 2 * y2 - 2 * x2 + 1;\r\n\t\t}\r\n\r\n\t\t// Set pixels around point and reflection in other octants\r\n\t\tscreenData.pen( screenData, x2 + x, y2 + y, color );\r\n\t\tscreenData.pen( screenData, -x2 + x, y2 + y, color );\r\n\t\tscreenData.pen( screenData, x2 + x, -y2 + y, color );\r\n\t\tscreenData.pen( screenData, -x2 + x, -y2 + y, color );\r\n\r\n\t\t// Set pixels on the perimeter points if not on x = y\r\n\t\tif( x2 != y2 ) {\r\n\t\t\tscreenData.pen( screenData, y2 + x, x2 + y, color );\r\n\t\t\tscreenData.pen( screenData, -y2 + x, x2 + y, color );\r\n\t\t\tscreenData.pen( screenData, y2 + x, -x2 + y, color );\r\n\t\t\tscreenData.pen( screenData, -y2 + x, -x2 + y, color );\r\n\t\t}\r\n\t}\r\n\r\n\trenderer.setImageDirty( screenData );\r\n}\r\n\r\nscreenManager.addAACommand( \"circle\", aaCircle, [ \"x\", \"y\", \"radius\", \"fillColor\" ] );\r\nfunction aaCircle( screenData, options ) {\r\n\tconst x = utils.getFloat( options.x + 0.5, null );\r\n\tconst y = utils.getFloat( options.y + 0.5, null );\r\n\tconst r = utils.getFloat( options.radius - 0.9, null );\r\n\tlet fillColor = options.fillColor;\r\n\r\n\tif( isNaN( x ) || isNaN( y ) || isNaN( r ) ) {\r\n\t\tconst error = new TypeError( \"circle: Parameters cx, cy, r must be numbers.\" );\r\n\t\terror.code = \"INVALID_PARAMETERS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tlet isFill = false;\r\n\tif( fillColor != null ) {\r\n\t\tfillColor = colors.getColorValueByRawInput( screenData, fillColor, \"circle\" );\r\n\t\tif( fillColor === null ) {\r\n\t\t\tconst error = new TypeError(\r\n\t\t\t\t\"circle: Parameter fillColor must be a valid color format.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_PARAMETER\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tisFill = true;\r\n\t}\r\n\r\n\tscreenData.api.render();\r\n\tconst angle1 = utils.degreesToRadian( 0 );\r\n\tconst angle2 = utils.degreesToRadian( 360 );\r\n\tscreenData.context.beginPath();\r\n\tscreenData.context.arc( x, y, r, angle1, angle2 );\r\n\tif( isFill ) {\r\n\t\tscreenData.context.fillStyle = fillColor.hex;\r\n\t\tscreenData.context.fill();\r\n\t}\r\n\tscreenData.context.strokeStyle = screenData.color.hex;\r\n\tscreenData.context.stroke();\r\n}\r\n\r\n\r\n// put command\r\nscreenManager.addCommand( \"put\", put, [ \"data\", \"x\", \"y\", \"includeZero\" ] );\r\nfunction put( screenData, options ) {\r\n\tconst data = options.data;\r\n\tconst x = Math.round( options.x );\r\n\tconst y = Math.round( options.y );\r\n\tconst includeZero = !!options.includeZero;\r\n\r\n\t// Exit if no data\r\n\tif( !data || data.length < 1 ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif( isNaN( x ) || isNaN( y ) ) {\r\n\t\tconst error = new TypeError( \"put: Parameters x and y must be integers.\" );\r\n\t\terror.code = \"INVALID_COORDINATES\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Clip x if offscreen\r\n\tlet startX;\r\n\tif( x < 0 ) {\r\n\t\tstartX = x * -1;\r\n\t} else {\r\n\t\tstartX = 0;\r\n\t}\r\n\r\n\t// Clip y if offscreen\r\n\tlet startY;\r\n\tif( y < 0 ) {\r\n\t\tstartY = y * -1;\r\n\t} else {\r\n\t\tstartY = 0;\r\n\t}\r\n\r\n\t// Calc width & height\r\n\tlet width = data[ 0 ].length - startX;\r\n\tlet height = data.length - startY;\r\n\r\n\t// Clamp width & height\r\n\tif( x + startX + width >= screenData.width ) {\r\n\t\twidth = screenData.width - x + startX;\r\n\t}\r\n\tif( y + startY + height >= screenData.height ) {\r\n\t\theight = screenData.height - y + startY;\r\n\t}\r\n\r\n\t// Exit if there is no data that fits the screen\r\n\tif( width <= 0 || height <= 0 ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\trenderer.getImageData( screenData );\r\n\r\n\t// Loop through the data\r\n\tfor( let dataY = startY; dataY < startY + height; dataY++ ) {\r\n\t\tfor( let dataX = startX; dataX < startX + width; dataX++ ) {\r\n\r\n\t\t\t// Get the color\r\n\t\t\tconst c = screenData.pal[ data[ dataY ][ dataX ] ];\r\n\r\n\t\t\t// Calculate the index of the image data\r\n\t\t\tconst i = ( ( screenData.width * ( y + dataY ) ) + ( x + dataX ) ) * 4;\r\n\r\n\t\t\t// Put the color in the image data\r\n\t\t\tif( c.a > 0 || includeZero ) {\r\n\t\t\t\tscreenData.imageData2[ i ] = c.r;\r\n\t\t\t\tscreenData.imageData2[ i + 1 ] = c.g;\r\n\t\t\t\tscreenData.imageData2[ i + 2 ] = c.b;\r\n\t\t\t\tscreenData.imageData2[ i + 3 ] = c.a;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trenderer.setImageDirty( screenData );\r\n}\r\n\r\n\r\n// get command\r\nscreenManager.addCommand( \"get\", get, [ \"x1\", \"y1\", \"x2\", \"y2\", \"tolerance\" ] );\r\nfunction get( screenData, options ) {\r\n\tlet x1 = Math.round( options.x1 );\r\n\tlet y1 = Math.round( options.y1 );\r\n\tlet x2 = Math.round( options.x2 );\r\n\tlet y2 = Math.round( options.y2 );\r\n\tlet tolerance = options.tolerance;\r\n\tconst isAddToPalette = !!options.isAddToPalette;\r\n\r\n\tif( isNaN( x1 ) || isNaN( y1 ) || isNaN( x2 ) || isNaN( y2 ) ) {\r\n\t\tconst error = new TypeError( \"get: Parameters x1, x2, y1, y2 must be integers.\" );\r\n\t\terror.code = \"INVALID_COORDINATES\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tif( tolerance == null ) {\r\n\t\ttolerance = 1;\r\n\t} else if( isNaN( tolerance ) ) {\r\n\t\tconst error = new TypeError( \"get: Parameter tolerance must be a number.\" );\r\n\t\terror.code = \"INVALID_TOLERANCE\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tx1 = utils.clamp( x1, 0, screenData.width - 1 );\r\n\tx2 = utils.clamp( x2, 0, screenData.width - 1 );\r\n\ty1 = utils.clamp( y1, 0, screenData.height - 1 );\r\n\ty2 = utils.clamp( y2, 0, screenData.height - 1 );\r\n\tif( x1 > x2 ) {\r\n\t\tconst t = x1;\r\n\t\tx1 = x2;\r\n\t\tx2 = t;\r\n\t}\r\n\tif( y1 > y2 ) {\r\n\t\tconst t = y1;\r\n\t\ty1 = y2;\r\n\t\ty2 = t;\r\n\t}\r\n\r\n\trenderer.getImageData( screenData );\r\n\r\n\tconst imageData2 = screenData.imageData2;\r\n\tconst data = [];\r\n\tlet colorLookupFn;\r\n\tif( tolerance === 1 ) {\r\n\t\tcolorLookupFn = ( i ) => {\r\n\t\t\tconst key = utils.generateColorKey(\r\n\t\t\t\timageData2[ i ],\r\n\t\t\t\timageData2[ i + 1],\r\n\t\t\t\timageData2[ i + 2 ],\r\n\t\t\t\timageData2[ i + 3 ]\r\n\t\t\t);\r\n\t\t\tif( screenData.palMap.has( key ) ) {\r\n\t\t\t\tdata[ row ].push( screenData.palMap.get( key ) );\r\n\t\t\t} else {\r\n\t\t\t\tdata[ row ].push( 0 );\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tcolorLookupFn = ( i ) => {\r\n\t\t\tconst colorValue = utils.rgbToColor(\r\n\t\t\t\timageData2[ i ],\r\n\t\t\t\timageData2[ i + 1],\r\n\t\t\t\timageData2[ i + 2 ],\r\n\t\t\t\timageData2[ i + 3 ]\r\n\t\t\t);\r\n\t\t\tconst c = colors.findColorIndexByColorValue( screenData, colorValue, tolerance );\r\n\t\t\tif( c === null ) {\r\n\t\t\t\tdata[ row ].push( 0 );\r\n\t\t\t} else {\r\n\t\t\t\tdata[ row ].push( c );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tlet row = 0;\r\n\tfor( let y = y1; y <= y2; y++ ) {\r\n\t\tdata.push( [] );\r\n\t\tfor( let x = x1; x <= x2; x++ ) {\r\n\r\n\t\t\t// Calculate the index of the image data\r\n\t\t\tconst i = ( ( screenData.width * y ) + x ) * 4;\r\n\t\t\tcolorLookupFn( i );\r\n\t\t}\r\n\t\trow += 1;\r\n\t}\r\n\r\n\treturn data;\r\n}\r\n\r\n\r\n// getPixel command\r\nscreenManager.addCommand( \"getPixel\", getPixel, [ \"x\", \"y\" ] );\r\nfunction getPixel( screenData, options ) {\r\n\tconst x = Math.round( options.x );\r\n\tconst y = Math.round( options.y );\r\n\r\n\t// Make sure x and y are integers\r\n\tif( !Number.isInteger( x ) || !Number.isInteger( y ) ) {\r\n\t\tconst error = new TypeError( \"getPixel: Arguments x and y must be integers.\" );\r\n\t\terror.code = \"INVALID_COORDINATES\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Check if coordinates are within bounds\r\n\tif( x < 0 || x >= screenData.width || y < 0 || y >= screenData.height ) {\r\n\t\tconst error = new RangeError( \"getPixel: Coordinates are out of bounds.\" );\r\n\t\terror.code = \"OUT_OF_BOUNDS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\trenderer.getImageData( screenData );\r\n\tconst data = screenData.imageData2;\r\n\r\n\t// Calculate the index\r\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\r\n\tconst colorValue = utils.rgbToColor( data[ i ], data[ i + 1], data[ i + 2 ], data[ i + 3 ] );\r\n\tconst colorIndex = colors.findColorIndexByColorValue( screenData, colorValue );\r\n\treturn colorIndex;\r\n}\r\n\r\n\r\nscreenManager.addCommand( \"getPixelColor\", getPixelColor, [ \"x\", \"y\" ] );\r\nfunction getPixelColor( screenData, options ) {\r\n\tconst x = Math.round( options.x );\r\n\tconst y = Math.round( options.y );\r\n\r\n\t// Make sure x and y are integers\r\n\tif( !Number.isInteger( x ) || !Number.isInteger( y ) ) {\r\n\t\tconst error = new TypeError( \"getPixelColor: Arguments x and y must be integers.\" );\r\n\t\terror.code = \"INVALID_COORDINATES\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Check if coordinates are within bounds\r\n\tif( x < 0 || x >= screenData.width || y < 0 || y >= screenData.height ) {\r\n\t\tconst error = new RangeError( \"getPixelColor: Coordinates are out of bounds.\" );\r\n\t\terror.code = \"OUT_OF_BOUNDS\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\trenderer.getImageData( screenData );\r\n\tconst data = screenData.imageData2;\r\n\r\n\t// Calculate the index\r\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\r\n\tconst colorValue = utils.rgbToColor( data[ i ], data[ i + 1], data[ i + 2 ], data[ i + 3 ] );\r\n\t\r\n\treturn colorValue;\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Internal Commands\r\n **************************************************************************************************/\r\n\r\n", "/**\n * Pi.js - Advanced Graphics Module\n * \n * Advanced Graphics Commands: arc, ellipse, bezier, filterImg\n * \n * @module modules/graphics-advanced\n */\n\n\"use strict\";\n\nimport * as screenManager from \"../core/screen-manager\";\nimport * as utils from \"../core/utils\";\nimport * as renderer from \"../core/renderer\";\nimport * as colors from \"../core/colors\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init() { /* no-op */ }\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n// arc command\nscreenManager.addPixelCommand( \"arc\", arc, [ \"x\", \"y\", \"radius\", \"angle1\", \"angle2\" ] );\nfunction arc( screenData, options ) {\n\tconst x = utils.getInt( options.x, null );\n\tconst y = utils.getInt( options.y, null );\n\tlet radius = utils.getInt( options.radius, null );\n\tlet angle1 = utils.getInt( options.angle1, null );\n\tlet angle2 = utils.getInt( options.angle2, null );\n\n\t// Make sure x and y are integers\n\tif( x === null || y === null || radius === null || angle1 === null || angle2 === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"arc: Argument's x, y, radius, angle1, and angle2 must be integers.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETERS\";\n\t\tthrow error;\n\t}\n\n\tangle1 = ( angle1 + 360 ) % 360;\n\tangle2 = ( angle2 + 360 ) % 360;\n\tconst winding = angle1 > angle2;\n\n\trenderer.getImageData( screenData );\n\n\t// Initialize the color for the circle\n\tconst color = screenData.color;\n\n\tradius -= 1;\n\tif( radius < 0 ) {\n\t\tradius = 0;\n\t}\n\tlet x2 = radius;\n\tlet y2 = 0;\n\n\t// Helper function to check if angle is within arc range\n\tfunction set( x2, y2 ) {\n\t\tlet a = utils.radiansToDegrees( Math.atan2( y2 - y, x2 - x ) );\n\t\ta = ( a + 360 ) % 360;\n\t\tif( winding ) {\n\t\t\tif( a >= angle1 || a <= angle2 ) {\n\t\t\t\tscreenData.pen( screenData, x2, y2, color );\n\t\t\t}\n\t\t} else if( a >= angle1 && a <= angle2 ) {\n\t\t\tscreenData.pen( screenData, x2, y2, color );\n\t\t}\n\t}\n\n\t// Only print initial points if r > 0\n\tif( radius > 1 ) {\n\t\tset( x2 + x, y2 + y, color );\n\t\tset( -x2 + x, y2 + y, color );\n\t\tset( x, x2 + y, color );\n\t\tset( x, -x2 + y, color );\n\t} else if( radius === 1 ) {\n\t\tset( x + 1, y, color );\n\t\tset( x - 1, y, color );\n\t\tset( x, y + 1, color );\n\t\tset( x, y - 1, color );\n\t\trenderer.setImageDirty( screenData );\n\t\treturn;\n\t} else if( radius === 0 ) {\n\t\tscreenData.pen( screenData, x, y, color );\n\t\trenderer.setImageDirty( screenData );\n\t\treturn;\n\t}\n\n\t// Initialize p\n\tlet midPoint = 1 - radius;\n\twhile( x2 > y2 ) {\n\t\ty2 += 1;\n\n\t\tif( midPoint <= 0 ) {\n\n\t\t\t// Mid-point is inside or on the perimeter\n\t\t\tmidPoint = midPoint + 2 * y2 + 1;\n\t\t} else {\n\n\t\t\t// Mid point is outside the perimeter\n\t\t\tx2 -= 1;\n\t\t\tmidPoint = midPoint + 2 * y2 - 2 * x2 + 1;\n\t\t}\n\n\t\t// Set pixels around point and reflection in other octants\n\t\tset( x2 + x, y2 + y, color );\n\t\tset( -x2 + x, y2 + y, color );\n\t\tset( x2 + x, -y2 + y, color );\n\t\tset( -x2 + x, -y2 + y, color );\n\n\t\t// Set pixels on the perimeter points if not on x = y\n\t\tif( x2 != y2 ) {\n\t\t\tset( y2 + x, x2 + y, color );\n\t\t\tset( -y2 + x, x2 + y, color );\n\t\t\tset( y2 + x, -x2 + y, color );\n\t\t\tset( -y2 + x, -x2 + y, color );\n\t\t}\n\t}\n\n\trenderer.setImageDirty( screenData );\n}\n\nscreenManager.addAACommand( \"arc\", aaArc, [ \"x\", \"y\", \"radius\", \"angle1\", \"angle2\" ] );\nfunction aaArc( screenData, options ) {\n\tlet x = utils.getFloat( options.x, null );\n\tlet y = utils.getFloat( options.y, null );\n\tlet radius = utils.getFloat( options.radius, null );\n\tconst angle1 = utils.getFloat( options.angle1, null );\n\tconst angle2 = utils.getFloat( options.angle2, null );\n\n\tif( x === null || y === null || radius === null || angle1 === null || angle2 === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"arc: Argument's x, y, radius, angle1, and angle2 must be numbers.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETERS\";\n\t\tthrow error;\n\t}\n\n\tx = x + 0.5;\n\ty = y + 0.5;\n\tradius = radius - 0.9;\n\tif( radius < 0 ) {\n\t\tradius = 0;\n\t}\n\n\tscreenData.api.render();\n\tconst angle1Rad = utils.degreesToRadian( angle1 );\n\tconst angle2Rad = utils.degreesToRadian( angle2 );\n\tscreenData.context.beginPath();\n\tscreenData.context.strokeStyle = screenData.color.hex;\n\tscreenData.context.moveTo(\n\t\tx + Math.cos( angle1Rad ) * radius,\n\t\ty + Math.sin( angle1Rad ) * radius\n\t);\n\tscreenData.context.arc( x, y, radius, angle1Rad, angle2Rad );\n\tscreenData.context.stroke();\n}\n\n\n// ellipse command\nscreenManager.addPixelCommand( \"ellipse\", ellipse, [ \"x\", \"y\", \"radiusX\", \"radiusY\", \"fillColor\" ] );\nfunction ellipse( screenData, options ) {\n\tconst x = utils.getInt( options.x, null );\n\tconst y = utils.getInt( options.y, null );\n\tconst radiusX = utils.getInt( options.radiusX, null );\n\tconst radiusY = utils.getInt( options.radiusY, null );\n\tlet fillColor = options.fillColor;\n\n\tif( x === null || y === null || radiusX === null || radiusY === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"ellipse: Parameters x, y, radiusX, radiusY must be integers.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tlet isFill = false;\n\tif( fillColor !== null ) {\n\t\tfillColor = colors.getColorValueByRawInput( screenData, fillColor );\n\t\tif( fillColor === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"ellipse: Parameter fillColor must be a valid color format.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tisFill = true;\n\t}\n\n\trenderer.getImageData( screenData );\n\n\t// Initialize the color for the ellipse\n\tconst color = screenData.color;\n\n\tif( radiusX === 0 && radiusY === 0 ) {\n\t\tscreenData.pen( screenData, Math.floor( x ), Math.floor( y ), color );\n\t\trenderer.setImageDirty( screenData );\n\t\treturn;\n\t}\n\n\t// Fill the ellipse first if needed (draw horizontal lines)\n\tif( isFill ) {\n\t\tconst rxSquared = radiusX * radiusX;\n\t\tconst rySquared = radiusY * radiusY;\n\n\t\t// Draw horizontal lines for each row of the ellipse\n\t\tfor( let dy = -radiusY; dy <= radiusY; dy++ ) {\n\t\t\tconst py = y + dy;\n\n\t\t\t// Skip if row is out of bounds\n\t\t\tif( py < 0 || py >= screenData.height ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Calculate half-width of ellipse at this y coordinate\n\t\t\tconst dx = Math.floor( radiusX * Math.sqrt( 1 - ( dy * dy ) / rySquared ) );\n\n\t\t\t// Draw horizontal line from -dx to +dx\n\t\t\tfor( let px = x - dx; px <= x + dx; px++ ) {\n\n\t\t\t\t// Skip if pixel is out of bounds\n\t\t\t\tif( px < 0 || px >= screenData.width ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Set individual pixel for scanline fill\n\t\t\t\tconst i = ( py * screenData.width + px ) * 4;\n\t\t\t\tconst data = screenData.imageData2;\n\t\t\t\tdata[ i ] = fillColor.r;\n\t\t\t\tdata[ i + 1 ] = fillColor.g;\n\t\t\t\tdata[ i + 2 ] = fillColor.b;\n\t\t\t\tdata[ i + 3 ] = fillColor.a;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Starting points\n\tlet x2 = 0;\n\tlet y2 = radiusY;\n\n\t// Decision parameter of region 1\n\tlet d1 = ( radiusY * radiusY ) - ( radiusX * radiusX * radiusY ) + ( 0.25 * radiusX * radiusX );\n\n\tlet dx = 2 * radiusY * radiusY * x2;\n\tlet dy = 2 * radiusX * radiusX * y2;\n\n\t// For region 1\n\twhile( dx < dy ) {\n\n\t\t// 4-way symmetry\n\t\tscreenData.pen( screenData, Math.floor( x2 + x ), Math.floor( y2 + y ), color );\n\t\tscreenData.pen( screenData, Math.floor( -x2 + x ), Math.floor( y2 + y ), color );\n\t\tscreenData.pen( screenData, Math.floor( x2 + x ), Math.floor( -y2 + y ), color );\n\t\tscreenData.pen( screenData, Math.floor( -x2 + x ), Math.floor( -y2 + y ), color );\n\n\t\t// Checking and updating value of decision parameter based on algorithm\n\t\tif( d1 < 0 ) {\n\t\t\tx2++;\n\t\t\tdx = dx + ( 2 * radiusY * radiusY );\n\t\t\td1 = d1 + dx + ( radiusY * radiusY );\n\t\t} else {\n\t\t\tx2++;\n\t\t\ty2--;\n\t\t\tdx = dx + ( 2 * radiusY * radiusY );\n\t\t\tdy = dy - ( 2 * radiusX * radiusX );\n\t\t\td1 = d1 + dx - dy + ( radiusY * radiusY );\n\t\t}\n\t}\n\n\t// Decision parameter of region 2\n\tlet d2 = ( ( radiusY * radiusY ) * ( ( x2 + 0.5 ) * ( x2 + 0.5 ) ) ) +\n\t\t( ( radiusX * radiusX ) * ( ( y2 - 1 ) * ( y2 - 1 ) ) ) -\n\t\t( radiusX * radiusX * radiusY * radiusY );\n\n\t// Plotting points of region 2\n\twhile( y2 >= 0 ) {\n\n\t\t// 4-way symmetry\n\t\tscreenData.pen( screenData, Math.floor( x2 + x ), Math.floor( y2 + y ), color );\n\t\tscreenData.pen( screenData, Math.floor( -x2 + x ), Math.floor( y2 + y ), color );\n\t\tscreenData.pen( screenData, Math.floor( x2 + x ), Math.floor( -y2 + y ), color );\n\t\tscreenData.pen( screenData, Math.floor( -x2 + x ), Math.floor( -y2 + y ), color );\n\n\t\t// Checking and updating parameter value based on algorithm\n\t\tif( d2 > 0 ) {\n\t\t\ty2--;\n\t\t\tdy = dy - ( 2 * radiusX * radiusX );\n\t\t\td2 = d2 + ( radiusX * radiusX ) - dy;\n\t\t} else {\n\t\t\ty2--;\n\t\t\tx2++;\n\t\t\tdx = dx + ( 2 * radiusY * radiusY );\n\t\t\tdy = dy - ( 2 * radiusX * radiusX );\n\t\t\td2 = d2 + dx - dy + ( radiusX * radiusX );\n\t\t}\n\t}\n\n\trenderer.setImageDirty( screenData );\n}\n\nscreenManager.addAACommand( \"ellipse\", aaEllipse, [ \"x\", \"y\", \"radiusX\", \"radiusY\", \"fillColor\" ] );\nfunction aaEllipse( screenData, options ) {\n\tconst cx = utils.getInt( options.x, null );\n\tconst cy = utils.getInt( options.y, null );\n\tconst rx = utils.getInt( options.radiusX, null );\n\tconst ry = utils.getInt( options.radiusY, null );\n\tlet fillColor = options.fillColor;\n\n\tif( cx === null || cy === null || rx === null || ry === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"ellipse: Parameters x, y, radiusX, radiusY must be integers.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tlet isFill = false;\n\tif( fillColor != null ) {\n\t\tfillColor = colors.getColorValueByRawInput( screenData, fillColor );\n\t\tif( fillColor === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"ellipse: Parameter fillColor must be a valid color format.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tisFill = true;\n\t}\n\n\tif( screenData.isDirty ) {\n\t\tscreenData.api.render();\n\t}\n\n\tscreenData.context.beginPath();\n\tscreenData.context.strokeStyle = screenData.color.hex;\n\tscreenData.context.moveTo( cx + rx, cy );\n\tscreenData.context.ellipse( cx, cy, rx, ry, 0, Math.PI * 2, false );\n\tif( isFill ) {\n\t\tscreenData.context.fillStyle = fillColor.hex;\n\t\tscreenData.context.fill();\n\t}\n\tscreenData.context.stroke();\n}\n\n\n// filterImg command\nscreenManager.addCommand( \"filterImg\", filterImg, [ \"filter\", \"x1\", \"y1\", \"x2\", \"y2\" ] );\nfunction filterImg( screenData, options ) {\n\tconst filter = options.filter;\n\n\t// Get optional clipping bounds (default to full screen)\n\tlet x1 = utils.getInt( options.x1, 0 );\n\tlet y1 = utils.getInt( options.y1, 0 );\n\tlet x2 = utils.getInt( options.x2, screenData.width - 1 );\n\tlet y2 = utils.getInt( options.y2, screenData.height - 1 );\n\n\tif( !utils.isFunction( filter ) ) {\n\t\tconst error = new TypeError( \"filterImg: Argument filter must be a callback function.\" );\n\t\terror.code = \"INVALID_CALLBACK\";\n\t\tthrow error;\n\t}\n\n\t// Validate and clamp bounds to screen dimensions\n\tx1 = utils.clamp( x1, 0, screenData.width - 1 );\n\ty1 = utils.clamp( y1, 0, screenData.height - 1 );\n\tx2 = utils.clamp( x2, 0, screenData.width - 1 );\n\ty2 = utils.clamp( y2, 0, screenData.height - 1 );\n\n\t// Ensure x1 <= x2 and y1 <= y2\n\tif( x1 > x2 ) {\n\t\tconst temp = x1;\n\t\tx1 = x2;\n\t\tx2 = temp;\n\t}\n\tif( y1 > y2 ) {\n\t\tconst temp = y1;\n\t\ty1 = y2;\n\t\ty2 = temp;\n\t}\n\n\trenderer.getImageData( screenData );\n\tconst data = screenData.imageData2;\n\n\t// Apply filter to specified region\n\tfor( let y = y1; y <= y2; y++ ) {\n\t\tfor( let x = x1; x <= x2; x++ ) {\n\t\t\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\t\t\tconst color = filter( {\n\t\t\t\t\"r\": data[ i ],\n\t\t\t\t\"g\": data[ i + 1 ],\n\t\t\t\t\"b\": data[ i + 2 ],\n\t\t\t\t\"a\": data[ i + 3 ]\n\t\t\t}, x, y );\n\t\t\tif(\n\t\t\t\tcolor &&\n\t\t\t\tNumber.isInteger( color.r ) &&\n\t\t\t\tNumber.isInteger( color.g ) &&\n\t\t\t\tNumber.isInteger( color.b ) &&\n\t\t\t\tNumber.isInteger( color.a )\n\t\t\t) {\n\t\t\t\tdata[ i ] = utils.clamp( color.r, 0, 255 );\n\t\t\t\tdata[ i + 1 ] = utils.clamp( color.g, 0, 255 );\n\t\t\t\tdata[ i + 2 ] = utils.clamp( color.b, 0, 255 );\n\t\t\t\tdata[ i + 3 ] = utils.clamp( color.a, 0, 255 );\n\t\t\t}\n\t\t}\n\t}\n\n\trenderer.setImageDirty( screenData );\n}\n\n// bezier command\nscreenManager.addPixelCommand(\n\t\"bezier\",\n\tbezier,\n\t[ \"xStart\", \"yStart\", \"x1\", \"y1\", \"x2\", \"y2\", \"xEnd\", \"yEnd\" ]\n);\nfunction bezier( screenData, options ) {\n\tconst xStart = Math.round( options.xStart );\n\tconst yStart = Math.round( options.yStart );\n\tconst x1 = Math.round( options.x1 );\n\tconst y1 = Math.round( options.y1 );\n\tconst x2 = Math.round( options.x2 );\n\tconst y2 = Math.round( options.y2 );\n\tconst xEnd = Math.round( options.xEnd );\n\tconst yEnd = Math.round( options.yEnd );\n\n\t// Make sure all coordinates are numbers\n\tif(\n\t\tisNaN( xStart ) || isNaN( yStart ) ||\n\t\tisNaN( x1 ) || isNaN( y1 ) ||\n\t\tisNaN( x2 ) || isNaN( y2 ) ||\n\t\tisNaN( xEnd ) || isNaN( yEnd )\n\t) {\n\t\tconst error = new TypeError(\n\t\t\t\"bezier: Arguments xStart, yStart, x1, y1, x2, y2, xEnd, and yEnd must be numbers.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETERS\";\n\t\tthrow error;\n\t}\n\n\t// Initialize the color for the line\n\tconst color = screenData.color;\n\n\trenderer.getImageData( screenData );\n\tconst minDistance = screenData.penData.size;\n\tconst points = [\n\t\t{ \"x\": xStart, \"y\": yStart },\n\t\t{ \"x\": x1, \"y\": y1 },\n\t\t{ \"x\": x2, \"y\": y2 },\n\t\t{ \"x\": xEnd, \"y\": yEnd }\n\t];\n\n\tlet lastPoint = calcBezierStep( 0, points );\n\n\t// Set the first pixel\n\tscreenData.pen( screenData, lastPoint.x, lastPoint.y, color );\n\n\tlet t = 0.1;\n\tlet dt = 0.1;\n\twhile( t < 1 ) {\n\t\tconst point = calcBezierStep( t, points );\n\t\tconst distance = calcBezierDistance( point, lastPoint );\n\n\t\t// Adjust the step size if it's too big\n\t\tif( distance > minDistance && dt > 0.00001 ) {\n\t\t\tt -= dt;\n\t\t\tdt = dt * 0.75;\n\t\t} else {\n\t\t\tscreenData.pen( screenData, point.x, point.y, color );\n\t\t\tlastPoint = point;\n\t\t}\n\t\tt += dt;\n\t}\n\n\t// Draw the last step\n\tconst point = calcBezierStep( 1, points );\n\tscreenData.pen( screenData, point.x, point.y, color );\n\n\trenderer.setImageDirty( screenData );\n}\n\nscreenManager.addAACommand(\n\t\"bezier\",\n\taaBezier,\n\t[ \"xStart\", \"yStart\", \"x1\", \"y1\", \"x2\", \"y2\", \"xEnd\", \"yEnd\" ]\n);\nfunction aaBezier( screenData, options ) {\n\tconst xStart = options.xStart + 0.5;\n\tconst yStart = options.yStart + 0.5;\n\tconst x1 = options.x1 + 0.5;\n\tconst y1 = options.y1 + 0.5;\n\tconst x2 = options.x2 + 0.5;\n\tconst y2 = options.y2 + 0.5;\n\tconst xEnd = options.xEnd + 0.5;\n\tconst yEnd = options.yEnd + 0.5;\n\n\tif(\n\t\tisNaN( xStart ) || isNaN( yStart ) || isNaN( x1 ) || isNaN( y1 ) ||\n\t\tisNaN( x2 ) || isNaN( y2 ) || isNaN( xEnd ) || isNaN( yEnd )\n\t) {\n\t\tconst error = new TypeError(\n\t\t\t\"bezier: Parameters xStart, yStart, x1, y1, x2, y2, xEnd, and yEnd must be numbers.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETERS\";\n\t\tthrow error;\n\t}\n\n\tscreenData.api.render();\n\n\tscreenData.context.strokeStyle = screenData.color.hex;\n\tscreenData.context.beginPath();\n\tscreenData.context.moveTo( xStart, yStart );\n\tscreenData.context.bezierCurveTo( x1, y1, x2, y2, xEnd, yEnd );\n\tscreenData.context.stroke();\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Calculate distance between two points for bezier curve\nfunction calcBezierDistance( p1, p2 ) {\n\tconst dx = p1.x - p2.x;\n\tconst dy = p1.y - p2.y;\n\treturn dx * dx + dy * dy;\n}\n\n// Calculate a point on the bezier curve at parameter t\nfunction calcBezierStep( t, points ) {\n\tconst a = ( 1 - t );\n\tconst a2 = a * a;\n\tconst a3 = a * a * a;\n\tconst t2 = t * t;\n\tconst t3 = t * t * t;\n\n\treturn {\n\t\t\"x\": Math.round(\n\t\t\ta3 * points[ 0 ].x +\n\t\t\t3 * a2 * t * points[ 1 ].x +\n\t\t\t3 * a * t2 * points[ 2 ].x +\n\t\t\tt3 * points[ 3 ].x\n\t\t),\n\t\t\"y\": Math.round(\n\t\t\ta3 * points[ 0 ].y +\n\t\t\t3 * a2 * t * points[ 1 ].y +\n\t\t\t3 * a * t2 * points[ 2 ].y +\n\t\t\tt3 * points[ 3 ].y\n\t\t)\n\t};\n}\n\n", "/**\n * Pi.js - Draw Module\n * \n * BASIC-style draw command with string syntax for procedural drawing\n * \n * @module modules/draw\n */\n\n\"use strict\";\n\nimport * as screenManager from \"../core/screen-manager\";\nimport * as utils from \"../core/utils\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\n// Initialize draw module\nexport function init() {\n\tscreenManager.addScreenDataItem( \"angle\", 0 );\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n// draw command\nscreenManager.addCommand( \"draw\", draw, [ \"drawString\" ] );\nfunction draw( screenData, options ) {\n\tlet drawString = options.drawString;\n\n\tif( typeof drawString !== \"string\" ) {\n\t\tconst error = new TypeError( \"draw: drawString must be a string.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Convert to uppercase\n\tdrawString = drawString.toUpperCase();\n\n\t// Get colors\n\tconst tempColors = drawString.match( /(#[A-Z0-9]+)/g );\n\tif( tempColors ) {\n\t\tfor( let i = 0; i < tempColors.length; i++ ) {\n\t\t\tdrawString = drawString.replace( \"C\" + tempColors[ i ], \"O\" + i );\n\t\t}\n\t}\n\n\t// Remove spaces and invalid characters (keep only valid commands, numbers, #, and commas)\n\t// Note: Z is not included because Z is a replacement character and not allowed in original\n\t// string\n\tdrawString = drawString.replace( /[^CRBFGLATDHUENMPSO0-9#,]/g, \"\" );\n\t\n\t// Convert TA to T\n\tdrawString = drawString.replace( /(TA)/gi, \"T\" );\n\n\t// Convert ARC to Z\n\tdrawString = drawString.replace( /(ARC)/gi, \"Z\" );\n\t\n\t// Regular expression for the draw commands\n\tconst reg = /(?=C|O|R|B|F|G|L|A|T|D|G|H|U|E|N|M|P|S|Z)/;\n\n\t// Run the regular expression and split into separate commands\n\tconst parts = drawString.split( reg );\n\n\t// This triggers a move back after drawing the next command\n\tlet isReturn = false;\n\n\t// Store the last cursor - use current angle, not 0\n\tlet lastCursor = {\n\t\t\"x\": screenData.cursor.x, \"y\": screenData.cursor.y, \"angle\": screenData.angle\n\t};\n\n\t// Move without drawing\n\tlet isBlind = false;\n\n\tlet isArc = false;\n\tlet arcRadius, arcAngle1, arcAngle2;\n\tlet scale = 1;\n\n\tfor( let i = 0; i < parts.length; i++ ) {\n\t\tconst drawArgs = parts[ i ].split( /(\\d+)/ );\n\n\t\tswitch( drawArgs[ 0 ] ) {\n\n\t\t\t// C - Change Color - Using integer\n\t\t\tcase \"C\": {\n\t\t\t\tconst colorNum = Number( drawArgs[ 1 ] );\n\t\t\t\tscreenData.api.setColor( colorNum );\n\t\t\t\tisBlind = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// O - Change Color - Using string\n\t\t\tcase \"O\": {\n\t\t\t\tconst colorStr = tempColors[ drawArgs[ 1 ] ];\n\t\t\t\tscreenData.api.setColor( colorStr );\n\t\t\t\tisBlind = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// D - Down\n\t\t\tcase \"D\": {\n\t\t\t\tconst len = utils.getInt( drawArgs[ 1 ], 1 ) * scale;\n\t\t\t\tconst angle = utils.degreesToRadian( 90 ) + screenData.angle;\n\t\t\t\tscreenData.cursor.x += Math.round( Math.cos( angle ) * len );\n\t\t\t\tscreenData.cursor.y += Math.round( Math.sin( angle ) * len );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// E - Up and Right\n\t\t\tcase \"E\": {\n\t\t\t\tlet len = utils.getInt( drawArgs[ 1 ], 1 ) * scale;\n\t\t\t\tlen = Math.sqrt( len * len + len * len );\n\t\t\t\tconst angle = utils.degreesToRadian( 315 ) + screenData.angle;\n\t\t\t\tscreenData.cursor.x += Math.round( Math.cos( angle ) * len );\n\t\t\t\tscreenData.cursor.y += Math.round( Math.sin( angle ) * len );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// F - Down and Right\n\t\t\tcase \"F\": {\n\t\t\t\tlet len = utils.getInt( drawArgs[ 1 ], 1 ) * scale;\n\t\t\t\tlen = Math.sqrt( len * len + len * len );\n\t\t\t\tconst angle = utils.degreesToRadian( 45 ) + screenData.angle;\n\t\t\t\tscreenData.cursor.x += Math.round( Math.cos( angle ) * len );\n\t\t\t\tscreenData.cursor.y += Math.round( Math.sin( angle ) * len );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// G - Down and Left\n\t\t\tcase \"G\": {\n\t\t\t\tlet len = utils.getInt( drawArgs[ 1 ], 1 ) * scale;\n\t\t\t\tlen = Math.sqrt( len * len + len * len );\n\t\t\t\tconst angle = utils.degreesToRadian( 135 ) + screenData.angle;\n\t\t\t\tscreenData.cursor.x += Math.round( Math.cos( angle ) * len );\n\t\t\t\tscreenData.cursor.y += Math.round( Math.sin( angle ) * len );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// H - Up and Left\n\t\t\tcase \"H\": {\n\t\t\t\tlet len = utils.getInt( drawArgs[ 1 ], 1 ) * scale;\n\t\t\t\tlen = Math.sqrt( len * len + len * len );\n\t\t\t\tconst angle = utils.degreesToRadian( 225 ) + screenData.angle;\n\t\t\t\tscreenData.cursor.x += Math.round( Math.cos( angle ) * len );\n\t\t\t\tscreenData.cursor.y += Math.round( Math.sin( angle ) * len );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// L - Left\n\t\t\tcase \"L\": {\n\t\t\t\tconst len = utils.getInt( drawArgs[ 1 ], 1 ) * scale;\n\t\t\t\tconst angle = utils.degreesToRadian( 180 ) + screenData.angle;\n\t\t\t\tscreenData.cursor.x += Math.round( Math.cos( angle ) * len );\n\t\t\t\tscreenData.cursor.y += Math.round( Math.sin( angle ) * len );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// R - Right\n\t\t\tcase \"R\": {\n\t\t\t\tconst len = utils.getInt( drawArgs[ 1 ], 1 ) * scale;\n\t\t\t\tconst angle = utils.degreesToRadian( 0 ) + screenData.angle;\n\t\t\t\tscreenData.cursor.x += Math.round( Math.cos( angle ) * len );\n\t\t\t\tscreenData.cursor.y += Math.round( Math.sin( angle ) * len );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// U - Up\n\t\t\tcase \"U\": {\n\t\t\t\tconst len = utils.getInt( drawArgs[ 1 ], 1 ) * scale;\n\t\t\t\tconst angle = utils.degreesToRadian( 270 ) + screenData.angle;\n\t\t\t\tscreenData.cursor.x += Math.round( Math.cos( angle ) * len );\n\t\t\t\tscreenData.cursor.y += Math.round( Math.sin( angle ) * len );\n\t\t\tbreak;\n\t\t}\n\n\t\t\t// P - Paint Exact Match\n\t\t\tcase \"P\": {\n\t\t\t\tconst colorNum = utils.getInt( drawArgs[ 1 ], 0 );\n\t\t\t\tconst boundryNumber = utils.getInt( drawArgs[ 3 ], null );\n\t\t\t\tscreenData.api.paint(\n\t\t\t\t\tscreenData.cursor.x, screenData.cursor.y, colorNum, 1, boundryNumber\n\t\t\t\t);\n\t\t\t\tisBlind = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// S - Scale\n\t\t\t/*\n\t\t\t\tSet scale factor. n may range from 1 to 255. n is divided by 4 to derive the scale \n\t\t\t\tfactor. The scale factor is multiplied by the distances given with U, D, L, R, E, \n\t\t\t\tF, G, H, or relative M commands to get the actual distance traveled. The default \n\t\t\t\tfor S is 4.\n\t\t\t*/\n\t\t\tcase \"S\": {\n\t\t\t\tconst scaleNum = utils.getInt( drawArgs[ 1 ], 4 );\n\t\t\t\tscale = scaleNum / 4;\n\t\t\t\tisBlind = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Z - Arc Line\n\t\t\tcase \"Z\":\n\t\t\t\tarcRadius = utils.getInt( drawArgs[ 1 ], 1 );\n\t\t\t\tarcAngle1 = utils.getInt( drawArgs[ 3 ], 1 );\n\t\t\t\tarcAngle2 = utils.getInt( drawArgs[ 5 ], 1 );\n\t\t\t\tisArc = true;\n\t\t\t\tbreak;\n\n\t\t\t// A - Angle\n\t\t\t/*\n\t\t\t\tSet angle n. n may range from 0 to 3, where 0 is 0\u00B0, 1 is 90\u00B0, 2 is 180\u00B0, and 3 is\n\t\t\t\t270\u00B0. Figures rotated 90\u00B0 or 270\u00B0 are scaled so that they will appear the same size\n\t\t\t\tas with 0\u00B0 or 180\u00B0 on a monitor screen with the standard aspect ratio of 4:3.\n\t\t\t*/\n\t\t\tcase \"A\":\n\t\t\t\tscreenData.angle = utils.degreesToRadian(\n\t\t\t\t\tutils.clamp( utils.getInt( drawArgs[ 1 ], 0 ), 0, 3 ) * 90\n\t\t\t\t);\n\t\t\t\tisBlind = true;\n\t\t\t\tbreak;\n\n\t\t\t// TA - T - Turn Angle\n\t\t\tcase \"T\":\n\t\t\t\tscreenData.angle = utils.degreesToRadian(\n\t\t\t\t\tutils.clamp( utils.getInt( drawArgs[ 1 ], 0 ), -360, 360 )\n\t\t\t\t);\n\t\t\t\tisBlind = true;\n\t\t\t\tbreak;\n\n\t\t\t// M - Move\n\t\t\tcase \"M\":\n\t\t\t\tscreenData.cursor.x = utils.getInt( drawArgs[ 1 ], 1 );\n\t\t\t\tscreenData.cursor.y = utils.getInt( drawArgs[ 3 ], 1 );\n\t\t\t\tisBlind = true;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tisBlind = true;\n\t\t}\n\n\t\tif( !isBlind ) {\n\t\t\tif( isArc ) {\n\t\t\t\tscreenData.api.arc(\n\t\t\t\t\tscreenData.cursor.x,\n\t\t\t\t\tscreenData.cursor.y,\n\t\t\t\t\tarcRadius,\n\t\t\t\t\tarcAngle1,\n\t\t\t\t\tarcAngle2\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tscreenData.api.line(\n\t\t\t\t\tlastCursor.x,\n\t\t\t\t\tlastCursor.y,\n\t\t\t\t\tscreenData.cursor.x,\n\t\t\t\t\tscreenData.cursor.y\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tisBlind = false;\n\t\tisArc = false;\n\n\t\tif( isReturn ) {\n\t\t\tisReturn = false;\n\t\t\tscreenData.cursor.x = lastCursor.x;\n\t\t\tscreenData.cursor.y = lastCursor.y;\n\t\t\tscreenData.angle = lastCursor.angle;\n\t\t}\n\n\t\tif( drawArgs[ 0 ] === \"N\" ) {\n\t\t\tisReturn = true;\n\t\t} else {\n\t\t\tlastCursor = {\n\t\t\t\t\"x\": screenData.cursor.x,\n\t\t\t\t\"y\": screenData.cursor.y,\n\t\t\t\t\"angle\": screenData.angle\n\t\t\t};\n\t\t}\n\n\t\tif( drawArgs[ 0 ] === \"B\" ) {\n\t\t\tisBlind = true;\n\t\t}\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n", "/**\n * Pi.js - Paint Module\n * \n * Flood fill algorithm with tolerance support\n * \n * @module modules/paint\n */\n\n\"use strict\";\n\nimport * as screenManager from \"../core/screen-manager\";\nimport * as colors from \"../core/colors\";\nimport * as utils from \"../core/utils\";\nimport * as renderer from \"../core/renderer\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\n// Initialize paint module\nexport function init() {\n\t// No initialization needed\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n// paint command\nscreenManager.addCommand( \"paint\", paint, [ \"x\", \"y\", \"fillColor\", \"tolerance\", \"boundaryColor\" ] );\nfunction paint( screenData, options ) {\n\tconst x = utils.getInt( options.x, null );\n\tconst y = utils.getInt( options.y, null );\n\tlet fillColor = options.fillColor;\n\tlet tolerance = utils.getFloat( options.tolerance, 1 );\n\tlet boundaryColor = options.boundaryColor;\n\n\tif( x === null || y === null ) {\n\t\tconst error = new TypeError( \"paint: Parameters x and y must be integers\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( tolerance < 0 || tolerance > 1 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"paint: Parameter tolerance must be a number between 0 and 1.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Get fill color\n\tfillColor = colors.getColorValueByRawInput( screenData, fillColor );\n\tif( fillColor === null ) {\n\t\tconst error = new RangeError( \"paint: Parameter fillColor is not a valid color format.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\trenderer.getImageData( screenData );\n\tconst data = screenData.imageData2;\n\tconst width = screenData.width;\n\tconst height = screenData.height;\n\n\t// Check if starting point is in bounds\n\tif( x < 0 || x >= width || y < 0 || y >= height ) {\n\t\treturn;\n\t}\n\n\t// Get the starting pixel color\n\tconst startIndex = ( y * width + x ) * 4;\n\tconst startR = data[ startIndex ];\n\tconst startG = data[ startIndex + 1 ];\n\tconst startB = data[ startIndex + 2 ];\n\tconst startA = data[ startIndex + 3 ];\n\n\t// Don't fill if the color is the same\n\tif(\n\t\tstartR === fillColor.r && startG === fillColor.g &&\n\t\tstartB === fillColor.b && startA === fillColor.a\n\t) {\n\t\treturn;\n\t}\n\n\t// Calculate tolerance threshold for color comparison\n\t// Using perceptual weights: [0.2, 0.68, 0.07, 0.05] for R, G, B, A\n\tconst weights = [ 0.2, 0.68, 0.07, 0.05 ];\n\tconst maxDifference = ( 255 * 255 ) * weights.reduce( ( a, b ) => a + b );\n\tconst toleranceThreshold = tolerance * ( 2 - tolerance ) * maxDifference;\n\n\t// Use Uint8Array for efficient visited pixel tracking\n\tconst visited = new Uint8Array( width * height );\n\n\t// BFS queue for flood fill - using head pointer for O(1) dequeue\n\tconst queue = [];\n\tqueue.push( { \"x\": x, \"y\": y } );\n\n\t// Mark starting pixel as visited\n\tvisited[ y * width + x ] = 1;\n\n\t// Define color comparison function based on fill mode (no conditionals in hot loop)\n\tlet shouldSkipPixel;\n\tif( boundaryColor !== null ) {\n\n\t\t// Boundary fill mode: skip pixels that match boundary color\n\t\tboundaryColor = colors.getColorValueByRawInput( screenData, boundaryColor );\n\t\tif( boundaryColor === null ) {\n\t\t\tconst error = new RangeError(\n\t\t\t\t\"paint: Parameter boundaryColor is not a valid color format.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tconst refColor = {\n\t\t\t\"r\": boundaryColor.r, \"g\": boundaryColor.g, \"b\": boundaryColor.b, \"a\": boundaryColor.a\n\t\t};\n\t\tshouldSkipPixel = ( pixelColor ) => {\n\t\t\tconst difference = utils.calcColorDifference( refColor, pixelColor, weights );\n\t\t\tconst similarity = maxDifference - difference;\n\t\t\treturn similarity >= toleranceThreshold;\n\t\t};\n\n\t} else {\n\n\t\t// Flood fill mode: skip pixels that don't match start color\n\t\tconst startColor = { \"r\": startR, \"g\": startG, \"b\": startB, \"a\": startA };\n\t\tshouldSkipPixel = ( pixelColor ) => {\n\t\t\tconst difference = utils.calcColorDifference( startColor, pixelColor, weights );\n\t\t\tconst similarity = maxDifference - difference;\n\t\t\treturn similarity < toleranceThreshold;\n\t\t};\n\t}\n\n\tlet head = 0;\n\twhile( head < queue.length ) {\n\n\t\t// Dequeue using head pointer (O(1) instead of O(n) with shift)\n\t\tconst pixel = queue[ head++ ];\n\t\tconst px = pixel.x;\n\t\tconst py = pixel.y;\n\t\tconst i = ( py * width + px ) * 4;\n\n\t\t// Get pixel color\n\t\tconst pixelColor = {\n\t\t\t\"r\": data[ i ], \"g\": data[ i + 1 ], \"b\": data[ i + 2 ], \"a\": data[ i + 3 ]\n\t\t};\n\n\t\t// Skip if color comparison fails\n\t\tif( shouldSkipPixel( pixelColor ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Fill this pixel using the current blend mode\n\t\tscreenData.blend( screenData, pixel.x, pixel.y, fillColor );\n\n\t\t// Add adjacent pixels to queue if not visited and in bounds\n\t\taddToQueue( queue, visited, px + 1, py, width, height );\n\t\taddToQueue( queue, visited, px - 1, py, width, height );\n\t\taddToQueue( queue, visited, px, py + 1, width, height );\n\t\taddToQueue( queue, visited, px, py - 1, width, height );\n\t}\n\n\trenderer.setImageDirty( screenData );\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Add pixel to queue if valid and not visited\nfunction addToQueue( queue, visited, x, y, width, height ) {\n\tif( x < 0 || x >= width || y < 0 || y >= height ) {\n\t\treturn;\n\t}\n\n\tconst index = y * width + x;\n\tif( visited[ index ] === 0 ) {\n\t\tvisited[ index ] = 1;\n\t\tqueue.push( { \"x\": x, \"y\": y } );\n\t}\n}\n", "/**\n * Pi.js - Images Module\n * \n * Image loading, sprites, and spritesheet management\n * \n * @module modules/images\n */\n\n\"use strict\";\n\nimport * as commands from \"../core/commands\";\nimport * as screenManager from \"../core/screen-manager\";\nimport * as utils from \"../core/utils\";\n\nconst m_images = {};\nlet m_imageCount = 0;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\n// Initialize images module\nexport function init() {\n\n\t// No initialization needed\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n// loadImage command\ncommands.addCommand( \"loadImage\", loadImage, [ \"src\", \"name\", \"onLoad\", \"onError\" ] );\nfunction loadImage( options ) {\n\tconst src = options.src;\n\tlet name = options.name;\n\tconst onLoadCallback = options.onLoad;\n\tconst onErrorCallback = options.onError;\n\tconst srcErrMsg = \"loadImage: Parameter src must be a string URL, Image element, or Canvas \" +\n\t\t\"element.\";\n\n\t// Validate src parameter - can be string URL, Image element, or Canvas element\n\tif( typeof src === \"string\" ) {\n\t\tif( src === \"\" ) {\n\t\t\tconst error = new TypeError( srcErrMsg );\n\t\t\terror.code = \"INVALID_SRC\";\n\t\t\tthrow error;\n\t\t}\n\t} else if( src && typeof src === \"object\" ) {\n\t\tif( src.tagName !== \"IMG\" && src.tagName !== \"CANVAS\" ) {\n\t\t\tconst error = new TypeError( srcErrMsg );\n\t\t\terror.code = \"INVALID_SRC\";\n\t\t\tthrow error;\n\t\t}\n\t} else {\n\t\tconst error = new TypeError( srcErrMsg );\n\t\terror.code = \"INVALID_SRC\";\n\t\tthrow error;\n\t}\n\n\tif( name && typeof name !== \"string\" ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter name must be a string.\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\t// Generate a name if none is provided\n\tif( !name || name === \"\" ) {\n\t\tm_imageCount += 1;\n\t\tname = \"\" + m_imageCount;\n\t}\n\n\tif( m_images[ name ] ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter name must be unique.\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\t// Validate callbacks if provided\n\tif( onLoadCallback != null && !utils.isFunction( onLoadCallback ) ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter onLoad must be a function.\" );\n\t\terror.code = \"INVALID_CALLBACK\";\n\t\tthrow error;\n\t}\n\n\tif( onErrorCallback != null && !utils.isFunction( onErrorCallback ) ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter onError must be a function.\" );\n\t\terror.code = \"INVALID_CALLBACK\";\n\t\tthrow error;\n\t}\n\n\tlet img;\n\n\t// Handle Image or Canvas element passed directly\n\tif( typeof src !== \"string\" ) {\n\n\t\t// Use the element directly\n\t\timg = src;\n\n\t\t// Store immediately since element is already loaded\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"ready\",\n\t\t\t\"type\": \"image\",\n\t\t\t\"image\": img,\n\t\t\t\"width\": img.width,\n\t\t\t\"height\": img.height\n\t\t};\n\n\t\t// Call user callback if provided\n\t\tif( onLoadCallback ) {\n\t\t\tonLoadCallback( img );\n\t\t}\n\n\t\treturn name;\n\t}\n\n\t// Handle string URL - requires async loading\n\tm_images[ name ] = { \"status\": \"loading\" };\n\n\timg = new Image();\n\n\t// Set up handlers before setting src\n\t// Increment wait count for ready() - will be decremented in onload/onerror\n\tcommands.wait();\n\n\timg.onload = function() {\n\n\t\t// Store the loaded image\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"ready\",\n\t\t\t\"type\": \"image\",\n\t\t\t\"image\": img,\n\t\t\t\"width\": img.width,\n\t\t\t\"height\": img.height\n\t\t};\n\n\t\t// Call user callback if provided\n\t\tif( onLoadCallback ) {\n\t\t\tonLoadCallback( img );\n\t\t}\n\n\t\t// Decrement wait count\n\t\tcommands.done();\n\t};\n\n\timg.onerror = function( error ) {\n\n\t\t// Mark image as failed\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"error\",\n\t\t\t\"error\": error\n\t\t};\n\n\t\t// Call user error callback if provided\n\t\tif( onErrorCallback ) {\n\t\t\tonErrorCallback( error );\n\t\t}\n\n\t\t// Decrement wait count even on error\n\t\tcommands.done();\n\t};\n\n\t// Set source - may trigger onload synchronously if cached\n\timg.src = src;\n\n\treturn name;\n}\n\n// loadSpritesheet command\ncommands.addCommand(\n\t\"loadSpritesheet\", loadSpritesheet, [ \"src\", \"name\", \"width\", \"height\", \"margin\" ]\n);\nfunction loadSpritesheet( options ) {\n\tconst src = options.src;\n\tlet name = options.name;\n\tlet spriteWidth = options.width;\n\tlet spriteHeight = options.height;\n\tlet margin = options.margin;\n\tlet isAuto = false;\n\n\tif( margin == null ) {\n\t\tmargin = 0;\n\t}\n\n\tif( spriteWidth == null && spriteHeight == null ) {\n\t\tisAuto = true;\n\t\tspriteWidth = 0;\n\t\tspriteHeight = 0;\n\t\tmargin = 0;\n\t} else {\n\t\tspriteWidth = Math.round( spriteWidth );\n\t\tspriteHeight = Math.round( spriteHeight );\n\t\tmargin = Math.round( margin );\n\t}\n\n\t// Validate spriteWidth and spriteHeight for fixed mode\n\tif( !isAuto && ( !Number.isInteger( spriteWidth ) || !Number.isInteger( spriteHeight ) ) ) {\n\t\tconst error = new TypeError( \"loadSpriteSheet: width and height must be integers.\" );\n\t\terror.code = \"INVALID_DIMENSIONS\";\n\t\tthrow error;\n\t}\n\n\t// Size cannot be less than 1\n\tif( !isAuto && ( spriteWidth < 1 || spriteHeight < 1 ) ) {\n\t\tconst error = new RangeError(\n\t\t\t\"loadSpriteSheet: width and height must be greater than 0.\"\n\t\t);\n\t\terror.code = \"INVALID_DIMENSIONS\";\n\t\tthrow error;\n\t}\n\n\t// Validate margin\n\tif( !Number.isInteger( margin ) ) {\n\t\tconst error = new TypeError( \"loadSpriteSheet: margin must be an integer.\" );\n\t\terror.code = \"INVALID_MARGIN\";\n\t\tthrow error;\n\t}\n\n\t// Generate a name if none is provided\n\tif( !name || name === \"\" ) {\n\t\tm_imageCount += 1;\n\t\tname = \"\" + m_imageCount;\n\t}\n\n\t// Load the image first, then process frames in callback\n\tloadImage( {\n\t\t\"src\": src,\n\t\t\"name\": name,\n\t\t\"onLoad\": function() {\n\n\t\t\t// Update the image data to spritesheet type\n\t\t\tconst imageData = m_images[ name ];\n\t\t\timageData.type = \"spritesheet\";\n\t\t\timageData.spriteWidth = spriteWidth;\n\t\t\timageData.spriteHeight = spriteHeight;\n\t\t\timageData.margin = margin;\n\t\t\timageData.frames = [];\n\t\t\timageData.isAuto = isAuto;\n\n\t\t\tconst width = imageData.image.width;\n\t\t\tconst height = imageData.image.height;\n\n\t\t\tif( isAuto ) {\n\n\t\t\t\t// Auto-detect sprites using connected component analysis\n\t\t\t\tprocessSpriteSheetAuto( imageData, width, height );\n\t\t\t} else {\n\n\t\t\t\t// Fixed grid of sprites\n\t\t\t\tprocessSpriteSheetFixed( imageData, width, height );\n\t\t\t}\n\t\t}\n\t} );\n\n\treturn name;\n}\n\n\n// removeImage command\ncommands.addCommand( \"removeImage\", removeImage, [ \"name\" ] );\nfunction removeImage( options ) {\n\tconst name = options.name;\n\n\tif( typeof name !== \"string\" ) {\n\t\tconst error = new TypeError( \"removeImage: name must be a string.\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\tdelete m_images[ name ];\n}\n\n// getImage command - captures region of screen as an image\nscreenManager.addCommand( \"getImage\", getImage, [ \"name\", \"x1\", \"y1\", \"x2\", \"y2\" ] );\nfunction getImage( screenData, options ) {\n\tlet name = options.name;\n\tconst x1 = Math.round( options.x1 );\n\tconst y1 = Math.round( options.y1 );\n\tconst x2 = Math.round( options.x2 );\n\tconst y2 = Math.round( options.y2 );\n\n\tif( isNaN( x1 ) || isNaN( y1 ) || isNaN( x2 ) || isNaN( y2 ) ) {\n\t\tconst error = new TypeError( \"getImage: parameters x1, x2, y1, y2 must be integers.\" );\n\t\terror.code = \"INVALID_COORDINATES\";\n\t\tthrow error;\n\t}\n\n\t// Generate a name if none is provided\n\tif( !name || name === \"\" ) {\n\t\tm_imageCount += 1;\n\t\tname = \"\" + m_imageCount;\n\t} else if( typeof name !== \"string\" ) {\n\t\tconst error = new TypeError( \"getImage: name must be a string.\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t} else if( m_images[ name ] ) {\n\t\tconst error = new Error( `getImage: name \"${name}\" is already used; name must be unique.` );\n\t\terror.code = \"DUPLICATE_NAME\";\n\t\tthrow error;\n\t}\n\n\tconst canvas = document.createElement( \"canvas\" );\n\tconst context = canvas.getContext( \"2d\" );\n\tconst width = Math.abs( x1 - x2 );\n\tconst height = Math.abs( y1 - y2 );\n\tcanvas.width = width;\n\tcanvas.height = height;\n\tscreenData.api.render();\n\tcontext.drawImage( screenData.canvas, x1, y1, width, height, 0, 0, width, height );\n\n\tm_images[ name ] = {\n\t\t\"status\": \"ready\",\n\t\t\"image\": canvas,\n\t\t\"type\": \"image\",\n\t\t\"width\": width,\n\t\t\"height\": height\n\t};\n\n\treturn name;\n}\n\n// getSpritesheetData command\nscreenManager.addCommand( \"getSpritesheetData\", getSpritesheetData, [ \"name\" ] );\nfunction getSpritesheetData( screenData, options ) {\n\tconst name = options.name;\n\n\t// Validate name\n\tif( !m_images[ name ] ) {\n\t\tconst error = new Error( \"getSpritesheetData: invalid sprite name\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\tconst sprite = m_images[ name ];\n\n\tif( sprite.type !== \"spritesheet\" ) {\n\t\tconst error = new Error( \"getSpritesheetData: image is not a spritesheet\" );\n\t\terror.code = \"NOT_A_SPRITESHEET\";\n\t\tthrow error;\n\t}\n\n\tconst spriteData = {\n\t\t\"frameCount\": sprite.frames.length,\n\t\t\"frames\": []\n\t};\n\n\tfor( let i = 0; i < sprite.frames.length; i++ ) {\n\t\tspriteData.frames.push( {\n\t\t\t\"index\": i,\n\t\t\t\"x\": sprite.frames[ i ].x,\n\t\t\t\"y\": sprite.frames[ i ].y,\n\t\t\t\"width\": sprite.frames[ i ].width,\n\t\t\t\"height\": sprite.frames[ i ].height,\n\t\t\t\"left\": sprite.frames[ i ].x,\n\t\t\t\"top\": sprite.frames[ i ].y,\n\t\t\t\"right\": sprite.frames[ i ].right,\n\t\t\t\"bottom\": sprite.frames[ i ].bottom\n\t\t} );\n\t}\n\n\treturn spriteData;\n}\n\n// drawImage command\nscreenManager.addCommand(\n\t\"drawImage\",\n\tdrawImage,\n\t[ \"name\", \"x\", \"y\", \"angle\", \"anchorX\", \"anchorY\", \"alpha\", \"scaleX\", \"scaleY\" ]\n);\nfunction drawImage( screenData, options ) {\n\tconst name = options.name;\n\tconst x = options.x || 0;\n\tconst y = options.y || 0;\n\tconst angle = options.angle;\n\tconst anchorX = options.anchorX;\n\tconst anchorY = options.anchorY;\n\tconst alpha = options.alpha;\n\tconst scaleX = options.scaleX;\n\tconst scaleY = options.scaleY;\n\n\tlet image;\n\n\tif( typeof name === \"string\" ) {\n\n\t\t// Handle string image name\n\t\tif( !m_images[ name ] ) {\n\t\t\tconst error = new Error(\n\t\t\t\t`drawImage: Image \"${name}\" not found.`\n\t\t\t);\n\t\t\terror.code = \"IMAGE_NOT_FOUND\";\n\t\t\tthrow error;\n\t\t}\n\t\n\t\tconst imageData = m_images[ name ];\n\t\n\t\tif( imageData.status === \"loading\" ) {\n\t\t\tconst error = new Error(\n\t\t\t\t`drawImage: Image \"${name}\" is still loading. Use $.ready() to wait for it.`\n\t\t\t);\n\t\t\terror.code = \"IMAGE_NOT_READY\";\n\t\t\tthrow error;\n\t\t}\n\t\n\t\tif( imageData.status === \"error\" ) {\n\t\t\tconst error = new Error( `drawImage: Image \"${name}\" failed to load.` );\n\t\t\terror.code = \"IMAGE_LOAD_FAILED\";\n\t\t\tthrow error;\n\t\t}\n\n\t\timage = imageData.image;\n\t} else if( name && typeof name === \"object\" ) {\n\n\t\t// Handle screen API object\n\t\tif( name.screen === true ) {\n\t\t\timage = name.canvas();\n\t\t\tif( !image ) {\n\t\t\t\tconst error = new Error( \"drawImage: Screen has no canvas.\" );\n\t\t\t\terror.code = \"INVALID_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t} else if( name.tagName === \"CANVAS\" || name.tagName === \"IMG\" ) {\n\n\t\t\t// Handle Canvas or Image element\n\t\t\timage = name;\n\t\t} else {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"drawImage: Parameter name must be a string, screen object, Canvas element, \" +\n\t\t\t\t\"or Image element.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_NAME\";\n\t\t\tthrow error;\n\t\t}\n\t} else {\n\t\tconst error = new TypeError(\n\t\t\t\"drawImage: Parameter name must be a string, screen object, Canvas element, \" +\n\t\t\t\"or Image element.\"\n\t\t);\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\tif( isNaN( x ) || isNaN( y ) ) {\n\t\tconst error = new TypeError( \"drawImage: parameters x and y must be numbers\" );\n\t\terror.code = \"INVALID_COORDINATES\";\n\t\tthrow error;\n\t}\n\n\tdrawItem(\n\t\tscreenData, image, x, y, angle, anchorX, anchorY, alpha, null, scaleX, scaleY\n\t);\n}\n\n// drawSprite command\nscreenManager.addCommand(\n\t\"drawSprite\", drawSprite,\n\t[ \"name\", \"frame\", \"x\", \"y\", \"angle\", \"anchorX\", \"anchorY\", \"alpha\", \"scaleX\", \"scaleY\" ]\n);\nfunction drawSprite( screenData, options ) {\n\tconst name = options.name;\n\tconst frame = options.frame || 0;\n\tconst x = options.x || 0;\n\tconst y = options.y || 0;\n\tconst angle = options.angle;\n\tconst anchorX = options.anchorX;\n\tconst anchorY = options.anchorY;\n\tconst alpha = options.alpha;\n\tconst scaleX = options.scaleX;\n\tconst scaleY = options.scaleY;\n\n\t// Validate name\n\tif( !m_images[ name ] ) {\n\t\tconst error = new Error( \"drawSprite: invalid sprite name\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\tconst spriteData = m_images[ name ];\n\n\t// Validate it's a spritesheet\n\tif( spriteData.type !== \"spritesheet\" ) {\n\t\tconst error = new Error( \"drawSprite: image is not a spritesheet\" );\n\t\terror.code = \"NOT_A_SPRITESHEET\";\n\t\tthrow error;\n\t}\n\n\t// Validate frame\n\tif( !Number.isInteger( frame ) || frame >= spriteData.frames.length || frame < 0 ) {\n\t\tconst error = new RangeError( \"drawSprite: frame number is not valid\" );\n\t\terror.code = \"INVALID_FRAME\";\n\t\tthrow error;\n\t}\n\n\tif( isNaN( x ) || isNaN( y ) ) {\n\t\tconst error = new TypeError( \"drawSprite: parameters x and y must be numbers\" );\n\t\terror.code = \"INVALID_COORDINATES\";\n\t\tthrow error;\n\t}\n\n\tconst img = spriteData.image;\n\tconst frameData = spriteData.frames[ frame ];\n\n\tdrawItem( screenData, img, x, y, angle, anchorX, anchorY, alpha, frameData, scaleX, scaleY );\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Shared function to draw images and sprites with transformations\nfunction drawItem(\n\tscreenData, img, x, y, angle, anchorX, anchorY, alpha, frameData, scaleX, scaleY\n) {\n\n\t// Default values for scale\n\tif( scaleX == null || isNaN( Number( scaleX ) ) ) {\n\t\tscaleX = 1;\n\t}\n\n\tif( scaleY == null || isNaN( Number( scaleY ) ) ) {\n\t\tscaleY = 1;\n\t}\n\n\t// Default value for angle\n\tif( angle == null ) {\n\t\tangle = 0;\n\t}\n\n\t// Convert angle from degrees to radians\n\tangle = utils.degreesToRadian( angle );\n\n\t// Default values for anchor\n\tif( !anchorX ) {\n\t\tanchorX = 0;\n\t}\n\tif( !anchorY ) {\n\t\tanchorY = 0;\n\t}\n\n\t// Default value for alpha\n\tif( !alpha && alpha !== 0 ) {\n\t\talpha = 255;\n\t}\n\n\t// Calculate anchor position in pixels\n\tif( frameData ) {\n\t\tanchorX = Math.round( frameData.width * anchorX );\n\t\tanchorY = Math.round( frameData.height * anchorY );\n\t} else {\n\t\tanchorX = Math.round( img.width * anchorX );\n\t\tanchorY = Math.round( img.height * anchorY );\n\t}\n\n\tconst context = screenData.context;\n\n\t// Save current alpha\n\tconst oldAlpha = context.globalAlpha;\n\tcontext.globalAlpha = ( alpha / 255 );\n\n\t// Render any pending changes\n\tscreenData.api.render();\n\n\t// Apply transformations\n\tcontext.translate( x, y );\n\tcontext.rotate( angle );\n\tcontext.scale( scaleX, scaleY );\n\n\t// Draw image or sprite frame\n\tif( frameData == null ) {\n\n\t\t// Draw full image\n\t\tcontext.drawImage( img, -anchorX, -anchorY );\n\t} else {\n\n\t\t// Draw sprite frame\n\t\tcontext.drawImage(\n\t\t\timg,\n\t\t\tframeData.x,\n\t\t\tframeData.y,\n\t\t\tframeData.width,\n\t\t\tframeData.height,\n\t\t\t-anchorX,\n\t\t\t-anchorY,\n\t\t\tframeData.width,\n\t\t\tframeData.height\n\t\t);\n\t}\n\n\t// Restore transformations\n\tcontext.scale( 1 / scaleX, 1 / scaleY );\n\tcontext.rotate( -angle );\n\tcontext.translate( -x, -y );\n\n\t// Restore alpha\n\tcontext.globalAlpha = oldAlpha;\n}\n\n// Process spritesheet with fixed grid dimensions\nfunction processSpriteSheetFixed( imageData, width, height ) {\n\tlet x1 = imageData.margin;\n\tlet y1 = imageData.margin;\n\tlet x2 = x1 + imageData.spriteWidth;\n\tlet y2 = y1 + imageData.spriteHeight;\n\n\t// Loop through all the frames in a grid pattern\n\twhile( y2 <= height - imageData.margin ) {\n\t\twhile( x2 <= width - imageData.margin ) {\n\t\t\timageData.frames.push( {\n\t\t\t\t\"x\": x1,\n\t\t\t\t\"y\": y1,\n\t\t\t\t\"width\": imageData.spriteWidth,\n\t\t\t\t\"height\": imageData.spriteHeight,\n\t\t\t\t\"right\": x1 + imageData.spriteWidth - 1,\n\t\t\t\t\"bottom\": y1 + imageData.spriteHeight - 1\n\t\t\t} );\n\t\t\tx1 += imageData.spriteWidth + imageData.margin;\n\t\t\tx2 = x1 + imageData.spriteWidth;\n\t\t}\n\t\tx1 = imageData.margin;\n\t\tx2 = x1 + imageData.spriteWidth;\n\t\ty1 += imageData.spriteHeight + imageData.margin;\n\t\ty2 = y1 + imageData.spriteHeight;\n\t}\n}\n\n// Process spritesheet with auto-detection (finds connected pixel clusters)\nfunction processSpriteSheetAuto( imageData, width, height ) {\n\n\t// Create canvas to read pixel data\n\tconst canvas = document.createElement( \"canvas\" );\n\tcanvas.width = width;\n\tcanvas.height = height;\n\tconst context = canvas.getContext( \"2d\", { \"willReadFrequently\": true } );\n\tcontext.drawImage( imageData.image, 0, 0 );\n\n\tconst data = context.getImageData( 0, 0, width, height ).data;\n\tconst searched = new Uint8Array( width * height );\n\n\t// 8-directional neighbors\n\tconst dirs = [\n\t\t[ -1, -1 ], [ 0, -1 ], [ 1, -1 ],\n\t\t[ -1,  0 ],            [ 1,  0 ],\n\t\t[ -1,  1 ], [ 0,  1 ], [ 1,  1 ]\n\t];\n\n\t// Find clusters of non-transparent pixels\n\tfor( let i = 3; i < data.length; i += 4 ) {\n\t\tif( data[ i ] > 0 ) {\n\t\t\tconst index = ( i - 3 ) / 4;\n\t\t\tconst x1 = index % width;\n\t\t\tconst y1 = Math.floor( index / width );\n\t\t\tconst pixelIndex = y1 * width + x1;\n\n\t\t\t// Skip if already searched\n\t\t\tif( searched[ pixelIndex ] ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Find bounding box of this cluster\n\t\t\tconst frameData = {\n\t\t\t\t\"x\": width,\n\t\t\t\t\"y\": height,\n\t\t\t\t\"width\": 0,\n\t\t\t\t\"height\": 0,\n\t\t\t\t\"right\": 0,\n\t\t\t\t\"bottom\": 0\n\t\t\t};\n\n\t\t\t// BFS to find all connected pixels\n\t\t\tconst queue = [];\n\t\t\tqueue.push( { \"x\": x1, \"y\": y1 } );\n\t\t\tsearched[ pixelIndex ] = 1;\n\n\t\t\tlet head = 0;\n\t\t\twhile( head < queue.length ) {\n\t\t\t\tconst pixel = queue[ head++ ];\n\t\t\t\tconst px = pixel.x;\n\t\t\t\tconst py = pixel.y;\n\n\t\t\t\t// Update bounding box\n\t\t\t\tframeData.x = Math.min( frameData.x, px );\n\t\t\t\tframeData.y = Math.min( frameData.y, py );\n\t\t\t\tframeData.right = Math.max( frameData.right, px );\n\t\t\t\tframeData.bottom = Math.max( frameData.bottom, py );\n\n\t\t\t\t// Check all 8 neighbors\n\t\t\t\tfor( const dir of dirs ) {\n\t\t\t\t\tconst nx = px + dir[ 0 ];\n\t\t\t\t\tconst ny = py + dir[ 1 ];\n\n\t\t\t\t\t// Skip if out of bounds\n\t\t\t\t\tif( nx < 0 || nx >= width || ny < 0 || ny >= height ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst nIndex = ny * width + nx;\n\n\t\t\t\t\t// Skip if already searched\n\t\t\t\t\tif( searched[ nIndex ] ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if pixel is non-transparent\n\t\t\t\t\tconst dataIndex = nIndex * 4;\n\t\t\t\t\tif( data[ dataIndex + 3 ] > 0 ) {\n\t\t\t\t\t\tsearched[ nIndex ] = 1;\n\t\t\t\t\t\tqueue.push( { \"x\": nx, \"y\": ny } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Calculate final dimensions\n\t\t\tframeData.width = frameData.right - frameData.x + 1;\n\t\t\tframeData.height = frameData.bottom - frameData.y + 1;\n\n\t\t\t// Only add frames larger than 4 pixels (filters out noise)\n\t\t\tif( ( frameData.width + frameData.height ) > 4 ) {\n\t\t\t\timageData.frames.push( frameData );\n\t\t\t}\n\t\t}\n\t}\n}\n", "/**\n * Pi.js - Font Module\n * \n * Font loading, management, and character data\n * \n * @module modules/font\n */\n\n\"use strict\";\n\nimport * as commands from \"../core/commands\";\nimport * as screenManager from \"../core/screen-manager\";\nimport * as utils from \"../core/utils\";\n\nconst m_fonts = [];\nconst m_fontBitmaps = {};\nlet m_defaultFont = null;\nlet m_nextFontId = 0;\nlet m_nextFontBitmapId = 0;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\n// Initialize font module\nexport function init() {\n\tscreenManager.addScreenDataItemGetter( \"font\", () => m_defaultFont );\n}\n\nexport function getFontBitmap( bitmapId ) {\n\treturn m_fontBitmaps[ bitmapId ];\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n// loadFont command\ncommands.addCommand(\n\t\"loadFont\", loadFont, [ \"fontSrc\", \"width\", \"height\", \"charSet\", \"isEncoded\" ]\n);\nfunction loadFont( options ) {\n\tconst fontSrc = options.fontSrc;\n\tconst width = Math.round( options.width );\n\tconst height = Math.round( options.height );\n\tlet charSet = options.charSet;\n\tconst isEncoded = !!options.isEncoded;\n\n\tif( isNaN( width ) || isNaN( height ) ) {\n\t\tconst error = new TypeError( \"loadFont: width and height must be integers.\" );\n\t\terror.code = \"INVALID_DIMENSIONS\";\n\t\tthrow error;\n\t}\n\n\t// Default charset to 0 to 255\n\tif( !charSet ) {\n\t\tcharSet = [];\n\t\tfor( let i = 0; i < 256; i += 1 ) {\n\t\t\tcharSet.push( i );\n\t\t}\n\t}\n\n\tif( !( Array.isArray( charSet ) || typeof charSet === \"string\" ) ) {\n\t\tconst error = new TypeError( \"loadFont: charSet must be an array or a string.\" );\n\t\terror.code = \"INVALID_CHARSET\";\n\t\tthrow error;\n\t}\n\n\t// Convert charSet to array of integers (character codes)\n\tif( typeof charSet === \"string\" ) {\n\t\tconst temp = [];\n\t\tfor( let i = 0; i < charSet.length; i += 1 ) {\n\t\t\ttemp.push( charSet.charCodeAt( i ) );\n\t\t}\n\t\tcharSet = temp;\n\t}\n\n\t// Build chars lookup map\n\tconst chars = {};\n\tfor( let i = 0; i < charSet.length; i += 1 ) {\n\t\tchars[ charSet[ i ] ] = i;\n\t}\n\n\t// Create font object\n\tconst font = {\n\t\t\"id\": m_nextFontId,\n\t\t\"width\": width,\n\t\t\"height\": height,\n\t\t\"data\": [],\n\t\t\"chars\": chars,\n\t\t\"charSet\": charSet,\n\t\t\"mode\": isEncoded ? \"pixel\" : \"bitmap\",\n\t\t\"bitmapId\": null\n\t};\n\n\t// Add to fonts array\n\tm_fonts[ font.id ] = font;\n\tm_nextFontId += 1;\n\n\tif( isEncoded ) {\n\n\t\t// Decompress base32-encoded font data\n\t\tfont.data = decompressFont( fontSrc, width, height );\n\t} else {\n\n\t\t// Load from image source\n\t\tloadFontFromImage( fontSrc, font );\n\t}\n\n\treturn font.id;\n}\n\n// setDefaultFont command\ncommands.addCommand( \"setDefaultFont\", setDefaultFont, [ \"fontId\" ] );\nfunction setDefaultFont( options ) {\n\tconst fontId = parseInt( options.fontId );\n\n\tif( isNaN( fontId ) || fontId < 0 || !m_fonts[ fontId ] ) {\n\t\tconst error = new RangeError( \"setDefaultFont: invalid fontId\" );\n\t\terror.code = \"INVALID_FONT_ID\";\n\t\tthrow error;\n\t}\n\n\tm_defaultFont = m_fonts[ fontId ];\n}\n\n// setFont command\nscreenManager.addCommand( \"setFont\", setFont, [ \"font\" ] );\nfunction setFont( screenData, options ) {\n\tconst fontInput = options.font;\n\n\tlet font;\n\n\t// Check if this is a valid font\n\tif( typeof fontInput === \"string\" ) {\n\t\tscreenData.context.font = fontInput;\n\t\tscreenData.context.textBaseline = \"top\";\n\t\tfont = {\n\t\t\t\"name\": screenData.context.font,\n\t\t\t\"width\": 10,\n\t\t\t\"height\": 10,\n\t\t\t\"mode\": \"canvas\"\n\t\t};\n\t} else if( m_fonts[ fontInput ] ) {\n\t\tfont = m_fonts[ fontInput ];\n\t} else {\n\t\tconst error = new RangeError( \"setFont: invalid fontId\" );\n\t\terror.code = \"INVALID_FONT_ID\";\n\t\tthrow error;\n\t}\n\n\t// Set the screenData font and print cursor\n\tscreenData.font = font;\n\tupdatePrintCursorDimensions( screenData );\n}\n\n// setFontSize command\nscreenManager.addCommand( \"setFontSize\", setFontSize, [ \"width\", \"height\" ] );\nfunction setFontSize( screenData, options ) {\n\tif( screenData.font.mode !== \"bitmap\" ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setFontSize: only bitmap fonts can change sizes. Load a bitmap font before setting \" +\n\t\t\t\"the font size.\"\n\t\t);\n\t\terror.code = \"INVALID_SIZE\";\n\t\tthrow error;\n\t}\n\n\tconst width = utils.getInt( options.width, null );\n\tconst height = utils.getInt( options.height, null );\n\n\tif( !width || width < 1 || !height || height < 1 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setFontSize: width and height must be an integer greater than 0\"\n\t\t);\n\t\terror.code = \"INVALID_SIZE\";\n\t\tthrow error;\n\t}\n\n\tscreenData.font.width = width;\n\tscreenData.font.height = height;\n\n\t// Update print cursor dimensions\n\tupdatePrintCursorDimensions( screenData );\n}\n\n// getAvailableFonts command\ncommands.addCommand( \"getAvailableFonts\", getAvailableFonts, [] );\nfunction getAvailableFonts() {\n\tconst fonts = [];\n\tfor( let i = 0; i < m_fonts.length; i++ ) {\n\t\tif( m_fonts[ i ] ) {\n\t\t\tfonts.push( {\n\t\t\t\t\"id\": m_fonts[ i ].id,\n\t\t\t\t\"width\": m_fonts[ i ].width,\n\t\t\t\t\"height\": m_fonts[ i ].height,\n\t\t\t\t\"mode\": m_fonts[ i ].mode\n\t\t\t} );\n\t\t}\n\t}\n\treturn fonts;\n}\n\n// setChar command - allows custom character bitmaps\nscreenManager.addCommand( \"setChar\", setChar, [ \"charCode\", \"data\" ] );\nfunction setChar( screenData, options ) {\n\tlet charCode = options.charCode;\n\tlet data = options.data;\n\n\t// Convert string to char code\n\tif( typeof charCode === \"string\" ) {\n\t\tcharCode = charCode.charCodeAt( 0 );\n\t} else {\n\t\tcharCode = utils.getInt( charCode, null );\n\t\tif( charCode === null ) {\n\t\t\tconst error = new TypeError( \"setChar: charCode must be an integer or a string\" );\n\t\t\terror.code = \"INVALID_CHAR_CODE\";\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tconst font = screenData.font;\n\n\tif( !Array.isArray( data ) ) {\n\t\tif( typeof data === \"string\" ) {\n\t\t\tdata = utils.hexToData( data, font.width, font.height );\n\t\t} else {\n\t\t\tconst error = new TypeError( \"setChar: data must be a 2D array or an encode string\" );\n\t\t\terror.code = \"INVALID_DATA\";\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Validate data dimensions match font\n\tif( data.length !== font.height ) {\n\t\tconst error = new RangeError(\n\t\t\t`setChar: data height (${data.length}) must match font height (${font.height})`\n\t\t);\n\t\terror.code = \"INVALID_DATA_HEIGHT\";\n\t\tthrow error;\n\t}\n\n\t// Validate data items\n\tfor( let i = 0; i < data.length; i++ ) {\n\t\tif( !Array.isArray( data[ i ] ) || data[ i ].length !== font.width ) {\n\t\t\tconst error = new RangeError(\n\t\t\t\t`setChar: data width at row ${i} must match font width (${font.width})`\n\t\t\t);\n\t\t\terror.code = \"INVALID_DATA_WIDTH\";\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Get character index in font\n\tconst charIndex = font.chars[ charCode ];\n\tif( charIndex === undefined ) {\n\t\tconst error = new RangeError( \"setChar: character not in font character set\" );\n\t\terror.code = \"CHAR_NOT_IN_FONT\";\n\t\tthrow error;\n\t}\n\n\t// Set the character data\n\tfont.data[ charIndex ] = data;\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Update print cursor rows and columns based on font and size\nfunction updatePrintCursorDimensions( screenData ) {\n\tconst font = screenData.font;\n\n\tif( font.mode === \"canvas\" ) {\n\n\t\t// Measure the actual size of the font by actually drawing the font on a temp canvas and\n\t\t// checking the color values\n\t\tconst tempSize = Math.round( screenData.context.measureText( \"M\" ).width * 2 );\n\t\tconst tempCanvas = document.createElement( \"canvas\" );\n\t\ttempCanvas.width = tempSize;\n\t\ttempCanvas.height = tempSize;\n\t\tconst tempContext = tempCanvas.getContext( \"2d\", { \"willReadFrequently\": true } );\n\t\ttempContext.font = screenData.context.font;\n\t\ttempContext.textBaseline = \"top\";\n\t\ttempContext.fillStyle = \"#FF0000\";\n\n\t\t// Fill some text with characters at a fixed spot\n\t\tconst tempMessage = \"WHMGLIyzjpgl_|,.\";\n\t\tfor( const c of tempMessage ) {\n\t\t\ttempContext.fillText( c, 0, 0 );\n\t\t}\n\n\t\t// Loop through the tempCanvas pixel data\n\t\tlet minX = Infinity;\n\t\tlet maxX = 0;\n\t\tlet minY = Infinity;\n\t\tlet maxY = 0;\n\t\tconst data = tempContext.getImageData( 0, 0, tempSize, tempSize ).data;\n\t\tfor( let y = 0; y < tempSize; y++ ) {\n\t\t\tfor( let x = 0; x < tempSize; x++ ) {\n\t\t\t\tconst index = (y * tempSize + x) * 4;\n\t\t\t\tif( data[ index ] === 255 ) {\n\t\t\t\t\tminX = Math.min( x, minX );\n\t\t\t\t\tmaxX = Math.max( x, maxX );\n\t\t\t\t\tminY = Math.min( y, minY );\n\t\t\t\t\tmaxY = Math.max( y, maxY );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tscreenData.font.width = maxX - minX;\n\t\tscreenData.font.height = maxY - minY;\n\t}\n\n\tscreenData.printCursor.cols = Math.floor( screenData.width / screenData.font.width );\n\tscreenData.printCursor.rows = Math.floor( screenData.height / screenData.font.height );\n}\n\n// Decompress base32-encoded font data\nfunction decompressFont( numStr, width, height ) {\n\tconst size = 32;\n\tconst base = 32;\n\tlet bin = \"\";\n\tconst data = [];\n\n\tnumStr = \"\" + numStr;\n\tconst nums = numStr.split( \",\" );\n\n\t// Loop through all the base-32 numbers\n\tfor( let i = 0; i < nums.length; i++ ) {\n\n\t\t// Convert base-32 string to binary string\n\t\tlet num = parseInt( nums[ i ], base ).toString( 2 );\n\n\t\t// Pad the front with 0's so that num has length of 32\n\t\twhile( num.length < size ) {\n\t\t\tnum = \"0\" + num;\n\t\t}\n\n\t\t// Add to the binary string\n\t\tbin += num;\n\t}\n\n\t// Loop through all the bits and build character data\n\tlet i = 0;\n\tif( bin.length % size > 0 ) {\n\t\tconsole.warn( \"loadFont: Invalid font data.\" );\n\t\treturn data;\n\t}\n\n\twhile( i < bin.length ) {\n\n\t\t// Push a new character onto data\n\t\tdata.push( [] );\n\n\t\t// Store the index of the font character\n\t\tconst index = data.length - 1;\n\n\t\t// Loop through all rows\n\t\tfor( let y = 0; y < height; y += 1 ) {\n\n\t\t\t// Push a new row onto the character data\n\t\t\tdata[ index ].push( [] );\n\n\t\t\t// Loop through columns in this row\n\t\t\tfor( let x = 0; x < width; x += 1 ) {\n\n\t\t\t\tlet num;\n\t\t\t\tif( i >= bin.length ) {\n\t\t\t\t\tnum = 0;\n\t\t\t\t} else {\n\t\t\t\t\tnum = parseInt( bin[ i ] );\n\t\t\t\t\tif( isNaN( num ) ) {\n\t\t\t\t\t\tnum = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Push the bit onto the character\n\t\t\t\tdata[ index ][ y ].push( num );\n\n\t\t\t\t// Increment the bit position\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn data;\n}\n\n// Load font from image source\nfunction loadFontFromImage( fontSrc, font ) {\n\tlet img;\n\n\tconst bitmap = {\n\t\t\"image\": null,\n\t\t\"width\": font.width,\n\t\t\"height\": font.height\n\t};\n\n\tif( typeof fontSrc === \"string\" ) {\n\n\t\t// Create a new image\n\t\timg = new Image();\n\n\t\t// Increment wait count\n\t\tcommands.wait();\n\n\t\timg.onload = function() {\n\t\t\tbitmap.image = img;\n\t\t\tcommands.done();\n\t\t};\n\n\t\timg.onerror = function( err ) {\n\t\t\tconsole.warn( \"loadFont: unable to load image for font.\" );\n\t\t\tcommands.done();\n\t\t};\n\n\t\t// Set source after handlers\n\t\timg.src = fontSrc;\n\t} else if( fontSrc instanceof HTMLImageElement ) {\n\n\t\t// Use image element directly\n\t\tbitmap.image = fontSrc;\n\t} else {\n\t\tconst error = new TypeError( \"loadFont: fontSrc must be a string or Image element.\" );\n\t\terror.code = \"INVALID_FONT_SRC\";\n\t\tthrow error;\n\t}\n\t\n\t// Set the bitmapId\n\tfont.bitmapId = m_nextFontBitmapId;\n\tm_nextFontBitmapId += 1;\n\n\t// Set the bitmap object\n\tm_fontBitmaps[ font.bitmapId ] = bitmap;\n\n}\n\n", "/**\n * Pi.js - Print Module\n * \n * Text printing, cursor positioning, and word wrapping\n * \n * @module modules/print\n */\n\n\"use strict\";\n\nimport * as screenManager from \"../core/screen-manager\";\nimport * as renderer from \"../core/renderer\";\nimport * as fontModule from \"./font\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\n// Initialize print module\nexport function init() {\n\tscreenManager.addScreenDataItem( \"printCursor\", {\n\t\t\"x\": 0,\n\t\t\"y\": 0,\n\t\t\"cols\": 0,\n\t\t\"rows\": 0,\n\t\t\"breakWord\": true\n\t} );\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n// TODO: add printf command that has format printing that allows for colors, spacing, variable \n// injection and maybe more formating stuff. Research other languages like c/c++ and others.\n\n\n// print command\nscreenManager.addCommand( \"print\", print, [ \"msg\", \"isInline\", \"isCentered\" ] );\nfunction print( screenData, options ) {\n\tlet msg = options.msg;\n\tconst isInline = !!options.isInline;\n\tconst isCentered = !!options.isCentered;\n\n\t// Bail if not possible to print an entire line on screen\n\tif( screenData.font.height > screenData.height ) {\n\t\treturn;\n\t}\n\n\tif( msg === undefined || msg === null ) {\n\t\tmsg = \"\";\n\t} else if( typeof msg !== \"string\" ) {\n\t\tmsg = \"\" + msg;\n\t}\n\n\t// Replace tabs with spaces\n\tmsg = msg.replace( /\\t/g, \"    \" );\n\n\t// Split messages by newlines\n\tconst parts = msg.split( /\\n/ );\n\tfor( let i = 0; i < parts.length; i++ ) {\n\t\tstartPrint( screenData, parts[ i ], isInline, isCentered );\n\t}\n}\n\n// setPos command - Set cursor position by row/column\nscreenManager.addCommand( \"setPos\", setPos, [ \"col\", \"row\" ] );\nfunction setPos( screenData, options ) {\n\tconst col = options.col;\n\tconst row = options.row;\n\n\t// Set the x value\n\tif( col != null ) {\n\t\tif( isNaN( col ) ) {\n\t\t\tconst error = new TypeError( \"setPos: parameter col must be a number\" );\n\t\t\terror.code = \"INVALID_COL\";\n\t\t\tthrow error;\n\t\t}\n\t\tlet x = Math.floor( col * screenData.font.width );\n\t\tif( x > screenData.width ) {\n\t\t\tx = screenData.width - screenData.font.width;\n\t\t}\n\t\tscreenData.printCursor.x = x;\n\t}\n\n\t// Set the y value\n\tif( row != null ) {\n\t\tif( isNaN( row ) ) {\n\t\t\tconst error = new TypeError( \"setPos: parameter row must be a number\" );\n\t\t\terror.code = \"INVALID_ROW\";\n\t\t\tthrow error;\n\t\t}\n\t\tlet y = Math.floor( row * screenData.font.height );\n\t\tif( y > screenData.height ) {\n\t\t\ty = screenData.height - screenData.font.height;\n\t\t}\n\t\tscreenData.printCursor.y = y;\n\t}\n}\n\n// setPosPx command - Set cursor position by pixels\nscreenManager.addCommand( \"setPosPx\", setPosPx, [ \"x\", \"y\" ] );\nfunction setPosPx( screenData, options ) {\n\tconst x = options.x;\n\tconst y = options.y;\n\n\tif( x != null ) {\n\t\tif( isNaN( x ) ) {\n\t\t\tconst error = new TypeError( \"setPosPx: parameter x must be a number\" );\n\t\t\terror.code = \"INVALID_X\";\n\t\t\tthrow error;\n\t\t}\n\t\tscreenData.printCursor.x = Math.round( x );\n\t}\n\n\tif( y != null ) {\n\t\tif( isNaN( y ) ) {\n\t\t\tconst error = new TypeError( \"setPosPx: parameter y must be a number\" );\n\t\t\terror.code = \"INVALID_Y\";\n\t\t\tthrow error;\n\t\t}\n\t\tscreenData.printCursor.y = Math.round( y );\n\t}\n}\n\n// getPos command - Get cursor position as row/column\nscreenManager.addCommand( \"getPos\", getPos, [] );\nfunction getPos( screenData ) {\n\treturn {\n\t\t\"col\": Math.floor(\n\t\t\tscreenData.printCursor.x / screenData.font.width\n\t\t),\n\t\t\"row\": Math.floor(\n\t\t\tscreenData.printCursor.y / screenData.font.height\n\t\t)\n\t};\n}\n\n// getPosPx command - Get cursor position in pixels\nscreenManager.addCommand( \"getPosPx\", getPosPx, [] );\nfunction getPosPx( screenData ) {\n\treturn {\n\t\t\"x\": screenData.printCursor.x,\n\t\t\"y\": screenData.printCursor.y\n\t};\n}\n\n// getCols command - Get number of columns\nscreenManager.addCommand( \"getCols\", getCols, [] );\nfunction getCols( screenData ) {\n\treturn screenData.printCursor.cols;\n}\n\n// getRows command - Get number of rows\nscreenManager.addCommand( \"getRows\", getRows, [] );\nfunction getRows( screenData ) {\n\treturn screenData.printCursor.rows;\n}\n\n// setWordBreak command - Enable/disable word breaking\nscreenManager.addCommand( \"setWordBreak\", setWordBreak, [ \"isEnabled\" ] );\nfunction setWordBreak( screenData, options ) {\n\tscreenData.printCursor.breakWord = !!options.isEnabled;\n}\n\n// piCalcWidth command - Calculate text width for pixel fonts\nscreenManager.addCommand( \"piCalcWidth\", piCalcWidth, [ \"msg\" ] );\nfunction piCalcWidth( screenData, options ) {\n\tconst msg = options.msg || \"\";\n\treturn screenData.font.width * msg.length;\n}\n\n// canvasCalcWidth command - Calculate text width for canvas fonts\nscreenManager.addCommand( \"canvasCalcWidth\", canvasCalcWidth, [ \"msg\" ] );\nfunction canvasCalcWidth( screenData, options ) {\n\tconst msg = options.msg || \"\";\n\treturn screenData.context.measureText( msg ).width;\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Start printing text\nfunction startPrint( screenData, msg, isInline, isCentered ) {\n\tconst printCursor = screenData.printCursor;\n\tconst font = screenData.font;\n\n\t// Calculate text width\n\tconst width = calcWidth( screenData, msg );\n\n\t// Handle centering\n\tif( isCentered ) {\n\t\tprintCursor.x = Math.floor( ( printCursor.cols - msg.length ) / 2 ) * font.width;\n\t}\n\n\t// Handle text wrapping if text is too wide\n\tif(\n\t\t!isInline &&\n\t\t!isCentered &&\n\t\twidth + printCursor.x > screenData.width &&\n\t\tmsg.length > 1\n\t) {\n\t\tconst overlap = ( width + printCursor.x ) - screenData.width;\n\t\tconst onScreen = width - overlap;\n\t\tconst onScreenPct = onScreen / width;\n\t\tlet msgSplit = Math.floor( msg.length * onScreenPct );\n\t\tlet msg1 = msg.substring( 0, msgSplit );\n\t\tlet msg2 = msg.substring( msgSplit, msg.length );\n\n\t\t// Word breaking\n\t\tif( printCursor.breakWord ) {\n\t\t\tconst index = msg1.lastIndexOf( \" \" );\n\t\t\tif( index > -1 ) {\n\t\t\t\tmsg2 = msg1.substring( index ).trim() + msg2;\n\t\t\t\tmsg1 = msg1.substring( 0, index );\n\t\t\t}\n\t\t}\n\n\t\tstartPrint( screenData, msg1, isInline, isCentered );\n\t\tstartPrint( screenData, msg2, isInline, isCentered );\n\t\treturn;\n\t}\n\n\t// Handle auto-scroll if text is too tall\n\tif( printCursor.y + font.height > screenData.height ) {\n\n\t\t// Render canvas fonts before scrolling\n\t\tif( font.mode === \"canvas\" ) {\n\t\t\tscreenData.api.render();\n\t\t}\n\n\t\t// Shift image up by font height\n\t\tshiftImageUp( screenData, font.height );\n\n\t\t// Move cursor up\n\t\tprintCursor.y -= font.height;\n\t}\n\n\t// Call the appropriate print function based on font mode\n\tif( font.mode === \"pixel\" ) {\n\t\tpiPrint( screenData, msg, printCursor.x, printCursor.y );\n\t} else if( font.mode === \"bitmap\" ) {\n\t\tbitmapPrint( screenData, msg, printCursor.x, printCursor.y );\n\t} else if( font.mode === \"canvas\" ) {\n\t\tcanvasPrint( screenData, msg, printCursor.x, printCursor.y );\n\t}\n\n\t// Advance cursor position\n\tif( !isInline ) {\n\t\tprintCursor.y += font.height;\n\t\tprintCursor.x = 0;\n\t} else {\n\t\tprintCursor.x += font.width * msg.length;\n\t\tif( printCursor.x > screenData.width - font.width ) {\n\t\t\tprintCursor.x = 0;\n\t\t\tprintCursor.y += font.height;\n\t\t}\n\t}\n}\n\n// Shift screen image up by yOffset pixels\nfunction shiftImageUp( screenData, yOffset ) {\n\tif( yOffset <= 0 ) {\n\t\treturn;\n\t}\n\n\t// Get the image data\n\trenderer.getImageData( screenData );\n\n\t// Loop through all pixels after the yOffset\n\tfor( let y = yOffset; y < screenData.height; y++ ) {\n\t\tfor( let x = 0; x < screenData.width; x++ ) {\n\n\t\t\t// Get the index of the source and destination pixels\n\t\t\tconst iDest = ( ( screenData.width * y ) + x ) * 4;\n\t\t\tconst iSrc = ( ( screenData.width * ( y - yOffset ) ) + x ) * 4;\n\n\t\t\t// Move the pixel up\n\t\t\tconst data = screenData.imageData2;\n\t\t\tdata[ iSrc ] = data[ iDest ];\n\t\t\tdata[ iSrc + 1 ] = data[ iDest + 1 ];\n\t\t\tdata[ iSrc + 2 ] = data[ iDest + 2 ];\n\t\t\tdata[ iSrc + 3 ] = data[ iDest + 3 ];\n\t\t}\n\t}\n\n\t// Clear the bottom pixels\n\tfor( let y = screenData.height - yOffset; y < screenData.height; y++ ) {\n\t\tfor( let x = 0; x < screenData.width; x++ ) {\n\t\t\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\t\t\tscreenData.imageData2[ i ] = 0;\n\t\t\tscreenData.imageData2[ i + 1 ] = 0;\n\t\t\tscreenData.imageData2[ i + 2 ] = 0;\n\t\t\tscreenData.imageData2[ i + 3 ] = 0;\n\t\t}\n\t}\n\n\trenderer.setImageDirty( screenData );\n}\n\n// Calculate text width based on font mode\nfunction calcWidth( screenData, msg ) {\n\tconst font = screenData.font;\n\tif( font.mode === \"canvas\" ) {\n\t\treturn screenData.context.measureText( msg ).width;\n\t}\n\treturn font.width * msg.length;\n}\n\n// Print using pixel font data (base32-encoded fonts)\nfunction piPrint( screenData, msg, x, y ) {\n\tconst font = screenData.font;\n\n\t// Setup a temporary palette with the fore color and transparent\n\tconst defaultPal = screenData.pal;\n\tscreenData.pal = [ screenData.pal[ 0 ], screenData.color ];\n\n\t// Loop through each character in the message\n\tfor( let i = 0; i < msg.length; i++ ) {\n\n\t\t// Get the character index for the character data\n\t\tconst charIndex = font.chars[ msg.charCodeAt( i ) ];\n\n\t\t// Draw the character on the screen using put\n\t\tif( charIndex !== undefined ) {\n\t\t\tscreenData.api.put( font.data[ charIndex ], x + font.width * i, y );\n\t\t}\n\t}\n\n\t// Reset the palette to the default\n\tscreenData.pal = defaultPal;\n}\n\n// Print using canvas text rendering\nfunction canvasPrint( screenData, msg, x, y ) {\n\tscreenData.api.render();\n\tscreenData.context.fillText( msg, x, y );\n\n\t// Invalidate cached image data since we drew directly to canvas\n\tscreenData.imageData = null;\n}\n\n// Print using bitmap font image\nfunction bitmapPrint( screenData, msg, x, y ) {\n\tscreenData.api.render();\n\n\tconst font = screenData.font;\n\tconst bitmap = fontModule.getFontBitmap( font.bitmapId );\n\tif( !bitmap ) {\n\t\tconst error = new TypeError( \"print: font bitmap not found\" );\n\t\terror.code = \"FONT_BITMAP_NOT_FOUND\";\n\t\tthrow error;\n\t}\n\n\tconst bitmapWidth = bitmap.image.width;\n\t\n\t// Get the source width & height of bitmap characters\n\tconst sw = bitmap.width;\n\tconst sh = bitmap.height;\n\tconst columns = Math.floor( bitmapWidth / sw );\n\n\t// Loop through each character in the message\n\tfor( let i = 0; i < msg.length; i++ ) {\n\n\t\t// Get the character index for the character data\n\t\tconst charIndex = font.chars[ msg.charCodeAt( i ) ];\n\n\t\tif( charIndex !== undefined ) {\n\n\t\t\t// Get the source x & y coordinates\n\t\t\tconst sx = ( charIndex % columns ) * sw;\n\t\t\tconst sy = Math.floor( charIndex / columns ) * sh;\n\n\t\t\t// Get the destination x coordinate\n\t\t\tconst dx = x + font.width * i;\n\n\t\t\t// Draw the character on the screen\n\t\t\tscreenData.context.drawImage(\n\t\t\t\tbitmap.image,\n\t\t\t\tsx, sy, sw, sh,\n\t\t\t\tdx, y, font.width, font.height\n\t\t\t);\n\t\t}\n\t}\n\n\t// Invalidate cached image data since we drew directly to canvas\n\tscreenData.imageData = null;\n}\n\n", "/**\n * Pi.js - Sound Module\n * \n * Sound effects, audio pools, and volume control using Web Audio API.\n * \n * @module modules/sound\n */\n\n\"use strict\";\n\nimport * as commands from \"../core/commands.js\";\nimport * as utils from \"../core/utils.js\";\n\nlet m_audioContext = null;\nlet m_audioPools = {};\nlet m_nextAudioId = 0;\nlet m_soundPool = {};\nlet m_nextSoundId = 0;\nlet m_volume = 0.75;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init() {\n\n\t// Volume is stored globally, not per-screen\n\t// No additional initialization needed\n}\n\n/**\n * Stop a sound by ID (internal function for play module)\n * \n * @param {string} soundId - Sound ID to stop\n */\nexport function stopSoundById( soundId ) {\n\tif( m_soundPool[ soundId ] ) {\n\t\tm_soundPool[ soundId ].oscillator.stop( 0 );\n\t}\n}\n\n/**\n * Create a sound using Web Audio API (internal function exported for play module)\n * \n * @param {AudioContext} audioContext - Audio context\n * @param {number} frequency - Frequency in Hz\n * @param {number} volume - Volume (0-1)\n * @param {number} attackTime - Attack time in seconds\n * @param {number} sustainTime - Sustain time in seconds\n * @param {number} decayTime - Decay time in seconds\n * @param {number} stopTime - Total sound duration\n * @param {string} oType - Oscillator type\n * @param {Array} waveTables - Custom wave tables (if oType is \"custom\")\n * @param {number} delay - Delay before playing\n * @returns {string} Sound ID\n */\nexport function createSound(\n\taudioContext, frequency, volume, attackTime, sustainTime,\n\tdecayTime, stopTime, oType, waveTables, delay\n) {\n\tconst oscillator = audioContext.createOscillator();\n\tconst envelope = audioContext.createGain();\n\tconst master = audioContext.createGain();\n\n\tmaster.gain.value = m_volume;\n\toscillator.frequency.value = frequency;\n\n\t// Set oscillator type\n\tif( oType === \"custom\" ) {\n\t\tconst real = waveTables[ 0 ];\n\t\tconst imag = waveTables[ 1 ];\n\t\tconst wave = audioContext.createPeriodicWave( real, imag );\n\t\toscillator.setPeriodicWave( wave );\n\t} else {\n\t\toscillator.type = oType;\n\t}\n\n\t// Set initial envelope gain\n\tif( attackTime === 0 ) {\n\t\tenvelope.gain.value = volume;\n\t} else {\n\t\tenvelope.gain.value = 0;\n\t}\n\n\t// Connect audio nodes\n\toscillator.connect( envelope );\n\tenvelope.connect( master );\n\tmaster.connect( audioContext.destination );\n\n\tconst currentTime = audioContext.currentTime + delay;\n\n\t// Set attack envelope\n\tif( attackTime > 0 ) {\n\t\tenvelope.gain.setValueCurveAtTime(\n\t\t\tnew Float32Array( [ 0, volume ] ),\n\t\t\tcurrentTime,\n\t\t\tattackTime\n\t\t);\n\t}\n\n\t// Set sustain envelope\n\tif( sustainTime > 0 ) {\n\t\tenvelope.gain.setValueCurveAtTime(\n\t\t\tnew Float32Array( [ volume, 0.8 * volume ] ),\n\t\t\tcurrentTime + attackTime,\n\t\t\tsustainTime\n\t\t);\n\t}\n\n\t// Set decay envelope\n\tif( decayTime > 0 ) {\n\t\tenvelope.gain.setValueCurveAtTime(\n\t\t\tnew Float32Array( [ 0.8 * volume, 0.1 * volume, 0 ] ),\n\t\t\tcurrentTime + attackTime + sustainTime,\n\t\t\tdecayTime\n\t\t);\n\t}\n\n\t// Start and stop oscillator\n\toscillator.start( currentTime );\n\toscillator.stop( currentTime + stopTime );\n\n\t// Add to sound pool\n\tconst soundId = \"sound_\" + m_nextSoundId;\n\tm_nextSoundId += 1;\n\tm_soundPool[ soundId ] = {\n\t\t\"oscillator\": oscillator,\n\t\t\"master\": master,\n\t\t\"audioContext\": audioContext\n\t};\n\n\t// Auto-cleanup when done\n\tsetTimeout( () => {\n\t\tdelete m_soundPool[ soundId ];\n\t}, ( currentTime + stopTime ) * 1000 );\n\n\treturn soundId;\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n/**\n * Create an audio pool for playing multiple instances of the same sound file\n * \n * @param {Object} options - Command options\n * @param {string} options.src - Audio file URL\n * @param {number} options.poolSize - Number of audio instances (default: 1)\n * @returns {string} Audio pool ID for use with playAudioPool\n */\ncommands.addCommand( \"createAudioPool\", createAudioPool, [ \"src\", \"poolSize\" ] );\nfunction createAudioPool( options ) {\n\tconst src = options.src;\n\tlet poolSize = utils.getInt( options.poolSize, 1 );\n\n\t// Validate src\n\tif( !src || typeof src !== \"string\" ) {\n\t\tconst error = new TypeError( \"createAudioPool: Parameter src must be a non-empty string.\" );\n\t\terror.code = \"INVALID_SRC\";\n\t\tthrow error;\n\t}\n\n\t// Validate poolSize\n\tif( poolSize < 1 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"createAudioPool: Parameter poolSize must be an integer greater than 0.\"\n\t\t);\n\t\terror.code = \"INVALID_POOL_SIZE\";\n\t\tthrow error;\n\t}\n\n\t// Create the audio pool item\n\tconst audioItem = {\n\t\t\"pool\": [],\n\t\t\"index\": 0\n\t};\n\n\t// Create each audio instance in the pool\n\tfor( let i = 0; i < poolSize; i++ ) {\n\t\tconst audio = new Audio( src );\n\t\tloadAudio( audioItem, audio );\n\t}\n\n\t// Generate unique ID for this pool\n\tconst audioId = \"audioPool_\" + m_nextAudioId;\n\tm_audioPools[ audioId ] = audioItem;\n\tm_nextAudioId += 1;\n\n\treturn audioId;\n}\n\n/**\n * Delete an audio pool and free its resources\n * \n * @param {Object} options - Command options\n * @param {string} options.audioId - Audio pool ID returned from createAudioPool\n */\ncommands.addCommand( \"deleteAudioPool\", deleteAudioPool, [ \"audioId\" ] );\nfunction deleteAudioPool( options ) {\n\tconst audioId = options.audioId;\n\n\t// Validate audioId\n\tif( !m_audioPools[ audioId ] ) {\n\t\tconst error = new Error( `deleteAudioPool: Audio pool \"${audioId}\" not found.` );\n\t\terror.code = \"AUDIO_POOL_NOT_FOUND\";\n\t\tthrow error;\n\t}\n\n\t// Stop all audio and clear timeouts in the pool\n\tfor( let i = 0; i < m_audioPools[ audioId ].pool.length; i++ ) {\n\t\tconst poolItem = m_audioPools[ audioId ].pool[ i ];\n\t\tpoolItem.audio.pause();\n\t\tclearTimeout( poolItem.timeout );\n\t}\n\n\t// Delete the pool\n\tdelete m_audioPools[ audioId ];\n}\n\n/**\n * Play audio from an audio pool\n * \n * @param {Object} options - Command options\n * @param {string} options.audioId - Audio pool ID\n * @param {number} options.volume - Volume (0-1, default: 1)\n * @param {number} options.startTime - Start time in seconds (default: 0)\n * @param {number} options.duration - Play duration in seconds (default: 0 = play full)\n */\ncommands.addCommand(\n\t\"playAudioPool\", playAudioPool, [ \"audioId\", \"volume\", \"startTime\", \"duration\" ]\n);\nfunction playAudioPool( options ) {\n\tconst audioId = options.audioId;\n\tconst volume = utils.getFloat( options.volume, 1 );\n\tconst startTime = utils.getFloat( options.startTime, 0 );\n\tconst duration = utils.getFloat( options.duration, 0 );\n\n\t// Validate audioId\n\tif( !m_audioPools[ audioId ] ) {\n\t\tconst error = new Error( `playAudioPool: Audio pool \"${audioId}\" not found.` );\n\t\terror.code = \"AUDIO_POOL_NOT_FOUND\";\n\t\tthrow error;\n\t}\n\n\t// Validate volume\n\tif( volume < 0 || volume > 1 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"playAudioPool: Parameter volume must be a number between 0 and 1.\"\n\t\t);\n\t\terror.code = \"INVALID_VOLUME\";\n\t\tthrow error;\n\t}\n\n\t// Validate startTime\n\tif( startTime < 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"playAudioPool: Parameter startTime must be a number greater than or equal to 0.\"\n\t\t);\n\t\terror.code = \"INVALID_START_TIME\";\n\t\tthrow error;\n\t}\n\n\t// Validate duration\n\tif( duration < 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"playAudioPool: Parameter duration must be a number greater than or equal to 0.\"\n\t\t);\n\t\terror.code = \"INVALID_DURATION\";\n\t\tthrow error;\n\t}\n\n\t// Get the audio pool\n\tconst audioItem = m_audioPools[ audioId ];\n\n\t// Make sure pool has sounds loaded\n\tif( audioItem.pool.length === 0 ) {\n\t\tconst error = new Error( \"playAudioPool: Audio pool has no sounds loaded.\" );\n\t\terror.code = \"EMPTY_POOL\";\n\t\tthrow error;\n\t}\n\n\t// Get the next audio player from the pool\n\tconst poolItem = audioItem.pool[ audioItem.index ];\n\tconst audio = poolItem.audio;\n\n\t// Set volume and start time\n\taudio.volume = m_volume * volume;\n\tpoolItem.volume = volume;\n\taudio.currentTime = startTime;\n\n\t// Set duration if specified\n\tif( duration > 0 ) {\n\t\tclearTimeout( poolItem.timeout );\n\t\tpoolItem.timeout = setTimeout( () => {\n\t\t\taudio.pause();\n\t\t\taudio.currentTime = 0;\n\t\t}, duration * 1000 );\n\t}\n\n\t// Play the sound\n\taudio.play();\n\n\t// Move to next sound in pool (round-robin)\n\taudioItem.index += 1;\n\tif( audioItem.index >= audioItem.pool.length ) {\n\t\taudioItem.index = 0;\n\t}\n}\n\n/**\n * Stop audio from an audio pool or all audio pools\n * \n * @param {Object} options - Command options\n * @param {string} options.audioId - Audio pool ID (null to stop all pools)\n */\ncommands.addCommand( \"stopAudioPool\", stopAudioPool, [ \"audioId\" ] );\nfunction stopAudioPool( options ) {\n\tconst audioId = options.audioId;\n\n\t// If no audioId, stop all audio pools\n\tif( audioId == null ) {\n\t\tfor( const poolId in m_audioPools ) {\n\t\t\tfor( let j = 0; j < m_audioPools[ poolId ].pool.length; j++ ) {\n\t\t\t\tconst poolItem = m_audioPools[ poolId ].pool[ j ];\n\t\t\t\tpoolItem.audio.pause();\n\t\t\t\tclearTimeout( poolItem.timeout );\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\t// Validate audioId\n\tif( !m_audioPools[ audioId ] ) {\n\t\tconst error = new Error( `stopAudioPool: Audio pool \"${audioId}\" not found.` );\n\t\terror.code = \"AUDIO_POOL_NOT_FOUND\";\n\t\tthrow error;\n\t}\n\n\t// Stop all audio and clear timeouts in the specified pool\n\tfor( let i = 0; i < m_audioPools[ audioId ].pool.length; i++ ) {\n\t\tconst poolItem = m_audioPools[ audioId ].pool[ i ];\n\t\tpoolItem.audio.pause();\n\t\tclearTimeout( poolItem.timeout );\n\t}\n}\n\n/**\n * Play a sound by frequency using Web Audio API\n * \n * @param {Object} options - Command options\n * @param {number} options.frequency - Frequency in Hz\n * @param {number} options.duration - Duration in seconds (default: 1)\n * @param {number} options.volume - Volume 0-1 (default: 1)\n * @param {string|Array} options.oType - Oscillator type or custom wave table (default: \"triangle\")\n * @param {number} options.delay - Delay before playing in seconds (default: 0)\n * @param {number} options.attack - Attack time in seconds (default: 0)\n * @param {number} options.decay - Decay time in seconds (default: 0.1)\n * @returns {string} Sound ID for use with stopSound\n */\ncommands.addCommand( \"sound\", sound, [\n\t\"frequency\", \"duration\", \"volume\", \"oType\", \"delay\", \"attack\", \"decay\"\n] );\nfunction sound( options ) {\n\tconst frequency = Math.round( utils.getFloat( options.frequency, 440 ) );\n\tconst duration = utils.getFloat( options.duration, 1 );\n\tconst volume = utils.getFloat( options.volume, 1 );\n\tlet oType = options.oType != null ? options.oType : \"triangle\";\n\tconst delay = utils.getFloat( options.delay, 0 );\n\tconst attack = utils.getFloat( options.attack, 0 );\n\tconst decay = utils.getFloat( options.decay, 0.1 );\n\n\t// Validate duration\n\tif( duration < 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"sound: Parameter duration must be a number greater than or equal to 0.\"\n\t\t);\n\t\terror.code = \"INVALID_DURATION\";\n\t\tthrow error;\n\t}\n\n\t// Validate volume\n\tif( volume < 0 || volume > 1 ) {\n\t\tconst error = new RangeError( \"sound: Parameter volume must be a number between 0 and 1.\" );\n\t\terror.code = \"INVALID_VOLUME\";\n\t\tthrow error;\n\t}\n\n\t// Validate attack\n\tif( attack < 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"sound: Parameter attack must be a number greater than or equal to 0.\"\n\t\t);\n\t\terror.code = \"INVALID_ATTACK\";\n\t\tthrow error;\n\t}\n\n\t// Validate delay\n\tif( delay < 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"sound: Parameter delay must be a number greater than or equal to 0.\"\n\t\t);\n\t\terror.code = \"INVALID_DELAY\";\n\t\tthrow error;\n\t}\n\n\tlet waveTables = null;\n\n\t// Check for custom waveform (array)\n\tif( Array.isArray( oType ) ) {\n\t\tif(\n\t\t\toType.length !== 2 ||\n\t\t\toType[ 0 ].length === 0 ||\n\t\t\toType[ 1 ].length === 0 ||\n\t\t\toType[ 0 ].length !== oType[ 1 ].length\n\t\t) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"sound: Parameter oType array must contain two non-empty arrays of equal length.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_WAVE_TABLE\";\n\t\t\tthrow error;\n\t\t}\n\n\t\twaveTables = [];\n\n\t\t// Validate all values are numbers\n\t\tfor( let i = 0; i < oType.length; i++ ) {\n\t\t\tfor( let j = 0; j < oType[ i ].length; j++ ) {\n\t\t\t\tif( isNaN( oType[ i ][ j ] ) ) {\n\t\t\t\t\tconst error = new TypeError(\n\t\t\t\t\t\t\"sound: Parameter oType array must only contain numbers.\"\n\t\t\t\t\t);\n\t\t\t\t\terror.code = \"INVALID_WAVE_TABLE_VALUE\";\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t\twaveTables.push( new Float32Array( oType[ i ] ) );\n\t\t}\n\n\t\toType = \"custom\";\n\t} else if( typeof oType !== \"string\" ) {\n\t\tconst error = new TypeError( \"sound: Parameter oType must be a string or an array.\" );\n\t\terror.code = \"INVALID_OTYPE\";\n\t\tthrow error;\n\t} else {\n\n\t\t// Validate oType string\n\t\tconst validTypes = [ \"triangle\", \"sine\", \"square\", \"sawtooth\" ];\n\t\tif( validTypes.indexOf( oType ) === -1 ) {\n\t\t\tconst error = new Error(\n\t\t\t\t\"sound: Parameter oType must be one of: triangle, sine, square, sawtooth.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_OTYPE\";\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Create audio context if needed\n\tif( !m_audioContext ) {\n\t\tconst AudioContextClass = window.AudioContext || window.webkitAudioContext;\n\t\tm_audioContext = new AudioContextClass();\n\t}\n\n\t// Calculate stop time\n\tconst stopTime = attack + duration + decay;\n\n\treturn createSound(\n\t\tm_audioContext, frequency, volume, attack, duration,\n\t\tdecay, stopTime, oType, waveTables, delay\n\t);\n}\n\n/**\n * Stop a playing sound or all sounds\n * \n * @param {Object} options - Command options\n * @param {string} options.soundId - Sound ID (null to stop all sounds)\n */\ncommands.addCommand( \"stopSound\", stopSound, [ \"soundId\" ] );\nfunction stopSound( options ) {\n\tconst soundId = options.soundId;\n\n\t// If no soundId, stop all sounds\n\tif( soundId == null ) {\n\t\tfor( const id in m_soundPool ) {\n\t\t\tm_soundPool[ id ].oscillator.stop( 0 );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Validate soundId exists\n\tif( !m_soundPool[ soundId ] ) {\n\t\treturn;\n\t}\n\n\t// Stop the sound\n\tm_soundPool[ soundId ].oscillator.stop( 0 );\n}\n\n/**\n * Set global volume for all sounds\n * \n * @param {Object} options - Command options\n * @param {number} options.volume - Volume (0-1)\n */\ncommands.addCommand( \"setVolume\", setVolume, [ \"volume\" ] );\nfunction setVolume( options ) {\n\tconst volume = utils.getFloat( options.volume, 0.75 );\n\n\t// Validate volume\n\tif( volume < 0 || volume > 1 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setVolume: Parameter volume must be a number between 0 and 1.\"\n\t\t);\n\t\terror.code = \"INVALID_VOLUME\";\n\t\tthrow error;\n\t}\n\n\tm_volume = volume;\n\n\t// Update all active sounds\n\tfor( const soundId in m_soundPool ) {\n\t\tconst sound = m_soundPool[ soundId ];\n\t\tif( volume === 0 ) {\n\n\t\t\t// Use exponential ramp to near-zero, then set to zero\n\t\t\tsound.master.gain.exponentialRampToValueAtTime(\n\t\t\t\t0.01, sound.audioContext.currentTime + 0.1\n\t\t\t);\n\t\t\tsound.master.gain.setValueAtTime(\n\t\t\t\t0, sound.audioContext.currentTime + 0.11\n\t\t\t);\n\t\t} else {\n\t\t\tsound.master.gain.exponentialRampToValueAtTime(\n\t\t\t\tvolume, sound.audioContext.currentTime + 0.1\n\t\t\t);\n\t\t}\n\t}\n\n\t// Update all audio pools\n\tfor( const poolId in m_audioPools ) {\n\t\tfor( let j = 0; j < m_audioPools[ poolId ].pool.length; j++ ) {\n\t\t\tconst poolItem = m_audioPools[ poolId ].pool[ j ];\n\t\t\tpoolItem.audio.volume = m_volume * poolItem.volume;\n\t\t}\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n/**\n * Load an audio element and add to pool when ready\n * \n * @param {Object} audioItem - Audio pool item\n * @param {HTMLAudioElement} audio - Audio element\n * @param {number} retryCount - Number of retries remaining\n */\nfunction loadAudio( audioItem, audio, retryCount = 3 ) {\n\n\t// Audio ready callback\n\tfunction audioReady() {\n\t\taudioItem.pool.push( {\n\t\t\t\"audio\": audio,\n\t\t\t\"timeout\": 0,\n\t\t\t\"volume\": 1\n\t\t} );\n\t\taudio.removeEventListener( \"canplay\", audioReady );\n\t\tcommands.done();\n\t}\n\n\t// Audio error callback\n\tfunction audioError() {\n\t\tconst errors = [\n\t\t\t\"MEDIA_ERR_ABORTED - fetching process aborted by user\",\n\t\t\t\"MEDIA_ERR_NETWORK - error occurred when downloading\",\n\t\t\t\"MEDIA_ERR_DECODE - error occurred when decoding\",\n\t\t\t\"MEDIA_ERR_SRC_NOT_SUPPORTED - audio/video not supported\"\n\t\t];\n\n\t\tconst errorCode = audio.error.code;\n\t\tconst index = errorCode - 1;\n\n\t\tif( index >= 0 && index < errors.length ) {\n\t\t\tconsole.error( \"createAudioPool: \" + errors[ index ] );\n\n\t\t\t// Retry loading if retries remain\n\t\t\tif( retryCount > 0 ) {\n\t\t\t\tsetTimeout( () => {\n\t\t\t\t\taudio.removeEventListener( \"canplay\", audioReady );\n\t\t\t\t\taudio.removeEventListener( \"error\", audioError );\n\t\t\t\t\tconst newAudio = new Audio( audio.src );\n\t\t\t\t\tloadAudio( audioItem, newAudio, retryCount - 1 );\n\t\t\t\t}, 100 );\n\t\t\t} else {\n\t\t\t\tconsole.error( \"createAudioPool: Max retries exceeded for \" + audio.src );\n\t\t\t\tcommands.done();\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.error( \"createAudioPool: Unknown error - \" + errorCode );\n\t\t\tcommands.done();\n\t\t}\n\t}\n\n\t// Wait for audio to load (only on first attempt)\n\tif( retryCount === 3 ) {\n\t\tcommands.wait();\n\t}\n\n\t// Set up event listeners\n\taudio.addEventListener( \"canplay\", audioReady );\n\taudio.addEventListener( \"error\", audioError );\n}\n\n", "/**\n * Pi.js - Play Module\n * \n * BASIC-style music notation playback (inspired by QBasic PLAY command).\n * \n * @module modules/play\n */\n\n\"use strict\";\n\nimport * as commands from \"../core/commands.js\";\nimport * as utils from \"../core/utils.js\";\nimport { createSound, stopSoundById } from \"./sound.js\";\n\nconst m_tracks = {};\nconst m_allTracks = [];\nlet m_lastTrackId = 0;\nlet m_playData = [];\n\n// Note frequency data (in Hz) by note name and octave\nconst m_notesData = {\n\t\"A\": [ 27.50, 55.00, 110, 220, 440, 880, 1760, 3520, 7040, 14080 ],\n\t\"A#\": [ 29.14, 58.27, 116.541, 233.082, 466.164, 932.328, 1864.655, 3729.31, 7458.62, 14917.24 ],\n\t\"B\": [ 30.87, 61.74, 123.471, 246.942, 493.883, 987.767, 1975.533, 3951.066, 7902.132, 15804.264 ],\n\t\"C\": [ 16.35, 32.70, 65.41, 130.813, 261.626, 523.251, 1046.502, 2093.005, 4186.009, 8372.018 ],\n\t\"C#\": [ 17.32, 34.65, 69.296, 138.591, 277.183, 554.365, 1108.731, 2217.461, 4434.922, 8869.844 ],\n\t\"D\": [ 18.35, 36.71, 73.416, 146.832, 293.665, 587.33, 1174.659, 2349.318, 4698.636, 9397.272 ],\n\t\"D#\": [ 19.45, 38.89, 77.782, 155.563, 311.127, 622.254, 1244.508, 2489.016, 4978.032, 9956.064 ],\n\t\"E\": [ 20.60, 41.20, 82.407, 164.814, 329.628, 659.255, 1318.51, 2637.021, 5274.042, 10548.084 ],\n\t\"F\": [ 21.83, 43.65, 87.307, 174.614, 349.228, 698.456, 1396.913, 2793.826, 5587.652, 11175.304 ],\n\t\"F#\": [ 23.12, 46.25, 92.499, 184.997, 369.994, 739.989, 1479.978, 2959.955, 5919.91, 11839.82 ],\n\t\"G\": [ 24.50, 49.00, 97.999, 195.998, 391.995, 783.991, 1567.982, 3135.964, 6271.928, 12543.856 ],\n\t\"G#\": [ 25.96, 51.91, 103.826, 207.652, 415.305, 830.609, 1661.219, 3322.438, 6644.876, 13289.752 ]\n};\n\n// All notes by number (for N command)\nconst m_allNotes = [\n\t0, 16.35, 17.32, 18.35, 19.45, 20.60, 21.83, 23.12, 24.50, 25.96, 27.50, 29.14, 30.87, 32.70,\n\t34.65, 36.71, 38.89, 41.20, 43.65, 46.25, 49.00, 51.91, 55.00, 58.27, 61.74, 65.406, 69.296,\n\t73.416, 77.782, 82.407, 87.307, 92.499, 97.999, 103.826, 110, 116.541, 123.471, 130.813,\n\t138.591, 146.832, 155.563, 164.814, 174.614, 184.997, 195.998, 207.652, 220, 233.082, 246.942,\n\t261.626, 277.183, 293.665, 311.127, 329.628, 349.228, 369.994, 391.995, 415.305, 440, 466.164,\n\t493.883, 523.251, 554.365, 587.33, 622.254, 659.255, 698.456, 739.989, 783.991, 830.609, 880,\n\t932.328, 987.767, 1046.502, 1108.731, 1174.659, 1244.508, 1318.51, 1396.913, 1479.978, 1567.982,\n\t1661.219, 1760, 1864.655, 1975.533, 2093.005, 2217.461, 2349.318, 2489.016, 2637.021, 2793.826,\n\t2959.955, 3135.964, 3322.438, 3520, 3729.31, 3951.066, 4186.009, 4434.922, 4698.636, 4978.032,\n\t5274.042, 5587.652, 5919.91, 6271.928, 6644.876, 7040, 7458.62, 7902.132, 8372.018, 8869.844,\n\t9397.272, 9956.064, 10548.084, 11175.304, 11839.82, 13289.752, 14080, 14917.24, 15804.264\n];\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init() {\n\n\t// No initialization needed\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n/**\n * Play music using BASIC-style notation\n * \n * Format: \"NOTE[length][.][#|+|-] ...\"\n * - Notes: A-G (can include sharps # or +, flats -)\n * - Length: 1-64 (1=whole, 4=quarter, etc.)\n * - Dot modifiers: . (1.5x), .. (1.75x)\n * - Multiple tracks: separated by commas\n * \n * Commands:\n * - O[n]: Set octave (0-9)\n * - L[n]: Set default note length\n * - T[n]: Set tempo (32-255 BPM)\n * - V[n]: Set volume (0-100)\n * - P[n]: Pause for note length\n * - N[n]: Play note by number (0-127)\n * - W[type]: Set waveform (SINE, SQUARE, SAWTOOTH, TRIANGLE)\n * - MS: Staccato (75% of note length)\n * - MN: Normal (87.5% of note length)\n * - ML: Legato (100% of note length)\n * - MW: Toggle full note mode\n * - MO[n]: Modify octave offset\n * - MA[n]: Modify attack rate (0-100)\n * - MT[n]: Modify sustain rate (0-100)\n * - MD[n]: Modify decay rate (0-100)\n * - <: Decrease octave\n * - >: Increase octave\n * \n * @param {Object} options - Command options\n * @param {string} options.playString - Music notation string\n */\ncommands.addCommand( \"play\", play, [ \"playString\" ] );\nfunction play( options ) {\n\tlet playString = options.playString;\n\n\t// Validate playString\n\tif( typeof playString !== \"string\" ) {\n\t\tconst error = new TypeError( \"play: Parameter playString must be a string.\" );\n\t\terror.code = \"INVALID_PLAY_STRING\";\n\t\tthrow error;\n\t}\n\n\t// Create track from play string\n\tconst trackId = createTrack( playString );\n\n\t// Generate all play data\n\tm_playData = [];\n\tplayTrack( trackId );\n\n\t// Sort by time\n\tm_playData.sort( ( a, b ) => a.time - b.time );\n\n\t// Create audio context\n\tconst AudioContextClass = window.AudioContext || window.webkitAudioContext;\n\tconst audioContext = new AudioContextClass();\n\n\t// Create all sounds\n\tfor( let i = 0; i < m_playData.length; i++ ) {\n\t\tconst playData = m_playData[ i ];\n\t\tplayData.track.sounds.push(\n\t\t\tcreateSound(\n\t\t\t\taudioContext, playData.frequency, playData.volume, playData.attackTime,\n\t\t\t\tplayData.sustainTime, playData.decayTime, playData.stopTime, playData.oType,\n\t\t\t\tplayData.waveTables, playData.time\n\t\t\t)\n\t\t);\n\t}\n}\n\n/**\n * Stop playing music\n * \n * @param {Object} options - Command options\n * @param {number} options.trackId - Track ID to stop (null to stop all tracks)\n */\ncommands.addCommand( \"stopPlay\", stopPlay, [ \"trackId\" ] );\nfunction stopPlay( options ) {\n\tconst trackId = options.trackId;\n\n\t// Stop all tracks\n\tif( trackId === null ) {\n\t\tfor( let i = 0; i < m_allTracks.length; i++ ) {\n\t\t\tconst track = m_tracks[ m_allTracks[ i ] ];\n\t\t\tif( track ) {\n\t\t\t\tfor( let j = 0; j < track.sounds.length; j++ ) {\n\t\t\t\t\tstopSoundById( track.sounds[ j ] );\n\t\t\t\t}\n\t\t\t\tdelete m_tracks[ m_allTracks[ i ] ];\n\t\t\t}\n\t\t}\n\t\tm_allTracks.length = 0;\n\t\treturn;\n\t}\n\n\t// Stop specific track\n\tif( m_tracks[ trackId ] ) {\n\t\tconst track = m_tracks[ trackId ];\n\t\tfor( let j = 0; j < track.sounds.length; j++ ) {\n\t\t\tstopSoundById( track.sounds[ j ] );\n\t\t}\n\t\tremoveTrack( trackId );\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n/**\n * Create a track from a play string\n * \n * @param {string} playString - Music notation string\n * @returns {number} First track ID\n */\nfunction createTrack( playString ) {\n\tlet firstTrackId;\n\n\t// Convert to uppercase and remove spaces\n\tplayString = playString.split( /\\s+/ ).join( \"\" ).toUpperCase();\n\n\t// Find and extract wavetables\n\tconst waveTables = [];\n\tlet start = 0;\n\twhile( start > -1 ) {\n\t\tstart = playString.indexOf( \"[[\" );\n\t\tif( start > -1 ) {\n\t\t\tconst end = playString.indexOf( \"]]\", start );\n\t\t\twaveTables.push( playString.substring( start, end + 2 ) );\n\t\t\tconst i = waveTables.length - 1;\n\t\t\tplayString = playString.replace( waveTables[ i ], \"W\" + i );\n\t\t}\n\t}\n\n\t// Convert wavetables to arrays\n\tfor( let i = 0; i < waveTables.length; i++ ) {\n\t\twaveTables[ i ] = JSON.parse( waveTables[ i ] );\n\n\t\t// Validate wavetable\n\t\tif(\n\t\t\twaveTables[ i ].length !== 2 ||\n\t\t\twaveTables[ i ][ 0 ].length !== waveTables[ i ][ 1 ].length\n\t\t) {\n\t\t\tconsole.error(\n\t\t\t\t\"play: Wavetables must have 2 arrays of same length. Defaulting to triangle wave.\"\n\t\t\t);\n\t\t\twaveTables[ i ] = \"triangle\";\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Validate all values are numbers\n\t\tfor( let j = 0; j < 2; j++ ) {\n\t\t\tfor( let k = 0; k < waveTables[ i ][ j ].length; k++ ) {\n\t\t\t\twaveTables[ i ][ j ][ k ] = parseFloat( waveTables[ i ][ j ][ k ] );\n\t\t\t\tif( isNaN( waveTables[ i ][ j ][ k ] ) ) {\n\t\t\t\t\twaveTables[ i ][ j ][ k ] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\twaveTables[ i ][ j ] = new Float32Array( waveTables[ i ][ j ] );\n\t\t}\n\t}\n\n\t// Split tracks by commas\n\tconst trackStrings = playString.split( \",\" );\n\tconst trackIds = [];\n\n\t// Regular expression for parsing play commands\n\tconst regString =\n\t\t\"(?=WS|WQ|WW|WT|W\\\\d[\\\\d]?|V\\\\d|Q\\\\d|O\\\\d|\\\\<|\\\\>|N\\\\d\\\\d?|\" +\n\t\t\"L\\\\d\\\\d?|MS|MN|ML|MU\\\\d|MU\\\\-\\\\d|MK\\\\d[\\\\d]?[\\\\d]?|\" +\n\t\t\"MZ\\\\d[\\\\d]?[\\\\d]?|MX\\\\d[\\\\d]?[\\\\d]?|MY\\\\d[\\\\d]?[\\\\d]?|\" +\n\t\t\"MW|P[\\\\d]?|T\\\\d|\" +\n\t\t\"[[A|B|C|D|E|F|G][\\\\d]?[\\\\+|\\\\-|\\\\#|\\\\.\\\\.?]?)\";\n\tconst reg = new RegExp( regString );\n\n\tlet lastNote;\n\n\tfor( let i = 0; i < trackStrings.length; i++ ) {\n\n\t\t// Replace complex keywords with short symbols\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /SINE/g, \"WS\" );\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /SQUARE/g, \"WQ\" );\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /SAWTOOTH/g, \"WW\" );\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /TRIANGLE/g, \"WT\" );\n\n\t\t// Replace conflicting symbols\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /MD/g, \"MZ\" );\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /MA/g, \"MY\" );\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /MT/g, \"MX\" );\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /MO/g, \"MU\" );\n\n\t\t// Remove deprecated symbols\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /MB/g, \"\" );\n\t\ttrackStrings[ i ] = trackStrings[ i ].replace( /MF/g, \"\" );\n\n\t\t// Create track\n\t\tconst trackId = m_lastTrackId;\n\t\tif( firstTrackId === undefined ) {\n\t\t\tfirstTrackId = trackId;\n\t\t}\n\t\tm_lastTrackId += 1;\n\n\t\tm_tracks[ trackId ] = {\n\t\t\t\"id\": trackId,\n\t\t\t\"notes\": [],\n\t\t\t\"noteId\": 0,\n\t\t\t\"decayRate\": 0.20,\n\t\t\t\"attackRate\": 0.15,\n\t\t\t\"sustainRate\": 0.65,\n\t\t\t\"fullNote\": false,\n\t\t\t\"extra\": 1,\n\t\t\t\"space\": \"normal\",\n\t\t\t\"interval\": 0,\n\t\t\t\"time\": 0,\n\t\t\t\"simultaneousPlay\": i > 0,\n\t\t\t\"tempo\": 60 / 120,\n\t\t\t\"noteLength\": 0.25,\n\t\t\t\"pace\": 0.875,\n\t\t\t\"octave\": 4,\n\t\t\t\"octaveExtra\": 0,\n\t\t\t\"volume\": 1,\n\t\t\t\"trackIds\": trackIds,\n\t\t\t\"type\": \"triangle\",\n\t\t\t\"waveTables\": waveTables,\n\t\t\t\"sounds\": []\n\t\t};\n\t\tm_allTracks.push( trackId );\n\t\ttrackIds.push( trackId );\n\n\t\t// Mark previous note for simultaneous play\n\t\tif( i > 0 ) {\n\t\t\tlastNote.simultaneousPlay = trackId;\n\t\t}\n\n\t\t// Split track into command parts\n\t\tconst trackParts = trackStrings[ i ].split( reg );\n\n\t\tfor( let j = 0; j < trackParts.length; j++ ) {\n\t\t\tconst index = trackParts[ j ].indexOf( \"-\" );\n\n\t\t\t// Split minus symbol (only if not a music note)\n\t\t\tif( index > -1 && \"ABCDEFG\".indexOf( trackParts[ j ][ 0 ] ) === -1 ) {\n\t\t\t\tconst noteData = {\n\t\t\t\t\t\"name\": trackParts[ j ].substring( 0, index ),\n\t\t\t\t\t\"val\": trackParts[ j ].substring( index )\n\t\t\t\t};\n\t\t\t\tm_tracks[ trackId ].notes.push( noteData );\n\t\t\t\tlastNote = noteData;\n\t\t\t} else {\n\t\t\t\tconst noteParts = trackParts[ j ].split( /(\\d+)/ );\n\t\t\t\tconst noteData = {\n\t\t\t\t\t\"name\": noteParts[ 0 ]\n\t\t\t\t};\n\t\t\t\tif( noteParts.length > 1 ) {\n\t\t\t\t\tnoteData.val = noteParts[ 1 ];\n\t\t\t\t}\n\t\t\t\tm_tracks[ trackId ].notes.push( noteData );\n\t\t\t\tlastNote = noteData;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn firstTrackId;\n}\n\n/**\n * Play a track recursively\n * \n * @param {number} trackId - Track ID to play\n */\nfunction playTrack( trackId ) {\n\tconst track = m_tracks[ trackId ];\n\tif( track.noteId >= track.notes.length ) {\n\t\treturn;\n\t}\n\n\tconst cmd = track.notes[ track.noteId ];\n\tlet frequency = 0;\n\tlet val;\n\tlet wait = false;\n\ttrack.extra = 0;\n\n\tswitch( cmd.name.charAt( 0 ) ) {\n\t\tcase \"A\":\n\t\tcase \"B\":\n\t\tcase \"C\":\n\t\tcase \"D\":\n\t\tcase \"E\":\n\t\tcase \"F\":\n\t\tcase \"G\":\n\t\t\tfrequency = processNote( track, cmd );\n\t\t\twait = true;\n\t\t\tbreak;\n\t\tcase \"N\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\t\t\t\tval = utils.getInt( cmd.val, 0 );\n\t\t\t\tif( val >= 0 && val < m_allNotes.length ) {\n\t\t\t\t\tfrequency = m_allNotes[ val ];\n\t\t\t\t}\n\t\t\t\twait = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"O\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\t\t\t\tval = utils.getInt( cmd.val, 4 );\n\t\t\t\tif( val >= 0 && val < m_notesData[ \"A\" ].length ) {\n\t\t\t\t\ttrack.octave = val;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \">\":\n\t\t\ttrack.octave += 1;\n\t\t\tif( track.octave >= m_notesData[ \"A\" ].length ) {\n\t\t\t\ttrack.octave = m_notesData[ \"A\" ].length - 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"<\":\n\t\t\ttrack.octave -= 1;\n\t\t\tif( track.octave < 0 ) {\n\t\t\t\ttrack.octave = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"L\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\t\t\t\tval = utils.getInt( cmd.val, 1 );\n\t\t\t\ttrack.noteLength = getNoteLength( val );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"T\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\t\t\t\tval = utils.getInt( cmd.val, 120 );\n\t\t\t\tif( val >= 32 && val < 256 ) {\n\t\t\t\t\ttrack.tempo = 60 / val;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"M\":\n\t\t\tprocessMusic( track, cmd );\n\t\t\tbreak;\n\t\tcase \"P\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\t\t\t\twait = true;\n\t\t\t\tval = utils.getInt( cmd.val, 1 );\n\t\t\t\ttrack.extra = getNoteLength( val );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"V\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\t\t\t\tval = utils.getInt( cmd.val, 50 );\n\t\t\t\tif( val < 0 ) {\n\t\t\t\t\tval = 0;\n\t\t\t\t} else if( val > 100 ) {\n\t\t\t\t\tval = 100;\n\t\t\t\t}\n\t\t\t\ttrack.volume = val / 100;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"W\":\n\t\t\tprocessWaveform( track, cmd );\n\t\t\tbreak;\n\t}\n\n\t// Calculate interval for next note\n\tif( track.extra > 0 ) {\n\t\ttrack.interval = track.tempo * track.extra * track.pace * 4;\n\t} else {\n\t\ttrack.interval = track.tempo * track.noteLength * track.pace * 4;\n\t}\n\n\t// Play simultaneous track\n\tif( m_tracks[ cmd.simultaneousPlay ] ) {\n\t\tm_tracks[ cmd.simultaneousPlay ].time = track.time;\n\t\tcopyTrackData( m_tracks[ cmd.simultaneousPlay ].id, trackId );\n\t\tplayTrack( m_tracks[ cmd.simultaneousPlay ].id );\n\t}\n\n\t// Play note if frequency > 0\n\tif( frequency > 0 ) {\n\t\tplayNote( track, frequency );\n\t}\n\n\t// Move to next instruction\n\ttrack.noteId += 1;\n\n\t// Continue playing track\n\tif( track.noteId < track.notes.length ) {\n\t\tif( wait ) {\n\t\t\ttrack.time += track.interval;\n\t\t}\n\t\tplayTrack( trackId );\n\t} else {\n\n\t\t// Schedule track removal after completion\n\t\tsetTimeout( () => {\n\t\t\tif( m_tracks[ trackId ] ) {\n\t\t\t\tremoveTrack( trackId );\n\t\t\t}\n\t\t}, ( track.time + track.interval ) * 1000 );\n\t}\n}\n\n/**\n * Process a note command (A-G)\n * \n * @param {Object} track - Track object\n * @param {Object} cmd - Command object\n * @returns {number} Frequency in Hz\n */\nfunction processNote( track, cmd ) {\n\tlet note = cmd.name;\n\n\t// Convert + to sharp\n\tnote = note.replace( /\\+/g, \"#\" );\n\n\t// Convert flats to equivalent sharps\n\tnote = note.replace( \"C-\", \"B\" );\n\tnote = note.replace( \"D-\", \"C#\" );\n\tnote = note.replace( \"E-\", \"D#\" );\n\tnote = note.replace( \"G-\", \"F#\" );\n\tnote = note.replace( \"A-\", \"G#\" );\n\tnote = note.replace( \"B-\", \"A#\" );\n\n\t// Convert enharmonic equivalents\n\tnote = note.replace( \"E#\", \"F\" );\n\tnote = note.replace( \"B#\", \"C\" );\n\n\t// Check for extra note length (dotted notes)\n\tif( cmd.name.indexOf( \"..\" ) > 0 ) {\n\t\ttrack.extra = 1.75 * track.noteLength;\n\t} else if( cmd.name.indexOf( \".\" ) > 0 ) {\n\t\ttrack.extra = 1.5 * track.noteLength;\n\t}\n\n\t// Remove dots from note\n\tnote = note.replace( /\\./g, \"\" );\n\n\t// Get note frequency\n\tlet frequency = 0;\n\tif( m_notesData[ note ] ) {\n\t\tconst octave = track.octave + track.octaveExtra;\n\t\tif( octave < m_notesData[ note ].length ) {\n\t\t\tfrequency = m_notesData[ note ][ octave ];\n\t\t}\n\t}\n\n\t// Check if note length included\n\tif( !isNaN( Number( cmd.val ) ) ) {\n\t\tconst val = utils.getInt( cmd.val, 1 );\n\t\ttrack.extra = getNoteLength( val );\n\t}\n\n\treturn frequency;\n}\n\n/**\n * Process music style commands (M...)\n * \n * @param {Object} track - Track object\n * @param {Object} cmd - Command object\n */\nfunction processMusic( track, cmd ) {\n\tswitch( cmd.name ) {\n\t\tcase \"MS\":\n\n\t\t\t// Staccato\n\t\t\ttrack.pace = 0.75;\n\t\t\tbreak;\n\t\tcase \"MN\":\n\n\t\t\t// Normal\n\t\t\ttrack.pace = 0.875;\n\t\t\tbreak;\n\t\tcase \"ML\":\n\n\t\t\t// Legato\n\t\t\ttrack.pace = 1;\n\t\t\tbreak;\n\t\tcase \"MU\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\n\t\t\t\t// Modify octave\n\t\t\t\tconst val = utils.getInt( cmd.val, 0 );\n\t\t\t\ttrack.octaveExtra = val;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"MY\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\n\t\t\t\t// Modify attack rate\n\t\t\t\tconst val = utils.getInt( cmd.val, 25 );\n\t\t\t\ttrack.attackRate = val / 100;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"MX\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\n\t\t\t\t// Modify sustain rate\n\t\t\t\tconst val = utils.getInt( cmd.val, 25 );\n\t\t\t\ttrack.sustainRate = val / 100;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"MZ\":\n\t\t\tif( !isNaN( Number( cmd.val ) ) ) {\n\n\t\t\t\t// Modify decay rate\n\t\t\t\tconst val = utils.getInt( cmd.val, 25 );\n\t\t\t\ttrack.decayRate = val / 100;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"MW\":\n\n\t\t\t// Toggle full note\n\t\t\ttrack.fullNote = !track.fullNote;\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Process waveform commands (W...)\n * \n * @param {Object} track - Track object\n * @param {Object} cmd - Command object\n */\nfunction processWaveform( track, cmd ) {\n\tif( cmd.name === \"WS\" ) {\n\t\ttrack.type = \"sine\";\n\t} else if( cmd.name === \"WQ\" ) {\n\t\ttrack.type = \"square\";\n\t} else if( cmd.name === \"WW\" ) {\n\t\ttrack.type = \"sawtooth\";\n\t} else if( cmd.name === \"WT\" ) {\n\t\ttrack.type = \"triangle\";\n\t} else if( !isNaN( Number( cmd.val ) ) ) {\n\n\t\t// Custom wavetable\n\t\tconst val = utils.getInt( cmd.val, -1 );\n\t\tif( track.waveTables[ val ] ) {\n\t\t\ttrack.type = val;\n\t\t}\n\t}\n}\n\n/**\n * Play a single note\n * \n * @param {Object} track - Track object\n * @param {number} frequency - Frequency in Hz\n */\nfunction playNote( track, frequency ) {\n\tconst volume = track.volume;\n\tconst attackTime = track.interval * track.attackRate;\n\tconst sustainTime = track.interval * track.sustainRate;\n\tconst decayTime = track.interval * track.decayRate;\n\n\tlet stopTime;\n\tif( track.fullNote && attackTime + sustainTime + decayTime > track.interval ) {\n\t\tstopTime = track.interval;\n\t} else {\n\t\tstopTime = attackTime + sustainTime + decayTime;\n\t}\n\n\tlet oType;\n\tlet waveTables = null;\n\tif( typeof track.type === \"string\" ) {\n\t\toType = track.type;\n\t} else {\n\t\twaveTables = track.waveTables[ track.type ];\n\t\tif( Array.isArray( waveTables ) ) {\n\t\t\toType = \"custom\";\n\t\t} else {\n\t\t\toType = waveTables;\n\t\t\twaveTables = null;\n\t\t}\n\t}\n\n\tconst soundData = {\n\t\t\"frequency\": frequency,\n\t\t\"volume\": volume,\n\t\t\"attackTime\": attackTime,\n\t\t\"sustainTime\": sustainTime,\n\t\t\"decayTime\": decayTime,\n\t\t\"stopTime\": stopTime,\n\t\t\"oType\": oType,\n\t\t\"waveTables\": waveTables,\n\t\t\"time\": track.time,\n\t\t\"track\": track\n\t};\n\n\tm_playData.push( soundData );\n}\n\n/**\n * Copy track data from source to destination\n * \n * @param {number} trackDestId - Destination track ID\n * @param {number} trackSourceId - Source track ID\n */\nfunction copyTrackData( trackDestId, trackSourceId ) {\n\tconst trackDest = m_tracks[ trackDestId ];\n\tconst trackSource = m_tracks[ trackSourceId ];\n\n\ttrackDest.decayRate = trackSource.decayRate;\n\ttrackDest.attackRate = trackSource.attackRate;\n\ttrackDest.sustainRate = trackSource.sustainRate;\n\ttrackDest.fullNote = trackSource.fullNote;\n\ttrackDest.extra = trackSource.extra;\n\ttrackDest.space = trackSource.space;\n\ttrackDest.interval = trackSource.interval;\n\ttrackDest.tempo = trackSource.tempo;\n\ttrackDest.noteLength = trackSource.noteLength;\n\ttrackDest.pace = trackSource.pace;\n\ttrackDest.octave = trackSource.octave;\n\ttrackDest.octaveExtra = trackSource.octaveExtra;\n\ttrackDest.volume = trackSource.volume;\n\ttrackDest.type = trackSource.type;\n}\n\n/**\n * Remove a track and all its sub-tracks\n * \n * @param {number} trackId - Track ID to remove\n */\nfunction removeTrack( trackId ) {\n\n\t// Delete all sub-tracks as well as main track\n\tconst trackIds = m_tracks[ trackId ].trackIds;\n\tfor( let i = trackIds.length; i >= 0; i-- ) {\n\t\tdelete m_tracks[ trackIds[ i ] ];\n\t}\n\n\t// Remove track from all tracks array\n\tfor( let i = m_allTracks.length - 1; i >= 0; i-- ) {\n\t\tif( !m_tracks[ m_allTracks[ i ] ] ) {\n\t\t\tm_allTracks.splice( i, 1 );\n\t\t}\n\t}\n}\n\n/**\n * Get note length from note value\n * \n * @param {number} val - Note value (1-64)\n * @returns {number} Note length\n */\nfunction getNoteLength( val ) {\n\tif( val >= 1 && val < 65 ) {\n\t\treturn 1 / val;\n\t}\n\treturn 0.875;\n}\n\n", "/**\n * Pi.js - Plugin System\n * \n * Plugin registration and management for extending Pi.js functionality.\n * \n * @module core/plugins\n */\n\n\"use strict\";\n\nimport * as commands from \"./commands.js\";\nimport * as screenManager from \"./screen-manager.js\";\nimport * as utils from \"./utils.js\";\n\nconst m_plugins = [];\nlet m_api = null;\nlet m_isInitialized = false;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init() {\n\tm_api = commands.getApi();\n\tm_isInitialized = true;\n\n\t// Process any plugins that were registered before init\n\tprocessEarlyRegistrations();\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n/**\n * Register a plugin with Pi.js\n * \n * @param {Object} options - Plugin configuration\n * @param {string} options.name - Unique name for the plugin\n * @param {Function} options.init - Initialization function that receives pluginApi\n * @param {string} [options.version] - Optional version string\n * @param {string} [options.description] - Optional description\n * @returns {void}\n * \n * @example\n * pi.registerPlugin( {\n *   \"name\": \"my-plugin\",\n *   \"version\": \"1.0.0\",\n *   \"description\": \"My custom plugin\",\n *   \"init\": ( pluginApi ) => {\n *     pluginApi.addCommand( \"myCommand\", myFn, [ \"param1\" ] );\n *   }\n * } );\n */\ncommands.addCommand( \"registerPlugin\", registerPlugin, [ \"name\", \"version\", \"description\", \"init\" ] );\nfunction registerPlugin( options ) {\n\n\t// Validate required parameters\n\tif( !options.name || typeof options.name !== \"string\" ) {\n\t\tconst error = new TypeError( \"registerPlugin: Plugin must have a 'name' property.\" );\n\t\terror.code = \"INVALID_PLUGIN_NAME\";\n\t\tthrow error;\n\t}\n\n\tif( !options.init || typeof options.init !== \"function\" ) {\n\t\tconst error = new TypeError(\n\t\t\t`registerPlugin: Plugin '${options.name}' must have an 'init' function.`\n\t\t);\n\t\terror.code = \"INVALID_PLUGIN_INIT\";\n\t\tthrow error;\n\t}\n\n\t// Check for duplicate\n\tif( m_plugins.find( p => p.name === options.name ) ) {\n\t\tconst error = new Error(\n\t\t\t`registerPlugin: Plugin '${options.name}' is already registered.`\n\t\t);\n\t\terror.code = \"DUPLICATE_PLUGIN\";\n\t\tthrow error;\n\t}\n\n\t// Store plugin info\n\tconst pluginInfo = {\n\t\t\"name\": options.name,\n\t\t\"version\": options.version || \"unknown\",\n\t\t\"description\": options.description || \"\",\n\t\t\"config\": options,\n\t\t\"initialized\": false\n\t};\n\n\tm_plugins.push( pluginInfo );\n\n\t// If system is initialized, process immediately\n\tif( m_isInitialized ) {\n\t\tinitializePlugin( pluginInfo );\n\t}\n}\n\n/**\n * Get list of registered plugins\n * \n * @returns {Array<Object>} Array of plugin info objects with name, version, description\n * \n * @example\n * const plugins = pi.getPlugins();\n * console.log( plugins ); // [{ name: \"my-plugin\", version: \"1.0.0\", ... }]\n */\ncommands.addCommand( \"getPlugins\", getPlugins, [] );\nfunction getPlugins() {\n\treturn m_plugins.map( p => ( {\n\t\t\"name\": p.name,\n\t\t\"version\": p.version,\n\t\t\"description\": p.description,\n\t\t\"initialized\": p.initialized\n\t} ) );\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Initialize a plugin\nfunction initializePlugin( pluginInfo ) {\n\tif( pluginInfo.initialized ) {\n\t\treturn;\n\t}\n\n\t// Create plugin API\n\tconst pluginApi = {\n\t\t\"addCommand\": commands.addCommand,\n\t\t\"addScreenCommand\": screenManager.addCommand,\n\t\t\"addPixelCommand\": screenManager.addPixelCommand,\n\t\t\"addAACommand\": screenManager.addAACommand,\n\t\t\"addScreenDataItem\": screenManager.addScreenDataItem,\n\t\t\"addScreenDataItemGetter\": screenManager.addScreenDataItemGetter,\n\t\t\"addScreenInternalCommands\": screenManager.addScreenInternalCommands,\n\t\t\"addScreenInitFunction\": screenManager.addScreenInitFunction,\n\t\t\"addScreenCleanupFunction\": screenManager.addScreenCleanupFunction,\n\t\t\"getApi\": () => m_api,\n\t\t\"utils\": utils\n\t};\n\n\t// Initialize plugin\n\ttry {\n\t\tpluginInfo.config.init( pluginApi );\n\t\tpluginInfo.initialized = true;\n\t} catch( error ) {\n\t\tconst pluginError = new Error(\n\t\t\t`registerPlugin: Failed to initialize plugin '${pluginInfo.name}': ${error.message}`\n\t\t);\n\t\tpluginError.code = \"PLUGIN_INIT_FAILED\";\n\t\tpluginError.originalError = error;\n\t\tthrow pluginError;\n\t}\n\n\t// Reprocess API to include new commands\n\tcommands.processApi();\n}\n\n// Process plugins that were registered before system was initialized\nfunction processEarlyRegistrations() {\n\tfor( const pluginInfo of m_plugins ) {\n\t\tif( !pluginInfo.initialized ) {\n\t\t\tinitializePlugin( pluginInfo );\n\t\t}\n\t}\n}\n\n", "/**\n * Pi.js - Built-in Font Data\n * \n * Base32-encoded pixel fonts for retro-style text rendering.\n * \n * @module assets/font-data\n */\n\n\"use strict\";\n\nexport function loadBuiltInFonts( api ) {\n\n\t// Font 0: 6x6\n\tapi.loadFont(\n\t\t\"0,14004,2602800,oidnrt,3po8cff,3vnhgs4,1uv77og,3hpuv70,73g00,3vjgoef,3o00000,0,71ji,k9o000,1sg,1ogoc3p,jp4ir8,19fvt51,31ovfn3,cevfh,31vrooc,1tv52h8,2g0kula,2d2hcsp,8r2jg0,3vvvj,f33opv,8efh0g,3ho84fj,2200idv,2c40237,3r4g000,87000i,3vv901h,3jptvvv,3vnjpsc,0,g8420,22h800,57p9,3p80ea7,237000i,889019,111cc02,0,88420g,g4211,28oc,140011o,1000000,11000,1s00000,400,3333100,sjam9o,1g8423,203i888,1s060ho,hg0654,2fgg1sg,1o2e01p,3p4e07,211hgg0,oi64hg,1h4e13,31g0c,o00100,gg444,41000v,v0010,1088803,2110080,sqb41o,1h4if4,20729oi,1o07421,1o0s94,19701sg,1sgf03p,3p0g03,384p4c0,14if4i8,1o8423,201o84i,s04ihg,2h40842,43o12r,1ul8g25,2blej03,28ka4s0,s97i10,1h4ib3,10729oi,140321g,ho0v21,21014i,14i6025,a4k404,1al9ok0,12a22i4,24k421,7g8og,1s06210,21g1gc3,30g0c2,42300g,2g00000,1v,o40000,1o2f3,10210s9,s003i1,1o0211,251g00c,14s700g,23gg800,6kjo4s,ge4i94,8021,g04,1884218,3180421,21000a,1ul8g01,3294i00,64i8o0,c5310,200ca30,2102ok8,g003j0,3jo0023,221000i,14i6g00,24k400,8lbsk0,a2118,14i70,2e01s44,u02230,20g0630,31g082,622019,1000001,74a5u0,sg83go,3i80i93,30110oi,1oe22jg,joqh07,17hlg4,1o2f39g,33g4u6j,2841o66,gkc971,34g0oie,e411h4,3gsi030,211osh6,423hg0,1g84720,230g8e9,c94jp4,1goi97i,133p0u8,u06pmr,1sjf94j,34i8c93,94hg0c,14i604l,3inbvgk,2603ooc,1tdvstn,3phsif4,2prfurv,2qc67i1,3ooe4n,42rp8k,gs473h,jh8ua3,561igo,ggc231,30gg842,e110oi,14c2229,i8o887,94i9si,1km94jh,301s003,2703o00,40108,3g000f4,u,40g951,108d0kc,630gg0,g84000,2a8i000,92a800,1404g28,2mkll5,1lbfvdv,2rv210g,10g8421,u10g9s,84u118,2hbka50,7oka,1s217g,11bka5e,252h8ka,ka0fg8,n8kat0,21fg0ka,lu000j,30g9s00,7g84,8421o0,g84vg,1v,84210g,1og8000,vg0084,9v210g,1og8722,252hcka,kb421s,u842,352nc00,3u00fo0,7cka5i,42p81v,vg1b,2o01r51,vg03u0,ka5fo0,3u00f,320001v,ka52h8,3o0043h,21o007,843h00,ua52,252nska,9v217s,10g84u0,7,84vvvv,3vvu000,vvvtgo,1goc60o,1goc63f,3vvo000,2e53g,hp5upf,287i90g,10g003s,2h81uh4,44no00,1ska200,18s880,etgg84,1sc94hh,3hh4u94,267k631,15jfk3p,2i9s0fb,1f0004u,2iuo01p,221so70,64i94i,3u0vg7s,gs40,e01088,1o0020g,23g0452,421042,425110,3g0800,5500kk,oi6000,400,c,1gg,12go062,252g1o2,88f000,1ose00\",\n\t\t6, 6, null, true\n\t);\n\n\t// Font 1: 6x8 (default)\n\tapi.loadFont(\n\t\t\"0,ugs,3gvtm2u,1tvmss7,vtskvf,2v710g0,g8efjg,21008e2,vfl8gs,g8e77p,311o003,f7hg00,3vvpoc7,vvu045,h8igg0,3v1mrdm,3efu71h,1ep4i8o,oi94hg,33oof4j,34233hg,u97i95,cq08mn,2pspiqc,21gsfn3,400233,2v3go40,gsv213,3jggka5,a50180,1val6h8,2h80e9j,94hj4s,3p,3jo08ef,24fjghv,gsvah0,2100842,lfjgg0,82fgg,2000044,v41000,8421,3g00098,1voa800,8477r,3g000vf,2e21000,0,8e7,4200g0,18ka000,kaf,2afih80,gug70b,33000p9,442ac0,gk4aki,1380844,0,ggg841,100g41,211100,k4fh1,1000021,fh0g00,0,2110000,f00000,0,210000g,2222200,1p2jamb,jg08ca,4213s0,1p21332,no0sh0,260k9o0,8ca97o,11o1ug8,u0k9o0,oggf4a,jg1uh1,442100,1p2h74a,jg0sh8,2f0g9o0,84000,2100042,10gg,888820,20g000f,2007o00,10820gg,2200sh0,22200g0,1p2nalq,3g08a8,2hfka40,3oi9729,ng0c98,g828o0,3oi94i9,ng1u94,e42bs0,3si8721,700c98,g9i8s0,252hfka,k80s42,4211o0,s4214i,1301ia5,c52j60,3gg8421,no12ra,2l8ka40,25il9ka,k80sh8,2h8k9o0,3oi9721,700sh8,2h8l9o3,3oi9731,1680sh8,e0k9o0,3ta4210,23g12h8,2h8k9o0,252h8k9,11012h8,2lal980,24ka22h,14812h5,4211o0,3t22222,no1og8,g843g0,210820g,g41o42,4213g0,gkh8g0,0,1v,g82000,7,17k9u0,30g8539,lg0007,h849o0,c216kq,1jc0007,hfk1o0,oi8e21,700006,2h8jo5s,30ga6i9,m80806,4211o0,4030ga,k9pg84,2a62h40,1g84210,23g000d,lalak0,mcka,k80007,h8k9o0,u4i9,323g006,2i93g8e,r6i1,700007,2g70bo0,10gu421,hg0008,2h8kpk0,h8k9,1100008,2lal980,h511,1480008,2h8jo5s,v111,7o0642,o210c0,g84010,2101g42,321300,15c0000,45,h8kbs0,1p2g8jg,309o0i0,i94hs0,o0e8nq,3g0sh6,274hs0,240c13i,13o0o06,274hs0,g0c13i,13o0007,g83gcc,1p2e8nq,3g1207,hfk1o0,1g0e8nq,3g1406,4211o0,1p2c210,23g0o06,4211o0,248a8nq,k80840,e8nq40,c0v43h,7o000c,267khk0,skifki,14o08a0,e8k9o0,12074a,jg0g40,e8k9o0,gk08ka,jg0g40,h8k9o0,1208k9,3g9p245,h8igg0,240h8ka,jg0847,2g83og8,oi8e22,ng12af,24fh0g0,3ome4it,if4c52,e212go,o0c13i,13o0c06,4211o0,88074a,jg0022,h8k9o0,1lc0f4a,k80qj0,pakq40,1p4i7g3,3g00oi9,c07g00,g04442,jg0000,v84000,fg8,g00iq6,r5cecv,15kbdiq,3s84080,842100,aaa2g,2g000k5,555000,1348p26,1268ll5,1l5d9ba,3ctreup,3erm842,4210g8,g84270,210g84e,4e10g8,ka52n8,2h8k000,fh8ka,s270,210ga5e,21eh8ka,ka52h8,2h8k00f,21eh8ka,kat0no,a52,25fg000,g8s270,0,e10g8,g8421s,842,4fo000,7s,210g842,43p0g8,7s,842,4fp0g8,g87i1s,210ga52,252p8ka,ka5i1s,3,342p8ka,katg7s,f,30ep8ka,ka5i1c,2h8k00f,30fo000,katg7c,2h8k84f,30fo000,ka52ns,f,30fp0g8,7s,2h8ka52,253o000,g87i1s,3,343p0g8,1s,2h8ka52,25fp8ka,g8vi7s,210g842,4e0000,1s,210hvvv,3vvvvvv,7v,3vvvose,se73ho,e73hos,1osfvvv,3vg0000,cqki,2i400e8,2u8ni10,1uh842,4000fq,252h8k0,3t28322,no0007,2ka5100,i94jl,2200cp,2210g80,3s8e8k9,313sc98,1voa8o0,oigoa9,mc0e83,f8c5s0,impdd,g00117,2iqbp10,oggf41,1g0sh8,2h8ka40,v07o1,3o0084f,24203s0,g41110,7o0888,8203s0,c94i10,210g842,4252go,oc0fo0,31g00cp,206co00,oi9300,0,630000,1g,721,216h8c,3h4i94g,oi2,8f0000,e73h,3000000\",\n\t\t6, 8, null, true\n\t);\n\n\t// Font 2: 8x8\n\tapi.loadFont(\n\t\t\"0,0,1v839c1,2upj0bu,1vfvmvv,31ufvru,1mftvnu,1u3g400,83gv7u,1u3g400,s7oe7u,3v7oe3s,810e3s,3v7oe3s,61s,u1g000,3vvvpu3,31ufvvv,3opi2,116cf00,3vs76dt,2upjgvv,7ge3rt,36cpj3o,u6cpj6,u1gvgo,vj6fpg,o71s70,1vm6vr3,1hmfpm0,2clkf77,3jjomkp,20e1u7u,3se1000,10sfnu,v0s0g0,c3ovgo,c7sf0o,1j6cpj6,1j00pg0,1vtnmrr,dhm6o0,v66e3c,1m3hj3o,0,1v7svg0,c3ovgo,1v3o67v,c3ovgo,c1g600,c1g60o,1v3o600,1g37u,61g000,30o7u,1g30000,1g60,30fs000,28pnv,1j28000,1gf3u,3vvu000,fvvru,u1g000,0,0,o7gu1g,o00c00,1m6or00,0,1m6pvjc,3v6or00,o7pg3o,6fgc00,cdj0o,o6dhg0,s6oe3m,3ecotg0,1g61g00,0,c30o30,1g30600,1g3060o,c30o00,6cf7v,u6c000,30c7s,o30000,0,30c30,7s,0,0,30c00,30o61g,1gc1000,1ucdjmu,3recv00,o70c1g,o31v00,1sco31o,1gcpv00,1sco31o,6cou00,e3or6c,3v0o7g0,3uc1u0c,6cou00,s61g7o,36cou00,3uco30o,o30c00,1scpj3o,36cou00,1scpj3s,61gs00,30c00,30c00,30c00,30c30,c30o60,1g30600,1v00,fo000,1g3060c,c30o00,1sco30o,o00c00,1ucdnmu,3fc0u00,o7hj6c,3ucpj00,3u6cpjs,1j6dv00,u6dg60,306cf00,3s6opj6,1j6pu00,3v64q3o,1k65vg0,3v64q3o,1k61s00,u6dg60,376cfg0,36cpj7s,36cpj00,1s30c1g,o30u00,f0o30c,36cou00,3j6cr3o,1m6dpg0,3o60o30,1h6dvg0,33etvnu,3bcdhg0,33edtmu,37cdhg0,s6phm6,336oe00,3u6cpjs,1g61s00,1scpj6c,3e7g700,3u6cpjs,1m6dpg0,1scpo3g,ecou00,3ub8c1g,o30u00,36cpj6c,36cpv00,36cpj6c,367gc00,33cdhmm,3vethg0,33ccr1o,s6phg0,36cpj3o,o30u00,3vcd30o,p6dvg0,1s60o30,1g60u00,3060c0o,60c0g0,1s1g60o,c1gu00,83gr66,0,0,7v,o30600,0,u0c,1ucotg0,3g60o3s,1j6dn00,u6c,30cou00,e0o33s,36cotg0,u6c,3uc0u00,s6oo7g,1g61s00,tmc,367o37o,3g60r3m,1j6dpg0,o00s1g,o30u00,60030c,6cpj3o,3g60pjc,1s6ppg0,1o30c1g,o30u00,1j7u,3vddhg0,1u6c,36cpj00,u6c,36cou00,1n36,1j7oo7g,tmc,367o30u,1n3m,1j61s00,v60,1s0pu00,830v1g,o38600,1j6c,36cotg0,1j6c,367gc00,1hmm,3vfsr00,1hjc,s6phg0,1j6c,367o37o,1v4o,o69v00,e30c70,o30700,c1g600,c1g600,3g30c0s,o31o00,1rdo000,0,10e3c,33cdvg0,1scpg6c,1s1g33o,co06c,36covg0,e00u6c,3uc0u00,1vc6f06,v6cfo0,3600u0c,1ucovg0,3g00u0c,1ucovg0,o30u0c,1ucovg0,u60,307g31o,1vc6f36,1v60f00,3600u6c,3uc0u00,3g00u6c,3uc0u00,3600s1g,o30u00,1ucce0o,c1gf00,3g00s1g,o30u00,333gr66,3vcdhg0,o3003o,36fpj00,e01v30,1s61v00,voc,1vsovo0,v6pj7u,36cpjg0,1sco03o,36cou00,co03o,36cou00,e003o,36cou00,1sco06c,36covg0,e006c,36covg0,co06c,367o37o,31hgf36,1j3o600,3601j6c,36cou00,c1gvm0,307s60o,s6op7g,1gedv00,36cou7s,ofoc1g,3scpj7q,33cvhm7,71m61s,c1hm3g,e00u0c,1ucovg0,s00s1g,o30u00,1o03o,36cou00,1o06c,36covg0,fg07o,36cpj00,3u01j7c,3udpj00,u6or1u,7s000,s6or1o,7o000,o00c30,30cou00,7s,30c0000,7s,60o000,31sdj6u,pmdj0f,31sdj6r,rmvjo3,c1g00o,c1g600,36pmc,1j36000,cophj,1jco000,h8g8k8,h8g8k8,1aqklda,1aqklda,3dnfmve,3dnfmve,c1g60o,c1g60o,c1g60o,3s1g60o,c1hu0o,3s1g60o,r3cdhm,3r3cdhm,0,3v3cdhm,1u0o,3s1g60o,r3dtg6,3r3cdhm,r3cdhm,r3cdhm,1vg6,3r3cdhm,r3dtg6,3v00000,r3cdhm,3v00000,c1hu0o,3s00000,0,3s1g60o,c1g60o,fg0000,c1g60o,3vg0000,0,3vhg60o,c1g60o,fhg60o,0,3vg0000,c1g60o,3vhg60o,c1g7oo,fhg60o,r3cdhm,rjcdhm,r3cdpg,vg0000,fpg,rjcdhm,r3dto0,3vg0000,1vo0,3rjcdhm,r3cdpg,rjcdhm,1vo0,3vg0000,r3dto0,3rjcdhm,c1hvo0,3vg0000,r3cdhm,3vg0000,1vo0,3vhg60o,0,3vjcdhm,r3cdhm,vg0000,c1g7oo,fg0000,7oo,fhg60o,0,vjcdhm,r3cdhm,3vjcdhm,c1hvoo,3vhg60o,c1g60o,3s00000,0,fhg60o,3vvvvvv,3vvvvvv,0,3vvvvvv,3of1s7g,3of1s7g,7gu3of,7gu3of,3vvvvvv,0,tms,34dotg0,7hj7o,36fhg60,fpj60,30c1g00,fsr3c,1m6or00,3ucoo1g,1gcpv00,vmo,3cdgs00,6cpj6,1j7oo60,7dn0o,c1g600,3u30u6c,367gc7s,s6phnu,336oe00,s6phm6,1m6prg0,e3063s,36cou00,vmr,3dns000,30ovmr,3dnso60,s61g7o,3060e00,1scpj6c,36cpj00,fo07s,fo000,o31v1g,o01v00,1g3061g,1g01v00,c30o1g,c01v00,71m6oo,c1g60o,c1g60o,cdhm3g,o3007s,30c00,7dn00,1rdo000,s6or1o,0,o,c00000,0,c00000,7go30c,3m6of0s,1s6or3c,1m00000,1o1gc30,1s00000,f1s,u3o000\",\n\t\t8, 8, null, true \n\t);\n\t\t\n\t// Font 3: 8x14\n\tapi.loadFont(\n\t\t\"0,0,0,0,1v839c1,20rr6c1,1v00000,vnv,3dvvvu3,3jvuvg0,0,6pvnu,3vfsv1o,800000,g,s7pvjs,s10000,0,c3of77,3jue60o,u00000,61s,1vfvvru,c1gf00,0,o,u3o600,0,3vvvvvv,3vufgu3,3jvvvvv,3vvu000,f36,1144phs,0,3vvvvvv,31pjfdt,2cs7vvv,3vvu000,f0s6hi,1scpj6c,1s00000,f36,1j6cf0o,1v1g600,0,vj6fpg,o30s7g,3g00000,vr3,1vm6or3,1jufpm0,0,c1hmps,3jjpmoo,c00000,1060,3gfhvno,3gc1000,0,10c3hu,3v3s3g6,100000,61s,1v1g60o,1v3o600,0,1j6cpj6,1j6c036,1j00000,vur,3dtmuor,dhm6o0,3s,3360e3c,33ccr1o,6ccv00,0,0,3vftvg0,0,c3ovgo,c1gvhs,c7s000,61s,1v1g60o,c1g600,0,c1g60o,c1gvhs,c00000,0,c0pvgc,c00000,0,c30,3v60c00,0,0,c1g60,3v00000,0,a3c,3v6oa00,0,g,s3gv3s,3vfs000,0,ftvjs,1u3ge0g,0,0,0,0,0,c3of1s,c1g00o,c00000,6cpj6,i00000,0,0,1m6pvjc,1m6pvjc,1m00000,c1gv66,31c0v06,23ccv0o,c00000,1gm6,61gc36,3300000,e3c,1m3gtms,36cotg0,1g,o30o00,0,0,30o,o30c1g,o1g300,0,o1g30c,60o30o,o00000,0,1j3pvps,1j00000,0,60o,1v1g600,0,0,0,c1g61g,0,0,3v00000,0,0,0,1g600,0,10c30o,o61g40,0,v66,37dttn6,33ccv00,0,c3gu0o,c1g60o,1v00000,v66,30o61g,1gcdvg0,0,1ucc1g6,u0c1m6,1u00000,30s,u6pj7u,60o7g0,0,3vc1g60,3u0c1m6,1u00000,e30,30c1v66,33ccv00,0,3vcc1gc,c30c1g,o00000,v66,33ccv66,33ccv00,0,1ucdhm6,1v0c1gc,1s00000,o,c00000,c1g000,0,1g600,60o,o00000,1gc,c30o1g,c0o1g0,0,3u,vg0,0,o1g,c0o1gc,c30o00,0,1ucdhgc,c1g00o,c00000,v66,33dtnmu,3ec0v00,0,83gr66,33fthm6,3300000,1v36,1j6cv36,1j6dv00,0,u6dgm0,30c1gj6,u00000,1u3c,1j6cpj6,1j6pu00,0,3v6coj8,1s6goj6,3v00000,1vj6,1h6gu38,1g61s00,0,u6dgm0,30dthj6,t00000,1hm6,33cdvm6,33cdhg0,0,u1g60o,c1g60o,u00000,7gc,60o30c,36cou00,0,3j6cr3c,1s6or36,3j00000,1s30,1g60o30,1h6dvg0,0,33etvnu,3bcdhm6,3300000,1hn6,3rftnme,33cdhg0,0,s6phm6,33cdhjc,s00000,1v36,1j6cv30,1g61s00,0,1ucdhm6,33ddnjs,60s000,1v36,1j6cv3c,1j6dpg0,0,1ucdhj0,s0phm6,1u00000,vju,1d1g60o,c1gf00,0,33cdhm6,33cdhm6,1u00000,1hm6,33cdhm6,1m3g400,0,33cdhm6,3bddvjs,1m00000,1hm6,1m3ge1o,1mcdhg0,0,1j6cpj6,u1g60o,u00000,1vm6,261gc30,31cdvg0,0,u30c1g,o30c1g,u00000,1060,3g70e0s,70c0g0,0,u0o30c,60o30c,u00000,83gr66,0,0,0,0,0,1vo0,o30600,0,0,0,3o,67pj6c,1r00000,1o30,1g7gr36,1j6cv00,0,3s,33c1g66,1u00000,70c,63or6c,36cotg0,0,3s,33ftg66,1u00000,e3c,1i61s30,1g61s00,0,3m,36cpj3s,6cou00,1o30,1g6otj6,1j6dpg0,0,c1g01o,c1g60o,u00000,1g6,s1g6,30cpj6,u00000,3g60o36,1m7gr36,3j00000,e0o,c1g60o,c1gf00,0,7c,3vddlmm,3300000,0,dopj6,1j6cpg0,0,3s,33cdhm6,1u00000,0,dopj6,1j7oo30,3o00000,3m,36cpj3s,60o7g0,0,dotj6,1g61s00,0,3s,3370766,1u00000,41g,ofoc1g,o3c700,0,6c,36cpj6c,1r00000,0,6cpj6,1j3o600,0,66,33ddlnu,1m00000,0,ccr1o,s6phg0,0,66,33cdhju,30pu00,0,ftj0o,o6dvg0,0,71g60o,1o1g60o,700000,60o,c1g00o,c1g600,0,1o1g60o,71g60o,1o00000,tms,0,0,0,41o,1mcdhnu,0,f36,31c1g62,1j3o306,1u00000,36co06c,36cpj6c,1r00000,o61g,7phnu,30ccv00,g,s6o03o,67pj6c,1r00000,1j6c,7g33s,36cotg0,30,o1g03o,67pj6c,1r00000,3gr1o,7g33s,36cotg0,0,f36,1g6cf0c,33o000,10e3c,7phnu,30ccv00,0,36co03s,33ftg66,1u00000,60c0o,7phnu,30ccv00,0,1j6c01o,c1g60o,u00000,1gf36,3g60o,c1gf00,30,o1g01o,c1g60o,u00000,cdhgg,s6phm6,3vcdhg0,e3c,s00e3c,33cdvm6,3300000,c30o00,3v6co3s,1g6dvg0,0,1j3m,r7tm6o,1n00000,fjc,36cpvmc,36cpjg0,g,s6o03s,33cdhm6,1u00000,1hm6,7phm6,33ccv00,30,o1g03s,33cdhm6,1u00000,30u6c,cpj6c,36cotg0,30,o1g06c,36cpj6c,1r00000,1hm6,cdhm6,337s1gc,1s00066,333gr66,33cdhjc,s00000,cdhg0,33cdhm6,33ccv00,o,c3opj0,1g6cf0o,c00000,3gr34,1gf0o30,1gedv00,0,1j6cf0o,1v1gvgo,c00000,fhj6c,3sc9j6u,36cphg0,e,dhg60o,1v1g60o,cdgs00,1gc30,7g33s,36cotg0,c,c3001o,c1g60o,u00000,1gc30,7phm6,33ccv00,o,o6006c,36cpj6c,1r00000,tms,dopj6,1j6cpg0,tms,cdpnm,3vdtjm6,3300000,3or3c,v00vg0,0,1o,1m6oe00,1u00000,0,c1g,30c30,33ccv00,0,0,3vc1g60,0,0,1vg6,30c000,60,30cdj6o,o61n46,61gfg0,c1g66,36dgc36,379sfg6,300000,c1g00o,c3of1s,c00000,0,r6pm3c,r00000,0,1m3c,r6pm00,0,8k84a4,8k84a4,8k84a4,8k8lda,1aqklda,1aqklda,1aqklda,3enfnbn,3enfnbn,3enfnbn,3ene60o,c1g60o,c1g60o,c1g60o,c1g60o,c1g67o,c1g60o,c1g60o,c1g67o,cfg60o,c1g60o,r3cdhm,r3cdnm,r3cdhm,r3c000,0,fsdhm,r3cdhm,0,fg67o,c1g60o,c1gdhm,r3cdnm,3fcdhm,r3cdhm,r3cdhm,r3cdhm,r3cdhm,r3c000,7u,3fcdhm,r3cdhm,r3cdhm,rfc1nu,0,dhm,r3cdhm,rfs000,0,c1g60o,cfg67o,0,0,0,fg60o,c1g60o,c1g60o,c1g60v,0,60o,c1g60o,cfu000,0,0,7v,c1g60o,c1g60o,c1g60o,c1u60o,c1g60o,0,7v,0,60o,c1g60o,cfu60o,c1g60o,c1g60o,c1u60v,c1g60o,c1gdhm,r3cdhm,r3edhm,r3cdhm,r3cdhm,r3ec1v,0,0,1v,o3edhm,r3cdhm,r3cdhm,rfe07v,0,0,7v,fedhm,r3cdhm,r3cdhm,r3ec1n,r3cdhm,r3c000,7v,fu000,0,r3cdhm,rfe07n,r3cdhm,r3c60o,c1g67v,fu000,0,r3cdhm,r3cdnv,0,0,7v,fu60o,c1g60o,0,7v,r3cdhm,r3cdhm,r3cdhm,r3u000,0,c1g60o,c1u60v,0,0,v,c1u60o,c1g60o,0,1v,r3cdhm,r3cdhm,r3cdhm,rfudhm,r3cdhm,c1g60o,cfu67v,c1g60o,c1g60o,c1g60o,cfg000,0,0,v,c1g60o,c1hvvv,3vvvvvv,3vvvvvv,3vvvvvv,0,7v,3vvvvvv,3vvvs7g,3of1s7g,3of1s7g,3of1s7g,7gu3of,7gu3of,7gu3of,7gvvvv,3vvvvvv,3vg0000,0,0,7dn6o,3cdotg0,0,v66,3ucdhns,30c0g00,1vm6,33c1g60,30c1g00,0,1vjc,1m6or3c,1m00000,1vm6,1g3061g,1gcdvg0,0,3u,3cdhm6o,1o00000,0,1j6cpj6,1u60o60,0,tms,c1g60o,c00000,vgo,u6cpj6,u1gvg0,0,s6phm6,3vcdhjc,s00000,e3c,33cdhjc,1m6prg0,0,f3060c,v6cpj6,u00000,0,7tmur,1v00000,0,1gcvmr,3dv6vj0,3000000,71g,1g60v30,1g30700,0,7phm6,33cdhm6,3300000,7u,1vg0,fs000,0,1g63u,c1g000,3vg0000,c0o,60c30o,o00vg0,0,61gc30,o1g300,1v00000,3gr,dhg60o,c1g60o,c1g60o,c1g60o,c1hm6o,1o00000,o,c00vg0,c1g000,0,tms,7dn00,0,3gr3c,s00000,0,0,0,c1g000,0,0,o,0,f,60o30c,6eor1s,e00000,dgr3c,1m6or00,0,3g,3c30o68,3s00000,0,0,1u7ov3s,1u7o000,0\",\n\t\t8, 14, null, true\n\t);\n\n\t// Font 4: 8x16\n\tapi.loadFont(\n\t\t\"0,0,0,0,vk1,2io30dt,2co30bu,0,vnv,3dvvvu3,3jvvvru,0,0,1mftvnu,3v7oe0g,0,0,83gv7u,1u3g400,0,o,u3ppv7,3jhg61s,0,o,u7tvvv,1v1g61s,0,0,0,0,0,3vvvvvv,3vvvpu3,31ufvvv,3vvvvvv,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,vr3,1vm6or3,1hmfpv6,3000000,o,cdmf77,udm60o,0,81g70,3ofhvno,3oe1g40,0,41ge,f3tvhu,f0s1g2,0,61s,1v1g60o,1v3o600,0,pj6,1j6cpj6,1j00pj6,0,vur,3dtmuor,dhm6or,0,7phj0,s6phm6,1m3g366,1u00000,0,0,3vftvnu,0,61s,1v1g60o,1v3o63u,0,61s,1v1g60o,c1g60o,0,60o,c1g60o,c7sf0o,0,0,1g37u,61g000,0,0,30o7u,1g30000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61s,u3o60o,c0060o,0,6cpj6,i00000,0,0,3c,1mfsr3c,1mfsr3c,0,c1gv66,31c0v06,38dhjs,c1g000,0,31cc30o,o61hk6,0,e3c,1m3gtms,36cpj3m,0,30c1g,1g00000,0,0,30o,o30c1g,o3060c,0,c0o,60o30c,60o61g,0,0,6cf7v,u6c000,0,0,1g63u,c1g000,0,0,0,1g60o,o00000,0,7u,0,0,0,0,60o,0,0,10c30o,o61g40,0,f36,31s7mur,31s6phs,0,61o,1s1g60o,c1g63u,0,v66,30o61g,1gc1hnu,0,v66,30cf06,30dhjs,0,30s,u6pj7u,60o30u,0,1vm0,30c1v06,30dhjs,0,e30,30c1v66,33cdhjs,0,1vm6,30c30o,o30c1g,0,v66,33ccv66,33cdhjs,0,v66,33ccvg6,30c33o,0,0,c1g000,1g600,0,0,c1g000,1g61g,0,6,61gc30,o1g306,0,0,7s000,1v00000,0,30,o1g306,61gc30,0,v66,330o60o,c0060o,0,3s,33cdnmu,3fdpg3s,0,41o,1mcdhnu,33cdhm6,0,1v36,1j6cv36,1j6cpns,0,f36,31c1g60,30c4phs,0,1u3c,1j6cpj6,1j6cr7o,0,1vj6,1h6gu38,1g64pnu,0,1vj6,1h6gu38,1g60o7g,0,f36,31c1g6u,33ccphq,0,1hm6,33cdvm6,33cdhm6,0,f0o,c1g60o,c1g61s,0,7gc,60o30c,36cpj3o,0,1pj6,1j6ou3o,1m6cpn6,0,1s30,1g60o30,1g64pnu,0,1gv7,3vvvmu3,31s7gu3,0,1hn6,3rftnme,33cdhm6,0,v66,33cdhm6,33cdhjs,0,1v36,1j6cv30,1g60o7g,0,v66,33cdhm6,33ddnjs,60s000,1v36,1j6cv3c,1j6cpn6,0,v66,3360e0c,3cdhjs,0,1vur,2chg60o,c1g61s,0,1hm6,33cdhm6,33cdhjs,0,1gu3,31s7gu3,31mcf0o,0,1gu3,31s7gur,3dvupj6,0,1gu3,1j3o60o,u6dgu3,0,1gu3,31mcf0o,c1g61s,0,1vu3,230o61g,1gc3gvv,0,f1g,o30c1g,o30c1s,0,40,30e0s1o,e0s1g2,0,f0c,60o30c,60o31s,0,83gr66,0,0,0,0,0,0,fu000,o30600,0,0,0,0,7g33s,36cpj3m,0,1o30,1g7gr36,1j6cpjs,0,0,7phm0,30c1hjs,0,70c,63or6c,36cpj3m,0,0,7phnu,30c1hjs,0,e3c,1i61s30,1g60o7g,0,0,7dj6c,36cpj3s,6cou00,1o30,1g6otj6,1j6cpn6,0,60o,3g60o,c1g61s,0,1g6,s1g6,30c1g6,1j6cf00,1o30,1g6cr3o,1s6opn6,0,e0o,c1g60o,c1g61s,0,0,edvur,3dtnmur,0,0,dopj6,1j6cpj6,0,0,7phm6,33cdhjs,0,0,dopj6,1j6cpjs,1g61s00,0,7dj6c,36cpj3s,60o7g0,0,dotj6,1g60o7g,0,0,7phj0,s0phjs,0,41g,ofoc1g,o30dgs,0,0,cpj6c,36cpj3m,0,0,c7gu3,31mcf0o,0,0,c7gu3,3dtnvr6,0,0,c6phs,c3opm3,0,0,cdhm6,33cdhju,30pu00,0,ftj0o,o61hnu,0,3go,c1gs0o,c1g60e,0,60o,c1g00o,c1g60o,0,s0o,c1g3go,c1g63g,0,tms,0,0,0,0,83gr66,33cdvg0,0,f36,31c1g60,316cf0c,37o000,1j00,cpj6c,36cpj3m,0,o61g,7phnu,30c1hjs,0,10e3c,7g33s,36cpj3m,0,1j00,7g33s,36cpj3m,0,60c0o,7g33s,36cpj3m,0,3gr1o,7g33s,36cpj3m,0,0,u6co30,1j3o306,u00000,10e3c,7phnu,30c1hjs,0,1hg0,7phnu,30c1hjs,0,60c0o,7phnu,30c1hjs,0,pg0,3g60o,c1g61s,0,1gf36,3g60o,c1g61s,0,60c0o,3g60o,c1g61s,0,cc00g,s6phm6,3vcdhm6,0,s6oe00,s6phm6,3vcdhm6,0,c30o00,3v6co3s,1g60pnu,0,0,6seor,1vdhn3n,0,fjc,36cpvmc,36cpj6e,0,10e3c,7phm6,33cdhjs,0,1hg0,7phm6,33cdhjs,0,60c0o,7phm6,33cdhjs,0,30u6c,cpj6c,36cpj3m,0,60c0o,cpj6c,36cpj3m,0,1hg0,cdhm6,33cdhju,30ou00,cc03s,33cdhm6,33cdhjs,0,cc066,33cdhm6,33cdhjs,0,1g63u,31s1g60,31ns60o,0,3gr34,1gf0o30,1g61pns,0,1gr6,u1hvoo,3vhg60o,0,fopj6,1u64pjf,1j6cpnj,0,s6oo,c1gvgo,c1g60o,3c70000,1gc30,7g33s,36cpj3m,0,o61g,3g60o,c1g61s,0,1gc30,7phm6,33cdhjs,0,1gc30,cpj6c,36cpj3m,0,tms,dopj6,1j6cpj6,0,1rdo066,3jfdvmu,37cdhm6,0,3or3c,v00vg0,0,0,3gr3c,s00v00,0,0,c1g,30c30,30cdhjs,0,0,1vm0,30c1g00,0,0,1vg6,30c1g0,0,c1g62,33co61g,1gct6o6,61u000,c1g62,33co61g,1jct5hu,30c000,60o,1g60o,u3of0o,0,0,3cr6o,1m3c000,0,0,dgr1m,1mdg000,0,8k84a4,8k84a4,8k84a4,8k84a4,1aqklda,1aqklda,1aqklda,1aqklda,3enfnbn,3enfnbn,3enfnbn,3enfnbn,c1g60o,c1g60o,c1g60o,c1g60o,c1g60o,c1g67o,c1g60o,c1g60o,c1g60o,cfg67o,c1g60o,c1g60o,r3cdhm,r3cdnm,r3cdhm,r3cdhm,0,7u,r3cdhm,r3cdhm,0,fg67o,c1g60o,c1g60o,r3cdhm,rfc1nm,r3cdhm,r3cdhm,r3cdhm,r3cdhm,r3cdhm,r3cdhm,0,fs1nm,r3cdhm,r3cdhm,r3cdhm,rfc1nu,0,0,r3cdhm,r3cdnu,0,0,c1g60o,cfg67o,0,0,0,7o,c1g60o,c1g60o,c1g60o,c1g60v,0,0,c1g60o,c1g67v,0,0,0,7v,c1g60o,c1g60o,c1g60o,c1g60v,c1g60o,c1g60o,0,7v,0,0,c1g60o,c1g67v,c1g60o,c1g60o,c1g60o,c1u60v,c1g60o,c1g60o,r3cdhm,r3cdhn,r3cdhm,r3cdhm,r3cdhm,r3ec1v,0,0,0,3uc1n,r3cdhm,r3cdhm,r3cdhm,rfe07v,0,0,0,fu07n,r3cdhm,r3cdhm,r3cdhm,r3ec1n,r3cdhm,r3cdhm,0,fu07v,0,0,r3cdhm,rfe07n,r3cdhm,r3cdhm,c1g60o,cfu07v,0,0,r3cdhm,r3cdnv,0,0,0,fu07v,c1g60o,c1g60o,0,7v,r3cdhm,r3cdhm,r3cdhm,r3cdhv,0,0,c1g60o,c1u60v,0,0,0,1u60v,c1g60o,c1g60o,0,1v,r3cdhm,r3cdhm,r3cdhm,r3cdnv,r3cdhm,r3cdhm,c1g60o,cfu67v,c1g60o,c1g60o,c1g60o,c1g67o,0,0,0,v,c1g60o,c1g60o,3vvvvvv,3vvvvvv,3vvvvvv,3vvvvvv,0,7v,3vvvvvv,3vvvvvv,3of1s7g,3of1s7g,3of1s7g,3of1s7g,7gu3of,7gu3of,7gu3of,7gu3of,3vvvvvv,3vvvvo0,0,0,0,7dn6o,3cdhn3m,0,u6c,36cpm6c,33cdhmc,0,1vm6,33c1g60,30c1g60,0,0,3v6or3c,1m6or3c,0,7u,3360c0o,o61hnu,0,0,7tm6o,3cdhm3g,0,0,1j6cpj6,1j7oo30,3000000,0,1rdo60o,c1g60o,0,3u,c3opj6,1j3o63u,0,1o,1mcdhnu,33ccr1o,0,e3c,33cdhjc,1m6or7e,0,7hg,c0ofj6,1j6cphs,0,0,7tmur,3dns000,0,3,37tmur,3pnso60,0,71g,1g60v30,1g60c0s,0,3s,33cdhm6,33cdhm6,0,0,3v0007u,1vg0,0,0,c1gvgo,c0007v,0,1g,c0o1gc,c3003u,0,c,c30o1g,c0o03u,0,3gr,dhg60o,c1g60o,c1g60o,c1g60o,c1g60o,3cdhm3g,0,0,c1g03u,1g600,0,0,7dn00,1rdo000,0,3gr3c,s00000,0,0,0,o,c00000,0,0,0,c00000,0,u30c,60o37c,1m6of0s,0,dgr3c,1m6or00,0,0,71m1g,1gchu00,0,0,0,1u7ov3s,1u7ov00,0\",\n\t\t8, 16, null, true\n\t);\n\n\t// Set default font to 6x8 (font ID 1)\n\tapi.setDefaultFont( 1 );\n}\n", "/**\r\n * Pi.js - Main Entry Point\r\n * \r\n * Graphics and sound library for retro-style games and demos.\r\n * \r\n * @module pi.js\r\n * @author Andy Stubbs\r\n * @license Apache-2.0\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Core Modules\r\nimport * as commands from \"./core/commands.js\";\r\nimport * as screenManager from \"./core/screen-manager.js\";\r\nimport * as colors from \"./core/colors.js\";\r\nimport * as renderer from \"./core/renderer.js\";\r\nimport * as events from \"./core/events.js\";\r\n\r\n// Other Modules\r\nimport * as graphics from \"./modules/graphics.js\";\r\nimport * as graphicsAdvanced from \"./modules/graphics-advanced.js\";\r\nimport * as draw from \"./modules/draw.js\";\r\nimport * as paint from \"./modules/paint.js\";\r\nimport * as images from \"./modules/images.js\";\r\nimport * as font from \"./modules/font.js\";\r\nimport * as print from \"./modules/print.js\";\r\nimport * as keyboard from \"./modules/keyboard.js\";\r\nimport * as mouse from \"./modules/mouse.js\";\r\nimport * as touch from \"./modules/touch.js\";\r\nimport * as gamepad from \"./modules/gamepad.js\";\r\nimport * as press from \"./modules/press.js\";\r\nimport * as sound from \"./modules/sound.js\";\r\nimport * as play from \"./modules/play.js\";\r\nimport * as plugins from \"./core/plugins.js\";\r\n\r\n// Assets\r\nimport * as fontData from \"./assets/font-data.js\";\r\n\r\n// Version injected during build from package.json\r\nconst VERSION = \"2.0.0-alpha.1\";\r\n\r\n// Create the pi object with _ (internal API for plugins) and util namespaces\r\nconst api = {\r\n\t\"version\": VERSION\r\n};\r\n\r\n// Initialize the modules\r\ncommands.init( api, screenManager );\r\nscreenManager.init();\r\nrenderer.init();\r\ncolors.init();\r\nevents.init();\r\ngraphics.init();\r\ngraphicsAdvanced.init();\r\ndraw.init();\r\npaint.init();\r\nimages.init();\r\nfont.init();\r\nprint.init();\r\nkeyboard.init();\r\nmouse.init();\r\ntouch.init();\r\ngamepad.init();\r\npress.init();\r\nsound.init();\r\nplay.init();\r\nplugins.init();\r\n\r\n// Append all the commands to the api\r\ncommands.processApi();\r\n\r\n// Load built-in fonts\r\nfontData.loadBuiltInFonts( api );\r\n\r\n// Set window.pi for browser environments\r\nif( typeof window !== \"undefined\" ) {\r\n\twindow.pi = api;\r\n\r\n\t// Set $ alias only if not already defined (avoid jQuery conflicts)\r\n\tif( window.$ === undefined ) {\r\n\t\twindow.$ = api;\r\n\t}\r\n}\r\n\r\n// Export for different module systems\r\nexport default api;\r\nexport { api as pi };\r\n"],
  "mappings": "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",
  "names": ["width", "height", "pad", "api", "addCommand", "init", "m_commandList", "init", "canvas", "addCommand", "processApiCommand", "screen", "width", "height", "init", "addCommand", "width", "height", "init", "addCommand", "init", "key", "addCommand", "width", "height", "init", "addCommand", "rect", "init", "onWindowBlur", "addCommand", "getScreenDataFromEvent", "rect", "init", "addCommand", "touchArr", "init", "onWindowBlur", "init", "addCommand", "customData", "init", "width", "height", "addCommand", "init", "set", "x2", "y2", "dy", "dx", "addCommand", "point", "init", "addCommand", "init", "addCommand", "width", "height", "init", "width", "height", "addCommand", "canvas", "init", "width", "height", "addCommand", "i", "init", "addCommand", "width", "init", "sound", "init", "wait", "m_api", "m_isInitialized", "init", "addCommand", "api", "init"]
}
