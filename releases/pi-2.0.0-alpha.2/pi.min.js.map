{
  "version": 3,
  "sources": ["../src/core/utils.js", "../src/core/state-settings.js", "../src/core/screen-manager.js", "../src/graphics/renderer-webgl2.js", "../src/graphics/pens.js", "../src/graphics/graphics-api.js", "../src/graphics/colors.js", "../src/graphics/graphics-primitives.js", "../src/graphics/graphics-shapes.js", "../src/graphics/shaders/point.vert", "../src/graphics/shaders/point.frag", "../src/graphics/shaders/image.vert", "../src/graphics/shaders/image.frag", "../src/graphics/shaders/display.vert", "../src/graphics/shaders/display.frag", "../src/graphics/renderer-canvas2d.js", "../src/core/plugins.js", "../src/graphics/pixels.js", "../src/graphics/images.js", "../src/input/events.js", "../src/index.js"],
  "sourceRoot": "../src/",
  "sourcesContent": ["/**\r\n * Pi.js - Utilities Module\r\n * \r\n * Common utility functions for math, colors, types, and data manipulation.\r\n * \r\n * @module core/utils\r\n */\r\n\r\n\"use strict\";\r\n\r\n\r\n/***************************************************************************************************\r\n * General Utility Functions\r\n **************************************************************************************************/\r\n\r\n\r\nexport const errFn = ( commandName ) => {\r\n\tconst error = new Error(\r\n\t\t`${commandName}: No screens available for command. You must first create a ` +\r\n\t\t`screen with $.screen command.`\r\n\t);\r\n\terror.code = \"NO_SCREEN\";\r\n\tthrow error;\r\n};\r\n\r\n/**\r\n * Parse options - normalizes input arguments into an object with named parameters.\r\n *\r\n * @param {Array<any>} args - Arguments passed to the command (from rest parameters like `...args`).\r\n * @param {Array<string>} parameterNames - Array of parameter names in expected order.\r\n * @returns {Object<string, any>} \tAn object where keys are `parameterNames` and values are the \r\n * \t\t\t\t\t\t\t\t\tparsed arguments. Missing values will be `null`.\r\n */\r\nexport function parseOptions( args, parameterNames ) {\r\n\tconst resultOptions = {};\r\n\r\n\t// Initialize all named parameters to null\r\n\tfor( const name of parameterNames ) {\r\n\t\tresultOptions[ name ] = null;\r\n\t}\r\n\r\n\tlet isNamedParameterFound = false;\r\n\r\n\t// Case 1: First argument is an object literal\r\n\tif( args.length > 0 && isObjectLiteral( args[ 0 ] ) ) {\r\n\t\tconst inputOptions = args[ 0 ];\r\n\r\n\t\tfor( const name of parameterNames ) {\r\n\t\t\tif( name in inputOptions ) {\r\n\t\t\t\tisNamedParameterFound = true;\r\n\t\t\t\tresultOptions[ name ] = inputOptions[ name ];\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\t\r\n\t// If no named parameters found then treat as positional array\r\n\tif( !isNamedParameterFound ) {\r\n\r\n\t\t// Case 2: Arguments are passed positionally\r\n\t\t// Map the positional arguments to the named parameters\r\n\t\t// If args[ i ] is out of bounds, it remains null from initialization\r\n\t\tfor( let i = 0; i < parameterNames.length; i++ ) {\r\n\t\t\tif( i < args.length ) {\r\n\t\t\t\tresultOptions[ parameterNames[ i ] ] = args[ i ];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn resultOptions;\r\n}\r\n\r\n// Type checking utilities\r\nexport const isFunction = ( fn ) => typeof fn === \"function\";\r\nexport const isDomElement = ( el ) => el instanceof Element;\r\nexport const isObjectLiteral = ( obj ) => {\r\n\tif( typeof obj !== \"object\" || obj === null || Array.isArray( obj ) ) {\r\n\t\treturn false;\r\n\t}\r\n\tconst proto = Object.getPrototypeOf( obj );\r\n\treturn proto === null || proto === Object.prototype;\r\n};\r\n\r\n// Data conversion utilities\r\n\r\n/**\r\n * Convert hex string to 2D data array\r\n * \r\n * @param {string} hex - Hex string\r\n * @param {number} width - Width of data\r\n * @param {number} height - Height of data\r\n * @returns {Array<Array<number>>} 2D array of binary data\r\n */\r\nexport function hexToData( hex, width, height ) {\r\n\thex = hex.toUpperCase();\r\n\tconst data = [];\r\n\tlet i = 0;\r\n\tlet digits = \"\";\r\n\tlet digitIndex = 0;\r\n\r\n\tfor( let y = 0; y < height; y++ ) {\r\n\t\tdata.push( [] );\r\n\t\tfor( let x = 0; x < width; x++ ) {\r\n\t\t\tif( digitIndex >= digits.length ) {\r\n\t\t\t\tlet hexPart = parseInt( hex[ i ], 16 );\r\n\t\t\t\tif( isNaN( hexPart ) ) {\r\n\t\t\t\t\thexPart = 0;\r\n\t\t\t\t}\r\n\t\t\t\tdigits = padL( hexPart.toString( 2 ), 4, \"0\" );\r\n\t\t\t\ti += 1;\r\n\t\t\t\tdigitIndex = 0;\r\n\t\t\t}\r\n\t\t\tdata[ y ].push( parseInt( digits[ digitIndex ] ) );\r\n\t\t\tdigitIndex += 1;\r\n\t\t}\r\n\t}\r\n\treturn data;\r\n}\r\n\r\n// Math utilities\r\n\r\n/**\r\n * Clamp a number between min and max\r\n * \r\n * @param {number} num - Number to clamp\r\n * @param {number} min - Minimum value\r\n * @param {number} max - Maximum value\r\n * @returns {number} Clamped value\r\n */\r\nexport function clamp( num, min, max ) {\r\n\treturn Math.min( Math.max( num, min ), max );\r\n}\r\n\r\n/**\r\n * Check if a point is in a rectangle\r\n * \r\n * @param {Object} point - Point with x, y properties\r\n * @param {Object} hitBox - Rectangle with x, y, width, height properties\r\n * @returns {boolean} True if point is inside rectangle\r\n */\r\nexport function inRange( point, hitBox ) {\r\n\treturn point.x >= hitBox.x && point.x < hitBox.x + hitBox.width &&\r\n\t\tpoint.y >= hitBox.y && point.y < hitBox.y + hitBox.height;\r\n}\r\n\r\n/**\r\n * Check if coordinates are in a rectangle\r\n * \r\n * @param {number} x1 - Point x\r\n * @param {number} y1 - Point y\r\n * @param {number} x2 - Rectangle x\r\n * @param {number} y2 - Rectangle y\r\n * @param {number} width - Rectangle width\r\n * @param {number} height - Rectangle height\r\n * @returns {boolean} True if point is inside rectangle\r\n */\r\nexport function inRange2( x1, y1, x2, y2, width, height ) {\r\n\treturn x1 >= x2 && x1 < x2 + width &&\r\n\t\ty1 >= y2 && y1 < y2 + height;\r\n}\r\n\r\n/**\r\n * Generate random number in range\r\n * \r\n * @param {number} min - Minimum value\r\n * @param {number} max - Maximum value\r\n * @returns {number} Random number between min and max\r\n */\r\nexport function rndRange( min, max ) {\r\n\treturn Math.random() * ( max - min ) + min;\r\n}\r\n\r\n/**\r\n * Convert degrees to radians\r\n * \r\n * @param {number} deg - Degrees\r\n * @returns {number} Radians\r\n */\r\nexport function degreesToRadian( deg ) {\r\n\treturn deg * ( Math.PI / 180 );\r\n}\r\n\r\n/**\r\n * Convert radians to degrees\r\n * \r\n * @param {number} rad - Radians\r\n * @returns {number} Degrees\r\n */\r\nexport function radiansToDegrees( rad ) {\r\n\treturn rad * ( 180 / Math.PI );\r\n}\r\n\r\n// String utilities\r\n\r\n/**\r\n * Pad string on left\r\n * \r\n * @param {string} str - String to pad\r\n * @param {number} len - Target length\r\n * @param {string} c - Padding character\r\n * @returns {string} Padded string\r\n */\r\nexport function padL( str, len, c ) {\r\n\tif( typeof c !== \"string\" ) {\r\n\t\tc = \" \";\r\n\t}\r\n\tlet pad = \"\";\r\n\tstr = str + \"\";\r\n\tfor( let i = str.length; i < len; i++ ) {\r\n\t\tpad += c;\r\n\t}\r\n\treturn pad + str;\r\n}\r\n\r\n/**\r\n * Pad string on both sides\r\n * \r\n * @param {string} str - String to pad\r\n * @param {number} len - Target length\r\n * @param {string} c - Padding character\r\n * @returns {string} Padded string\r\n */\r\nexport function pad( str, len, c ) {\r\n\tif( typeof c !== \"string\" || c.length === 0 ) {\r\n\t\tc = \" \";\r\n\t}\r\n\tstr = str + \"\";\r\n\twhile( str.length < len ) {\r\n\t\tstr = c + str + c;\r\n\t}\r\n\tif( str.length > len ) {\r\n\t\tstr = str.substring( 0, len );\r\n\t}\r\n\treturn str;\r\n}\r\n\r\n/**\r\n * Parse integer with default value\r\n * \r\n * @param {*} val - Value to parse\r\n * @param {number} def - Default value if parsing fails\r\n * @returns {number} Parsed integer or default\r\n */\r\nexport function getInt( val, def ) {\r\n\tif( val === null || val === undefined ) {\r\n\t\treturn def;\r\n\t}\r\n\tconst parsed = Number( val );\r\n\tif( !Number.isFinite( parsed ) ) {\r\n\t\treturn def;\r\n\t}\r\n\r\n\treturn Math.round( parsed );\r\n}\r\n\r\n/**\r\n * Parse float with default value\r\n * \r\n * @param {*} val - Value to parse\r\n * @param {number} def - Default value if parsing fails\r\n * @returns {number} Parsed float or default\r\n */\r\nexport function getFloat( val, def ) {\r\n\tif( val === null || val === undefined ) {\r\n\t\treturn def;\r\n\t}\r\n\tconst parsed = Number( val );\r\n\tif( !Number.isFinite( parsed ) ) {\r\n\t\treturn def;\r\n\t}\r\n\r\n\treturn parsed;\r\n}\r\n\r\n// Queue microtask (built-in in modern browsers)\r\n// Wrap to preserve window context\r\nexport const queueMicrotask = ( callback ) => {\r\n\tif( window.queueMicrotask ) {\r\n\t\twindow.queueMicrotask( callback );\r\n\t} else {\r\n\t\tsetTimeout( callback, 0 );\r\n\t}\r\n};\r\n\r\n\r\n/***************************************************************************************************\r\n * Color Utility Functions\r\n **************************************************************************************************/\r\n\r\n\r\nconst COLOR_PROTO = {\r\n\t\"key\": 0,\r\n\t\"r\": 0,\r\n\t\"g\": 0,\r\n\t\"b\": 0,\r\n\t\"a\": 0,\r\n\t\"rgba\": \"\",\r\n\t\"hex\": \"\"\r\n};\r\nconst m_colorCheckerContext = document.createElement( \"canvas\" ).getContext(\r\n\t\"2d\", { \"willReadFrequently\": true }\r\n);\r\n\r\n/**\r\n * Generates a unique 32-bit integer key for an opaque RGB color.\r\n * Each color component (R, G, B) is assumed to be an 8-bit integer (0-255).\r\n * The components are packed in the order: Red | Green | Blue.\r\n *\r\n * @param {number} r - Red component (0-255).\r\n * @param {number} g - Green component (0-255).\r\n * @param {number} b - Blue component (0-255).\r\n * @param {number} a - Alpha component (0-255).\r\n * @returns {number} A 32-bit integer representing the color.\r\n */\r\nexport function generateColorKey( r, g, b, a ) {\r\n\treturn ( r << 24 ) | ( g << 16 ) | ( b << 8 ) | a;\r\n}\r\n\r\n/**\r\n * Convert RGB to color object\r\n * \r\n * @param {number} r - Red component (0-255)\r\n * @param {number} g - Green component (0-255)\r\n * @param {number} b - Blue component (0-255)\r\n * @param {number} a - Alpha component (0-255)\r\n * @returns {Object} Color object\r\n */\r\nexport function rgbToColor( r, g, b, a ) {\r\n\tconst hex = rgbToHex( r, g, b, a );\r\n\treturn createColor( r, g, b, a, hex );\r\n}\r\n\r\n/**\r\n * Convert various color formats to color object\r\n * \r\n * @param {*} color - Color in various formats\r\n * @returns {Object|null} Color object or null if invalid\r\n */\r\nexport function convertToColor( color ) {\r\n\tif( color === undefined || color === null || color === \"\" ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Check if color is already a color prototype object\r\n\tif( Object.getPrototypeOf( color ) === COLOR_PROTO ) {\r\n\t\treturn color;\r\n\t} else if( Array.isArray( color ) ) {\r\n\r\n\t\t// Array format [r, g, b, a]\r\n\t\tif( color.length < 3 ) {\r\n\t\t\treturn null;\r\n\t\t} else if( color.length === 3 ) {\r\n\t\t\tcolor.push( 255 );\r\n\t\t}\r\n\t} else if( color.r !== undefined ) {\r\n\r\n\t\t// Convert from object literal or color object\r\n\t\tcolor = [ color.r, color.g, color.b, color.a ];\r\n\t} else if( typeof color === \"string\" ) {\r\n\r\n\t\t// Check if is hex format\r\n\t\tconst checkHexColor = /(^#[0-9A-F]{8}$)|(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;\r\n\t\tif( checkHexColor.test( color ) ) {\r\n\t\t\treturn hexToColor( color );\r\n\t\t}\r\n\r\n\t\t// RGB/RGBA format\r\n\t\tif( color.indexOf( \"rgb\" ) === 0 ) {\r\n\t\t\tcolor = splitRgb( color );\r\n\t\t\tif( color.length < 3 ) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else if( color.length === 3 ) {\r\n\t\t\t\tcolor.push( 255 );\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\t// Named color or other CSS color\r\n\t\t\treturn colorStringToColor( color );\r\n\t\t}\r\n\t}\r\n\r\n\t// Parse rgb colors\r\n\tfor( let i = 0; i < 3; i += 1 ) {\r\n\t\tcolor[ i ] = getInt( color[ i ], 0 );\r\n\t}\r\n\r\n\t// Parse alpha\r\n\tcolor[ 3 ] = getFloat( color[ 3 ], 0 );\r\n\tif( color[ 3 ] < 1 ) {\r\n\t\tcolor[ 3 ] = Math.round( color[ 3 ] * 255 );\r\n\t} else {\r\n\t\tcolor[ 3 ] = Math.round( color[ 3 ] );\r\n\t}\r\n\t\r\n\treturn rgbToColor( color[ 0 ], color[ 1 ], color[ 2 ], color[ 3 ] );\r\n}\r\n\r\nexport function calcColorDifference( c1, c2, w = [ 0.2, 0.68, 0.07, 0.05 ] ) {\r\n\tconst dr = c1.r - c2.r;\r\n\tconst dg = c1.g - c2.g;\r\n\tconst db = c1.b - c2.b;\r\n\tconst da = c1.a - c2.a;\r\n\r\n\treturn ( dr * dr * w[ 0 ] + dg * dg * w[ 1 ] + db * db * w[ 2 ] + da * da * w[ 3 ] );\r\n}\r\n\r\nfunction createColor( r, g, b, a, hex ) {\r\n\tconst color = Object.create( COLOR_PROTO );\r\n\tcolor.key = generateColorKey( r, g, b, a, hex );\r\n\tcolor.r = r;\r\n\tcolor.g = g;\r\n\tcolor.b = b;\r\n\tcolor.a = a;\r\n\tcolor.rgba = `rgba(${r},${g},${b},${( a / 255 ).toFixed( 3 )})`;\r\n\tcolor.hex = hex;\r\n\treturn color;\r\n}\r\n\r\nexport function setColor( colorSrc, colorDest ) {\r\n\tcolorDest.key = colorSrc.key;\r\n\tcolorDest.r = colorSrc.r;\r\n\tcolorDest.g = colorSrc.g;\r\n\tcolorDest.b = colorSrc.b;\r\n\tcolorDest.a = colorSrc.a;\r\n\tcolorDest.rgba = colorSrc.rgba;\r\n\tcolorDest.hex = colorSrc.hex;\r\n}\r\n\r\n/**\r\n * Convert hex color to color object\r\n * \r\n * @param {string} hex - Hex color string (#RGB, #RRGGBB, or #RRGGBBAA)\r\n * @returns {Object} Color object with r, g, b, a, s, s2 properties\r\n */\r\nfunction hexToColor( hex ) {\r\n\tlet r, g, b, a;\r\n\r\n\tif( hex.length === 4 ) {\r\n\t\tr = parseInt( hex.slice( 1, 2 ), 16 ) * 16 - 1;\r\n\t\tg = parseInt( hex.slice( 2, 3 ), 16 ) * 16 - 1;\r\n\t\tb = parseInt( hex.slice( 3, 4 ), 16 ) * 16 - 1;\r\n\t} else {\r\n\t\tr = parseInt( hex.slice( 1, 3 ), 16 );\r\n\t\tg = parseInt( hex.slice( 3, 5 ), 16 );\r\n\t\tb = parseInt( hex.slice( 5, 7 ), 16 );\r\n\t}\r\n\r\n\tif( hex.length === 9 ) {\r\n\t\ta = parseInt( hex.slice( 7, 9 ), 16 );\r\n\t} else {\r\n\t\ta = 255;\r\n\t}\r\n\r\n\treturn createColor( r, g, b, a, hex );\r\n}\r\n\r\n/**\r\n * Split RGB/RGBA string into components\r\n * \r\n * @param {string} s - RGB or RGBA string\r\n * @returns {Array<number>} Array of color components\r\n */\r\nfunction splitRgb( s ) {\r\n\ts = s.slice( s.indexOf( \"(\" ) + 1, s.indexOf( \")\" ) );\r\n\tconst parts = s.split( \",\" );\r\n\tconst colors = [];\r\n\tfor( let i = 0; i < parts.length; i++ ) {\r\n\t\tlet val;\r\n\t\tif( i === 3 ) {\r\n\t\t\tval = parseFloat( parts[ i ].trim() );\r\n\t\t\tif( val <= 1 ) {\r\n\t\t\t\tval *= 255;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tval = parseInt( parts[ i ].trim() );\r\n\t\t}\r\n\t\tcolors.push( val );\r\n\t}\r\n\treturn colors;\r\n}\r\n\r\n/**\r\n * Convert color component to hex\r\n * \r\n * @param {number} c - Color component (0-255)\r\n * @returns {string} Hex string\r\n */\r\nfunction cToHex( c ) {\r\n\tif( !Number.isInteger( c ) ) {\r\n\t\tc = Math.round( c );\r\n\t}\r\n\tc = clamp( c, 0, 255 );\r\n\tconst hex = Number( c ).toString( 16 );\r\n\treturn hex.length < 2 ? \"0\" + hex : hex.toUpperCase();\r\n}\r\n\r\n/**\r\n * Convert RGB to hex color\r\n * \r\n * @param {number} r - Red component (0-255)\r\n * @param {number} g - Green component (0-255)\r\n * @param {number} b - Blue component (0-255)\r\n * @param {number} a - Alpha component (0-255), defaults to 255\r\n * @returns {string} Hex color string\r\n */\r\nfunction rgbToHex( r, g, b, a ) {\r\n\tif( isNaN( a ) ) {\r\n\t\ta = 255;\r\n\t}\r\n\treturn \"#\" + cToHex( r ) + cToHex( g ) + cToHex( b ) + cToHex( a );\r\n}\r\n\r\n/**\r\n * Convert color string to color object using canvas\r\n * \r\n * @param {string} colorStr - CSS color string\r\n * @returns {Object} Color object\r\n */\r\nfunction colorStringToColor( colorStr ) {\r\n\tm_colorCheckerContext.clearRect( 0, 0, 1, 1 );\r\n\tm_colorCheckerContext.fillStyle = colorStr;\r\n\tm_colorCheckerContext.fillRect( 0, 0, 1, 1 );\r\n\tconst data = m_colorCheckerContext.getImageData( 0, 0, 1, 1 ).data;\r\n\treturn rgbToColor( data[ 0 ], data[ 1 ], data[ 2 ], data[ 3 ] );\r\n}\r\n", "/**\r\n * Pi.js - State/Settings Module - Handles set and ready command\r\n * \r\n * @module core/state-settings\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_utils from \"./utils.js\";\r\nimport * as g_screenManager from \"./screen-manager.js\";\r\n\r\nconst m_settings = {};\r\nlet m_readyCallbacks = [];\r\nlet m_isDocumentReady = false;\r\nlet m_waitCount = 0;\r\nlet m_checkReadyTimeout = null;\r\nlet m_commands = [];\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\nexport function init( api ) {\r\n\r\n\t// Set up document ready detection\r\n\tif( typeof document !== \"undefined\" ) {\r\n\t\tif( document.readyState === \"loading\" ) {\r\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", onDocumentReady );\r\n\t\t} else {\r\n\r\n\t\t\t// Document already ready\r\n\t\t\tm_isDocumentReady = true;\r\n\t\t}\r\n\t} else {\r\n\r\n\t\t// Not in browser environment, mark as ready immediately\r\n\t\tm_isDocumentReady = true;\r\n\t}\r\n\r\n\tregisterCommands( api );\r\n\tg_screenManager.addScreenInitFunction( processScreenCommands );\r\n}\r\n\r\nfunction registerCommands( api ) {\r\n\r\n\t// Register non screen commands\r\n\taddCommand( \"ready\", ready, false, [ \"callback\" ] );\r\n\taddCommand( \"set\", set, true, [ \"options\" ], true );\r\n}\r\n\r\n/**\r\n * Increment wait count - called by modules when starting async operations\r\n */\r\nexport function wait() {\r\n\tm_waitCount++;\r\n}\r\n\r\n/**\r\n * Decrement wait count - called by modules when async operations complete\r\n */\r\nexport function done() {\r\n\tm_waitCount--;\r\n\tif( m_waitCount < 0 ) {\r\n\t\tm_waitCount = 0;\r\n\t}\r\n\r\n\t// Check if ready to trigger callbacks\r\n\tscheduleReadyCheck();\r\n}\r\n\r\nexport function addSetting( name, fn, isScreen ) {\r\n\tm_settings[ name ] = { fn, isScreen };\r\n}\r\n\r\nexport function addCommand( name, fn, isScreen, parameterNames, isScreenOptional ) {\r\n\tm_commands.push( { name, fn, isScreen, parameterNames, isScreenOptional } );\r\n\tif( name.startsWith( \"set\" ) && name !== \"set\" ) {\r\n\t\tconst settingName = name.substring( 3, 4 ).toLowerCase() + name.substring( 4 );\r\n\t\tm_settings[ settingName ] = { fn, isScreen, \"parameterNames\": parameterNames };\r\n\t}\r\n}\r\n\r\nexport function processCommands( api ) {\r\n\tfor( const command of m_commands ) {\r\n\t\tconst { name, fn, isScreen, parameterNames, isScreenOptional } = command;\r\n\t\tif( isScreen ) {\r\n\t\t\tapi[ name ] = ( ...args ) => {\r\n\t\t\t\tconst options = g_utils.parseOptions( args, parameterNames );\r\n\t\t\t\tconst screenData = g_screenManager.getActiveScreen( name, isScreenOptional );\r\n\t\t\t\treturn fn( screenData, options );\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tapi[ name ] = ( ...args ) => {\r\n\t\t\t\tconst options = g_utils.parseOptions( args, parameterNames );\r\n\t\t\t\treturn fn( options );\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction processScreenCommands( screenData ) {\r\n\tfor( const command of m_commands ) {\r\n\t\tconst { name, fn, isScreen, parameterNames } = command;\r\n\t\tif( isScreen ) {\r\n\t\t\tscreenData.api[ name ] = ( ...args ) => {\r\n\t\t\t\tconst options = g_utils.parseOptions( args, parameterNames );\r\n\t\t\t\treturn fn( screenData, options );\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * External API Commands\r\n **************************************************************************************************/\r\n\r\n/**\r\n * ready command - waits for document ready and all pending resources\r\n * \r\n * Supports both callback and promise patterns:\r\n *   - $.ready( callback )        // Callback style\r\n *   - await $.ready()            // Promise style\r\n *   - $.ready().then( ... )      // Promise .then() style\r\n * \r\n * Behavior:\r\n *   - Never executes immediately (always defers to next tick)\r\n *   - Waits for document ready AND all resources with pending wait count\r\n *   - All ready() calls before resources are loaded trigger together\r\n *   - Each callback/promise only triggers once\r\n * \r\n * Example:\r\n *   $.loadImage( \"a.png\", \"a\" );\r\n *   $.loadImage( \"b.png\", \"b\" );\r\n *   $.ready( () => console.log( \"Both loaded\" ) );\r\n *   // Waits for both a and b, triggers once\r\n */\r\nfunction ready( callback ) {\r\n\r\n\t// Validate callback if provided\r\n\tif( callback != null && !g_utils.isFunction( callback ) ) {\r\n\t\tconst error = new TypeError( \"ready: Parameter callback must be a function.\" );\r\n\t\terror.code = \"INVALID_CALLBACK\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Never execute immediately - always defer to next tick\r\n\treturn new Promise( ( resolve ) => {\r\n\t\tm_readyCallbacks.push( {\r\n\t\t\t\"callback\": callback,\r\n\t\t\t\"resolve\": resolve,\r\n\t\t\t\"triggered\": false\r\n\t\t} );\r\n\r\n\t\t// Schedule a check for next tick (allows more resources to be added in same thread)\r\n\t\tscheduleReadyCheck();\r\n\t} );\r\n}\r\n\r\n\r\n// Global settings command\r\n// This can get called from either the global api or directly from a screenData.api.\r\n// screenData can be null if no screen is available\r\nexport function set( screenData, options ) {\r\n\r\n\t// Loop through all the options\r\n\tfor( const optionName in options ) {\r\n\r\n\t\t// Skip blanks\r\n\t\tif( options[ optionName ] === null ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// If the option is a valid setting\r\n\t\tif( m_settings[ optionName ] ) {\r\n\r\n\t\t\t// Get the setting data\r\n\t\t\tconst setting = m_settings[ optionName ];\r\n\t\t\tconst optionValues = options[ optionName ];\r\n\r\n\t\t\t// Parse the options from the setting\r\n\t\t\t// Wrap optionValues in array if not already an array\r\n\t\t\t//const argsArray = Array.isArray( optionValues ) ? optionValues : [ optionValues ];\r\n\t\t\tconst argsArray = [ optionValues ];\r\n\t\t\tconst parsedOptions = g_utils.parseOptions( argsArray, setting.parameterNames );\r\n\r\n\t\t\t// TODO: Need to handle when setting multiple commands that trigger api rebuilds so that\r\n\t\t\t// we can defer the api rebuilds until after settings are done. This will allow the \r\n\t\t\t// user to do things like set both a pen and a blend and the api will only rebuild one\r\n\t\t\t// time. But since the rebuild will have to be completed before any new graphics \r\n\t\t\t// commands get called this will be tricky. It would be nice to implement in the\r\n\t\t\t// build functions themselves but probably best to handle it here.\r\n\r\n\t\t\t// Call the setting function\r\n\t\t\tif( setting.isScreen ) {\r\n\t\t\t\tsetting.fn( screenData, parsedOptions );\r\n\t\t\t} else {\r\n\t\t\t\tsetting.fn( parsedOptions );\r\n\t\t\t}\r\n\r\n\t\t\t// If we just set the screen then refresh the active screen\r\n\t\t\t// This allows for setting of multiple different screens in one call\r\n\t\t\tif( optionName === \"screen\" ) {\r\n\t\t\t\tscreenData = g_screenManager.getActiveScreen();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Internal Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Called when document is ready\r\nfunction onDocumentReady() {\r\n\tm_isDocumentReady = true;\r\n\r\n\t// Check if we can trigger ready callbacks\r\n\tscheduleReadyCheck();\r\n}\r\n\r\n// Schedule a ready check on next tick (allows more load calls in same thread)\r\nfunction scheduleReadyCheck() {\r\n\r\n\t// Clear any existing timeout\r\n\tif( m_checkReadyTimeout !== null ) {\r\n\t\tclearTimeout( m_checkReadyTimeout );\r\n\t}\r\n\r\n\t// Schedule check for next tick\r\n\tm_checkReadyTimeout = setTimeout( checkReady, 0 );\r\n}\r\n\r\n// Check if all conditions are met to trigger ready callbacks\r\nfunction checkReady() {\r\n\tm_checkReadyTimeout = null;\r\n\r\n\t// Don't check if document not ready\r\n\tif( !m_isDocumentReady ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Don't trigger if resources are still loading\r\n\tif( m_waitCount !== 0 ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Trigger all pending ready callbacks together\r\n\t// Note: All ready() calls registered before this point will trigger at once\r\n\t// This allows loads in the same thread to be captured before triggering\r\n\tconst callbacks = m_readyCallbacks.slice();\r\n\tm_readyCallbacks = [];\r\n\r\n\tfor( const item of callbacks ) {\r\n\r\n\t\t// Skip if already triggered (shouldn't happen, but safety check)\r\n\t\tif( item.triggered ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// Mark as triggered (ensures each callback only runs once)\r\n\t\titem.triggered = true;\r\n\r\n\t\t// Execute callback and resolve promise\r\n\t\tif( item.callback ) {\r\n\t\t\titem.callback();\r\n\t\t}\r\n\t\titem.resolve();\r\n\t}\r\n}\r\n", "/**\r\n * Pi.js - Screen Manager Core Module\r\n * \r\n * Screen creation and management for Pi.js.\r\n * Creates canvas elements, manages multiple screens, handles aspect ratios.\r\n * \r\n * @module core/screen-manager\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_utils from \"./utils.js\";\r\nimport * as g_webgl2Renderer from \"../graphics/renderer-webgl2.js\";\r\nimport * as g_canvas2dRenderer from \"../graphics/renderer-canvas2d.js\";\r\nimport * as g_state from \"./state-settings.js\";\r\nimport * as g_pens from \"../graphics/pens.js\";\r\n\r\nconst WEBGL2_RENDER_MODE = \"webgl2\";\r\nconst CANVAS2D_RENDER_MODE = \"canvas2d\";\r\nconst MAX_CANVAS_DIMENSION = 8192;\r\n\r\nconst SCREEN_API_PROTO = { \"screen\": true };\r\nconst m_screens = {};\r\nconst m_screenDataItems = {};\r\nconst m_screenDataItemGetters = [];\r\nconst m_screenDataInitFunctions = [];\r\nconst m_screenDataResizeFunctions = [];\r\nconst m_screenDataCleanupFunctions = [];\r\n\r\n\r\nlet m_nextScreenId = 0;\r\nlet m_activeScreenData = null;\r\nlet m_resizeObserver = null;\r\nconst m_observedContainers = new Set();\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\nexport { m_activeScreenData as activeScreenData };\r\nexport { WEBGL2_RENDER_MODE, CANVAS2D_RENDER_MODE };\r\n\r\n/**\r\n * Get all active screens\r\n * \r\n * @returns {Array<Object>} Array of all screen data objects\r\n */\r\nexport function getAllScreens() {\r\n\tconst screens = [];\r\n\tfor( const id in m_screens ) {\r\n\t\tscreens.push( m_screens[ id ] );\r\n\t}\r\n\treturn screens;\r\n}\r\n\r\nexport function init( api ) {\r\n\r\n\t// TODO: Add matchMedia to watch for DPR changes - if a user moves a browser to a new monitor\r\n\t// it could cause the canvas image to become blury, even if the actual CSS size of the canvas.\r\n\t// doesn't change.\r\n\t// matchMedia( `(resolution: ${dpr}dppx)` ).addEventListener( \"change\", resizeCanvases );\r\n\r\n\t// Create a single ResizeObserver for all screen containers\r\n\tm_resizeObserver = new ResizeObserver( ( entries ) => {\r\n\t\tfor( const entry of entries ) {\r\n\t\t\tconst container = entry.target;\r\n\t\t\t\r\n\t\t\t// Find all canvas elements in this container\r\n\t\t\tconst canvases = container.querySelectorAll( \"canvas[data-screen-id]\" );\r\n\t\t\tif( canvases.length === 0 ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Resize all screens in this container\r\n\t\t\tfor( const canvas of canvases ) {\r\n\t\t\t\tconst screenId = parseInt( canvas.dataset.screenId, 10 );\r\n\t\t\t\tconst screenData = m_screens[ screenId ];\r\n\t\t\t\t\r\n\t\t\t\tif( screenData ) {\r\n\t\t\t\t\tresizeScreen( screenData, false );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n\tregisterCommands();\r\n}\r\n\r\nfunction registerCommands() {\r\n\r\n\t// Global commands\r\n\tg_state.addCommand(\r\n\t\t\"screen\",\r\n\t\tscreen,\r\n\t\tfalse,\r\n\t\t[ \"aspect\", \"container\", \"isOffscreen\", \"isNoStyles\", \"resizeCallback\", \"useCanvas2d\" ]\r\n\t);\r\n\tg_state.addCommand( \"setScreen\", setScreen, false, [ \"screen\" ] );\r\n\tg_state.addCommand( \"getScreen\", getScreen, false, [ \"screenId\" ] );\r\n\tg_state.addCommand( \"removeScreen\", removeScreen, false, [ \"screenId\" ] );\r\n\r\n\t// Screen-scoped info commands\r\n\tg_state.addCommand( \"width\", widthCmd, true, [] );\r\n\tg_state.addCommand( \"height\", heightCmd, true, [] );\r\n\tg_state.addCommand( \"canvas\", canvasCmd, true, [] );\r\n}\r\n\r\nexport function addScreenDataItem( name, val ) {\r\n\tm_screenDataItems[ name ] = val;\r\n}\r\n\r\nexport function addScreenDataItemGetter( name, fn ) {\r\n\tm_screenDataItemGetters.push( { name, fn } );\r\n}\r\n\r\nexport function addScreenInitFunction( fn ) {\r\n\tm_screenDataInitFunctions.push( fn );\r\n}\r\n\r\nexport function addScreenResizeFunction( fn ) {\r\n\tm_screenDataResizeFunctions.push( fn );\r\n}\r\n\r\nexport function addScreenCleanupFunction( fn ) {\r\n\tm_screenDataCleanupFunctions.push( fn );\r\n}\r\n\r\nexport function getActiveScreen( fnName, isScreenOptional ) {\r\n\tif( m_activeScreenData === null && !isScreenOptional ) {\r\n\t\tconst error = new Error(\r\n\t\t\tfnName + \": You are attempting to call a method that requires a screen but there \" +\r\n\t\t\t\"there is currently no active screen. Call $.screen() before calling any graphics \" +\r\n\t\t\t\"commands.\"\r\n\t\t);\r\n\t\terror.code = \"NO_ACTIVE_SCREEN\";\r\n\t\tthrow error;\r\n\t}\r\n\treturn m_activeScreenData;\r\n}\r\n\r\n/***************************************************************************************************\r\n * Screen Command\r\n **************************************************************************************************/\r\n\r\n\r\nfunction screen( options ) {\r\n\r\n\t// Validate resize callback\r\n\tif( options.resizeCallback != null && !g_utils.isFunction( options.resizeCallback ) ) {\r\n\t\tconst error = new TypeError( \"screen: Parameter resizeCallback must be a function.\" );\r\n\t\terror.code = \"INVALID_CALLBACK\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tconst screenData = {\r\n\t\t\"id\": m_nextScreenId,\r\n\t\t\"useCanvas2d\": !!options.useCanvas2d,\r\n\t\t\"isOffscreen\": !!options.isOffscreen,\r\n\t\t\"isNoStyles\": !!options.isNoStyles,\r\n\t\t\"resizeCallback\": options.resizeCallback,\r\n\t\t\"api\":  Object.create( SCREEN_API_PROTO ),\r\n\t\t\"canvas\": null,\r\n\t\t\"width\": null,\r\n\t\t\"height\": null,\r\n\t\t\"container\": null,\r\n\t\t\"aspectData\": null,\r\n\t\t\"clientRect\": null,\r\n\t\t\"previousOffsetSize\": null\r\n\t};\r\n\r\n\t// Force canvas2d use if not webgl2Capable\r\n\tif( !g_webgl2Renderer.isWebgl2Capable ) {\r\n\t\tscreenData.useCanvas2d = true;\r\n\t}\r\n\r\n\t// Append additional items onto the screendata\r\n\tObject.assign( screenData, structuredClone( m_screenDataItems ) );\r\n\r\n\t// Append dynamic screendata items\r\n\tfor( const itemGetter of m_screenDataItemGetters ) {\r\n\t\tscreenData[ itemGetter.name ] = structuredClone( itemGetter.fn() );\r\n\t}\r\n\r\n\t// Increment to the next screen id\r\n\tm_nextScreenId += 1;\r\n\r\n\tif( !options.aspect ) {\r\n\t\tscreenData.aspectData = {\r\n\t\t\t\"width\": null,\r\n\t\t\t\"height\": null,\r\n\t\t\t\"splitter\": \"\",\r\n\t\t\t\"isFixedSize\": false\r\n\t\t};\r\n\t}\r\n\t// Parse aspect ratio\r\n\tif( typeof options.aspect === \"string\" && options.aspect !== \"\" ) {\r\n\t\tscreenData.aspectData = parseAspect( options.aspect.toLowerCase() );\r\n\t\tif( !screenData.aspectData ) {\r\n\t\t\tconst error = new Error( \"screen: Parameter aspect is not valid.\" );\r\n\t\t\terror.code = \"INVALID_ASPECT\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\t// If it's not a ratio validate the dimensions\r\n\t\tif( screenData.aspectData.splitter !== \":\" ) {\r\n\t\t\tvalidateDimensions( screenData.aspectData.width, screenData.aspectData.height );\r\n\t\t}\r\n\t}\r\n\r\n\t// Force canvas2d if not capable of webgl2\r\n\tif( !g_webgl2Renderer.isWebgl2Capable ) {\r\n\t\tscreenData.useCanvas2d = true;\r\n\t}\r\n\r\n\t// Create the canvas\r\n\tscreenData.canvas = document.createElement( \"canvas\" );\r\n\r\n\t// Setup options for offscreen canvas\r\n\tif( screenData.isOffscreen ) {\r\n\t\tif( !screenData.aspectData ) {\r\n\t\t\tconst error = new Error(\r\n\t\t\t\t\"screen: You must supply an aspect ratio with exact dimensions \" +\r\n\t\t\t\t\"for offscreen screens.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"NO_ASPECT_OFFSCREEN\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tif( screenData.aspectData.splitter !== \"x\" ) {\r\n\t\t\tconst error = new Error(\r\n\t\t\t\t\"screen: You must use aspect ratio with e(x)act pixel dimensions for offscreen \" +\r\n\t\t\t\t\"screens. For example: 320x200 for width of 320 and height of 200 pixels.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_OFFSCREEN_ASPECT\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tsetupOffscreenCanvasOptions( screenData );\r\n\t} else {\r\n\r\n\t\t// Setup options for onscreen canvas\r\n\t\tscreenData.canvas.tabIndex = 0;\r\n\r\n\t\t// Get the container element from the dom if it's available\r\n\t\tif( typeof options.container === \"string\" ) {\r\n\t\t\tscreenData.container = document.getElementById( options.container );\r\n\t\t} else if( !options.container ) {\r\n\t\t\tscreenData.container = document.body;\r\n\t\t} else {\r\n\t\t\tscreenData.container = options.container;\r\n\t\t}\r\n\r\n\t\tif( !g_utils.isDomElement( screenData.container ) ) {\r\n\t\t\tconst error = new TypeError(\r\n\t\t\t\t\"screen: Invalid argument container. Container must be a DOM element or a string \" +\r\n\t\t\t\t\"id of a DOM element.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_CONTAINER\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\t// Create a no style canvas or default canvas\r\n\t\tif( !screenData.isNoStyles ) {\r\n\t\t\tsetDefaultCanvasOptions( screenData );\r\n\t\t}\r\n\r\n\t\t// Append the canvas to the container\r\n\t\tscreenData.container.appendChild( screenData.canvas );\r\n\r\n\t\t// Add container to the global resize observer (only if not already observed)\r\n\t\tif(\r\n\t\t\tm_resizeObserver && screenData.container &&\r\n\t\t\t!m_observedContainers.has( screenData.container )\r\n\t\t) {\r\n\t\t\tm_resizeObserver.observe( screenData.container );\r\n\t\t\tm_observedContainers.add( screenData.container );\r\n\t\t}\r\n\t}\r\n\t\r\n\tif( !screenData.isOffscreen ) {\r\n\t\tresizeScreen( screenData, true );\r\n\t}\r\n\r\n\t// Assign screen to active screen\r\n\tm_activeScreenData = screenData;\r\n\tm_screens[ screenData.id ] = screenData;\r\n\r\n\tsetupScreenRenderer( screenData );\r\n\r\n\t// Call init functions for all modules that need initialization\r\n\tfor( const fn of m_screenDataInitFunctions ) {\r\n\t\tfn( screenData );\r\n\t}\r\n\r\n\t// Setup the initial font for the screen\r\n\t//screenData.api.setFont( screenData.font.id );\r\n\r\n\t// Now call it to set the default pen\r\n\t// This will also trigger buildPenFn and buildGraphicsApi that are needed when a screen\r\n\t// is created.\r\n\tscreenData.api.setPen( g_pens.PEN_PIXEL );\r\n\r\n\treturn screenData.api;\r\n}\r\n\r\nfunction parseAspect( aspect ) {\r\n\r\n\tconst match = aspect.replaceAll( \" \", \"\" ).match( /^(\\d+(?:\\.\\d+)?)(:|x|e|m)(\\d+(?:\\.\\d+)?)$/ );\r\n\tif( !match ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst width = Number( match[ 1 ] );\r\n\tconst splitter = match[ 2 ];\r\n\tconst height = Number( match[ 3 ] );\r\n\r\n\tif( isNaN( width ) || width === 0 || isNaN( height ) || height === 0 ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn {\r\n\t\t\"width\": width,\r\n\t\t\"height\": height,\r\n\t\t\"splitter\": splitter,\r\n\t\t\"isFixedSize\": splitter === \"m\" || splitter === \"x\"\r\n\t};\r\n}\r\n\r\nfunction setupOffscreenCanvasOptions( screenData ) {\r\n\tscreenData.canvas.width = screenData.aspectData.width;\r\n\tscreenData.canvas.height = screenData.aspectData.height;\r\n\tscreenData.container = null;\r\n\tscreenData.isOffscreen = true;\r\n\tscreenData.isNoStyles = false;\r\n\tscreenData.resizeCallback = null;\r\n\tscreenData.previousOffsetSize = null;\r\n}\r\n\r\nfunction setDefaultCanvasOptions( screenData ) {\r\n\tscreenData.canvas.style.outline = \"none\";\r\n\tscreenData.canvas.style.backgroundColor = \"black\";\r\n\tscreenData.canvas.style.position = \"absolute\";\r\n\r\n\t// Apply image rendering value\r\n\tscreenData.canvas.style.imageRendering = \"pixelated\";\r\n\tconst imageRenderingValues = [ \"pixelated\", \"crisp-edges\", \"-webkit-crisp-edges\" ];\r\n\tfor( let i = 1; i < imageRenderingValues; i += 1 ) {\r\n\t\tif( screenData.canvas.styles.imageRendering === imageRenderingValues[ i - 1 ] ) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tscreenData.canvas.style.imageRendering = imageRenderingValues[ i ];\r\n\t}\r\n\r\n\t// Check if the container is document.body\r\n\tif( screenData.container === document.body ) {\r\n\t\tdocument.documentElement.style.height = \"100%\";\r\n\t\tdocument.documentElement.style.margin = \"0\";\r\n\t\tdocument.body.style.height = \"100%\";\r\n\t\tdocument.body.style.margin = \"0\";\r\n\t\tdocument.body.style.overflow = \"hidden\";\r\n\t\tscreenData.canvas.style.left = \"0\";\r\n\t\tscreenData.canvas.style.top = \"0\";\r\n\t}\r\n}\r\n\r\nfunction setupScreenRenderer( screenData ) {\r\n\r\n\tlet webgl2Status = null;\r\n\tif( !screenData.useCanvas2d ) {\r\n\t\twebgl2Status = g_webgl2Renderer.initWebGL( screenData );\r\n\t\t\r\n\t\t// If webgl2 failed\r\n\t\tif( !webgl2Status ) {\r\n\t\t\tconsole.error( \"Failed to create WebGL 2 canvas, falling back to canvas2d renderer\" );\r\n\t\t\t\r\n\t\t\tscreenData.useCanvas2d = true;\r\n\t\t\t\r\n\t\t\t// Need to resize screen because we webgl2canvas uses different canvas dimensions\r\n\t\t\tif( screenData.aspect !== \":\" ) {\r\n\r\n\t\t\t\t// Set init to true because initialization is not completed\r\n\t\t\t\tresizeScreen( screenData, true );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If webgl2 is not working or disabled then use canvas\r\n\tif( webgl2Status !== null ) {\r\n\t\tscreenData.renderMode = WEBGL2_RENDER_MODE;\r\n\t\tscreenData.renderer = g_webgl2Renderer;\r\n\t} else {\r\n\r\n\t\t// Canvas2D renderer (fallback)\r\n\t\tconst canvas2dStatus = g_canvas2dRenderer.initCanvas2D( screenData );\r\n\t\tif( !canvas2dStatus ) {\r\n\t\t\tconst error = new Error( \"screen: Failed to create rendering context.\" );\r\n\t\t\terror.code = \"NO_RENDERING_CONTEXT\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\tscreenData.renderMode = CANVAS2D_RENDER_MODE;\r\n\t\tscreenData.renderer = g_canvas2dRenderer;\r\n\t}\r\n}\r\n\r\nfunction validateDimensions( width, height ) {\r\n\tif( width <= 0 || height <= 0 ) {\r\n\t\tconst error = new Error( \"screen: Canvas dimensions must be positive.\" );\r\n\t\terror.code = \"INVALID_DIMENSIONS\";\r\n\t\tthrow error;\r\n\t}\r\n\tif( width > MAX_CANVAS_DIMENSION || height > MAX_CANVAS_DIMENSION ) {\r\n\t\tconst error = new Error(\r\n\t\t\t`screen: Canvas dimensions exceed maximum of ${MAX_CANVAS_DIMENSION}px.`\r\n\t\t);\r\n\t\terror.code = \"DIMENSION_TOO_LARGE\";\r\n\t\tthrow error;\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Other External API Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Remove the screen from the page and memory -- even though this is a screen command it only needs\r\nfunction removeScreen( options ) {\r\n\r\n\tlet screenId = options.id;\r\n\r\n\t// Fail silently - user may want redundancy without try/catch block\r\n\tif( !m_screens[ screenId ] ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst screenData = m_screens [ screenId ];\r\n\r\n\t// Cancel any inputs\r\n\tscreenData.api.cancelInput();\r\n\r\n\t// Clear all events\r\n\tscreenData.api.clearEvents();\r\n\r\n\t// Cleanup renderer\r\n\tscreenData.renderer.cleanup( screenData );\r\n\r\n\t// Call cleanup functions for all modules that need cleanup\r\n\tfor( const fn of m_screenDataCleanupFunctions ) {\r\n\t\tfn( screenData );\r\n\t}\r\n\r\n\t// Store the screen ID before we start nullifying properties\r\n\tconst createdDeletedMethodErrorFn = ( key, screenId ) => {\r\n\t\tscreenData.api[ key ] = () => {\r\n\t\t\tconst errorMessage = `Cannot call ${key}() on removed screen (id: ${screenId}). ` +\r\n\t\t\t\t`The screen has been removed from the page.`;\r\n\t\t\tconst error = new TypeError( errorMessage );\r\n\t\t\terror.code = \"DELETED_METHOD\";\r\n\t\t\tthrow error;\r\n\t\t};\r\n\t};\r\n\r\n\t// Replace all commands from screen object - prevents outside reference to screen from calling\r\n\t// screen functions on screen that doesn't exist\r\n\tfor( const key in screenData.api ) {\r\n\t\tif( typeof screenData.api[ key ] === \"function\" ) {\r\n\t\t\t\r\n\t\t\t// Set the api method to a method that throws an error\r\n\t\t\tcreatedDeletedMethodErrorFn( key, screenId );\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove the canvas from the page\r\n\tif( screenData.canvas && screenData.canvas.parentElement ) {\r\n\t\tscreenData.canvas.parentElement.removeChild( screenData.canvas );\r\n\t}\r\n\r\n\t// Unobserve the container from the global resize observer if no other screens use it\r\n\tif( screenData.container && m_observedContainers.has( screenData.container ) ) {\r\n\t\t\r\n\t\t// Check if any other screens are using this container\r\n\t\tlet hasOtherScreens = false;\r\n\t\tfor( const id in m_screens ) {\r\n\t\t\tconst otherScreen = m_screens[ id ];\r\n\t\t\tif( otherScreen !== screenData && otherScreen.container === screenData.container ) {\r\n\t\t\t\thasOtherScreens = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Only unobserve if no other screens are using this container\r\n\t\tif( !hasOtherScreens ) {\r\n\t\t\tm_resizeObserver.unobserve( screenData.container );\r\n\t\t\tm_observedContainers.delete( screenData.container );\r\n\t\t}\r\n\t}\r\n\r\n\t// Clean up all references to prevent memory leaks\r\n\tscreenData.canvas = null;\r\n\tscreenData.commands = null;\r\n\tscreenData.resizeCallback = null;\r\n\tscreenData.container = null;\r\n\tscreenData.aspectData = null;\r\n\tscreenData.clientRect = null;\r\n\tscreenData.previousOffsetSize = null;\r\n\r\n\t// Remove additional screenData items\r\n\tfor( const i in m_screenDataItems ) {\r\n\t\tscreenData[ i ] = null;\r\n\t}\r\n\tfor( const getter of m_screenDataItemGetters ) {\r\n\t\tscreenData[ getter.name ] = null;\r\n\t}\r\n\r\n\t// If the current screen is the active screen then we should set the active screen to the next\r\n\t// screen available, or null if no screens remain.\r\n\tif( screenData === m_activeScreenData ) {\r\n\t\tm_activeScreenData = null;\r\n\t\tfor( const i in m_screens ) {\r\n\t\t\tif( m_screens[ i ] !== screenData ) {\r\n\t\t\t\tm_activeScreenData = m_screens[ i ];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Delete the screen from the screens container\r\n\tdelete m_screens[ screenId ];\r\n}\r\n\r\n// Set the active screen on pi\r\nfunction setScreen( options ) {\r\n\tconst screenObj = options.screen;\r\n\tlet screenId;\r\n\r\n\tif( Number.isInteger( screenObj ) ) {\r\n\t\tscreenId = screenObj;\r\n\t} else if( screenObj && Number.isInteger( screenObj.id ) ) {\r\n\t\tscreenId = screenObj.id;\r\n\t}\r\n\tif( ! m_screens[ screenId ] ) {\r\n\t\tconst error = new Error( \"screen: Invalid screen.\" );\r\n\t\terror.code = \"INVALID_SCREEN\";\r\n\t\tthrow error;\r\n\t}\r\n\tm_activeScreenData = m_screens[ screenId ];\r\n}\r\n\r\n// Get screen\r\nfunction getScreen( options ) {\r\n\tconst screenId = g_utils.getInt( options.screenId, null );\r\n\tif( screenId === null || screenId < 0 ) {\r\n\t\tconst error = new Error( \"screen: Invalid screen id.\" );\r\n\t\terror.code = \"INVALID_SCREEN_ID\";\r\n\t\tthrow error;\r\n\t}\r\n\tconst screen = m_screens[ screenId ];\r\n\tif( !screen ) {\r\n\t\tconst error = new Error( `screen: Screen \"${screenId}\" not found.` );\r\n\t\terror.code = \"SCREEN_NOT_FOUND\";\r\n\t\tthrow error;\r\n\t}\r\n\treturn screen.api;\r\n}\r\n\r\nfunction widthCmd( screenData ) {\r\n\treturn screenData.width;\r\n}\r\n\r\nfunction heightCmd( screenData ) {\r\n\treturn screenData.height;\r\n}\r\n\r\nfunction canvasCmd( screenData ) {\r\n\treturn screenData.canvas;\r\n}\r\n\r\n/***************************************************************************************************\r\n * Resize Screen\r\n **************************************************************************************************/\r\n\r\n\r\nfunction resizeScreen( screenData, isInit ) {\r\n\r\n\t// Skip if screen is not visible or should not be resized\r\n\tif(\r\n\t\tscreenData.isOffscreen ||\r\n\t\tscreenData.isNoStyles ||\r\n\t\tscreenData.canvas.offsetParent === null\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Get the previous size (if stored from last time)\r\n\tlet fromSize = screenData.previousOffsetSize\r\n\r\n\t// Let the renderer adjust to the new size\r\n\tif( !isInit && screenData.renderMode === CANVAS2D_RENDER_MODE ) {\r\n\t\tg_canvas2dRenderer.beforeResize( screenData, fromSize );\r\n\t}\r\n\r\n\t// If Not 100% canvas size mode\r\n\tif( screenData.aspectData.splitter !== \"\" ) {\r\n\r\n\t\t// Update the canvas to the new size\r\n\t\tconst size = getSize( screenData.container );\r\n\t\tsetCanvasSize( screenData, size.width, size.height );\r\n\r\n\t} else {\r\n\r\n\t\tif( screenData.container === document.body ) {\r\n\t\t\tscreenData.canvas.style.position = \"static\";\r\n\t\t}\r\n\r\n\t\t// Update canvas to fullscreen absolute pixels\r\n\t\tscreenData.canvas.style.width = \"100%\";\r\n\t\tscreenData.canvas.style.height = \"100%\";\r\n\t\tconst size = getSize( screenData.canvas );\r\n\t\tscreenData.canvas.width = Math.min( size.width, MAX_CANVAS_DIMENSION );\r\n\t\tscreenData.canvas.height = Math.min( size.height, MAX_CANVAS_DIMENSION );\r\n\t}\r\n\r\n\t// Resize the client rectangle\r\n\tscreenData.clientRect = screenData.canvas.getBoundingClientRect();\r\n\r\n\t// Set the new screen data size\r\n\tif( screenData.aspectData.isFixedSize ) {\r\n\t\tscreenData.width = screenData.aspectData.width;\r\n\t\tscreenData.height = screenData.aspectData.height;\r\n\t} else {\r\n\r\n\t\t// If using ratios or full 100% size then set screenData to css size\r\n\t\tif( screenData.splitter === \"\" || screenData.splitter === \":\" ) {\r\n\t\t\tscreenData.width = newCssWidth;\r\n\t\t\tscreenData.height = newCssHeight;\r\n\t\t} else {\r\n\r\n\t\t\t// Extend mode -- only mode left\r\n\t\t\t// TODO: Figure out what to put here if anything\r\n\t\t}\r\n\t}\r\n\r\n\t// Get the new size after resize\r\n\tconst toSize = {\r\n\t\t\"width\": screenData.canvas.offsetWidth,\r\n\t\t\"height\": screenData.canvas.offsetHeight\r\n\t};\r\n\r\n\tif( !isInit ) {\r\n\r\n\t\t// Let the renderer adjust to the new size\r\n\t\tif( screenData.renderMode === CANVAS2D_RENDER_MODE ) {\r\n\t\t\tg_canvas2dRenderer.afterResize( screenData, fromSize, toSize );\r\n\t\t}\r\n\r\n\t\t// Call resize functions for all modules that need special handling on resize\r\n\t\tfor( const fn of m_screenDataResizeFunctions ) {\r\n\t\t\tfn( screenData );\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Send the resize data to the client\r\n\tif( screenData.resizeCallback ) {\r\n\t\tif(\r\n\t\t\tfromSize !== null &&\r\n\t\t\t( fromSize.width !== toSize.width || fromSize.height !== toSize.height )\r\n\t\t) {\r\n\t\t\tscreenData.resizeCallback( screenData.api, fromSize, toSize );\r\n\t\t}\r\n\t}\r\n\r\n\t// Store the new size for next time\r\n\tscreenData.previousOffsetSize = toSize;\r\n}\r\n\r\n// Set canvas size based on aspect ratio\r\nfunction setCanvasSize( screenData, maxWidth, maxHeight ) {\r\n\r\n\tconst aspectData = screenData.aspectData;\r\n\tconst canvas = screenData.canvas;\r\n\tlet width = aspectData.width;\r\n\tlet height = aspectData.height;\r\n\tconst splitter = aspectData.splitter;\r\n\tlet newCssWidth, newCssHeight;\r\n\r\n\t// If set size to multiple or extend\r\n\tif( splitter === \"m\" || splitter === \"e\" ) {\r\n\t\tconst factorX = Math.floor( maxWidth / width );\r\n\t\tconst factorY = Math.floor( maxHeight / height );\r\n\t\tlet factor = factorX > factorY ? factorY : factorX;\r\n\t\tif( factor < 1 ) {\r\n\t\t\tfactor = 1;\r\n\t\t}\r\n\t\tnewCssWidth = width * factor;\r\n\t\tnewCssHeight = height * factor;\r\n\r\n\t\t// Extending the canvas to match container size\r\n\t\tif( splitter === \"e\" ) {\r\n\t\t\twidth = Math.floor( maxWidth / factor );\r\n\t\t\theight = Math.floor( maxHeight / factor );\r\n\t\t\tnewCssWidth = width * factor;\r\n\t\t\tnewCssHeight = height * factor;\r\n\r\n\t\t\t// Set screen data width/height here\r\n\t\t\tscreenData.width = width;\r\n\t\t\tscreenData.height = height;\r\n\t\t}\r\n\t} else {\r\n\r\n\t\t// Calculate the screen ratios\r\n\t\tconst ratio1 = height / width;\r\n\t\tconst ratio2 = width / height;\r\n\t\tnewCssWidth = maxHeight * ratio2;\r\n\t\tnewCssHeight = maxWidth * ratio1;\r\n\r\n\t\t// Calculate the best fit\r\n\t\tif( newCssWidth > maxWidth ) {\r\n\t\t\tnewCssWidth = maxWidth;\r\n\t\t\tnewCssHeight = newCssWidth * ratio1;\r\n\t\t} else {\r\n\t\t\tnewCssHeight = maxHeight;\r\n\t\t}\r\n\t}\r\n\r\n\t// Set the size\r\n\tcanvas.style.width = Math.floor( newCssWidth ) + \"px\";\r\n\tcanvas.style.height = Math.floor( newCssHeight ) + \"px\";\r\n\r\n\t// Set the margins\r\n\tcanvas.style.marginLeft = Math.floor( ( maxWidth - newCssWidth ) / 2 ) + \"px\";\r\n\tcanvas.style.marginTop = Math.floor( ( maxHeight - newCssHeight ) / 2 ) + \"px\";\r\n\r\n\t// Set the actual canvas pixel dimensions\r\n\t// Note: If using webgl2 and desynchronized is set then only apply native size for canvas2d as\r\n\t// it will produce blurry results. Currently I'm setting desynchronized to false so we can\r\n\t// use the native resolution on the canvas for both canvas2d and webgl2. This means when we \r\n\t// copy the image from the browser right click menu, it will produce the actual size image and\r\n\t// not the upscaled one.\r\n\t//if( screenData.useCanvas2d && splitter !== \":\" ) {\r\n\tif( splitter !== \":\" ) {\r\n\t\tcanvas.width = Math.min( width, MAX_CANVAS_DIMENSION );\r\n\t\tcanvas.height = Math.min( height, MAX_CANVAS_DIMENSION );\r\n\t} else {\r\n\r\n\t\t// For ratio mode, set to CSS size\r\n\t\tcanvas.width = Math.min( Math.floor( newCssWidth ), MAX_CANVAS_DIMENSION );\r\n\t\tcanvas.height = Math.min( Math.floor( newCssHeight ), MAX_CANVAS_DIMENSION );\r\n\t}\r\n}\r\n\r\n// Get size of container\r\nfunction getSize( element ) {\r\n\treturn {\r\n\t\t\"width\": element.offsetWidth || element.clientWidth || element.width,\r\n\t\t\"height\": element.offsetHeight || element.clientHeight || element.height\r\n\t};\r\n}\r\n", "/**\r\n * Pi.js - WebGL2 Renderer Core Module\r\n * \r\n * WebGL2 rendering with Framebuffer Object (FBO) for offscreen rendering\r\n * and automatic batch rendering system.\r\n * \r\n * @module graphics/renderer-webgl2\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_pens from \"./pens.js\";\r\nimport * as g_screenManager from \"../core/screen-manager.js\";\r\nimport * as g_utils from \"../core/utils.js\";\r\n\r\n// Shaders are imported from external files via esbuild text loader\r\nimport m_pointVertSrc from \"./shaders/point.vert\";\r\nimport m_pointFragSrc from \"./shaders/point.frag\";\r\nimport m_imageVertSrc from \"./shaders/image.vert\";\r\nimport m_imageFragSrc from \"./shaders/image.frag\";\r\nimport m_displayVertSrc from \"./shaders/display.vert\";\r\nimport m_displayFragSrc from \"./shaders/display.frag\";\r\n\r\nconst MAX_POINT_BATCH_SIZE = 1_000_000;\r\nconst DEFAULT_POINT_BATCH_SIZE = 5000;\r\nconst MAX_IMAGE_BATCH_SIZE = 10_000;\r\nconst DEFAULT_IMAGE_BATCH_SIZE = 50;\r\nconst BATCH_CAPACITY_SHRINK_INTERVAL = 5000;\r\n\r\n// TODO: Need to keep an eye on memory usage and memory caps. Maybe make max_batch_size a variable\r\n// maybe let user update max batch sizes.  Need to handle out of memory issues or prevent them\r\n// from happening.  Needs research.\r\n\r\n// Nested Map for WebGL2 texture storage\r\n// Outer Map: Image element -> Inner Map: GL context -> WebGL texture\r\n// This allows efficient lookup by image and cleanup when image is removed\r\nconst m_webgl2Textures = new Map();\r\n\r\n// Batch systems\r\nexport const POINTS_BATCH = 0;\r\nexport const IMAGE_BATCH = 1;\r\n\r\n// String constants to identify batch system names\r\nconst BATCH_TYPES = [ \"POINTS\", \"IMAGE\" ];\r\n\r\nconst m_batchProto = {\r\n\t\r\n\t// Type of batch POINTS_BATCH, IMAGE_BATCH, etc...\r\n\t\"type\": null,\r\n\r\n\t\"program\": null,\r\n\t\"vertices\": null,\r\n\t\"colors\": null,\r\n\t\"count\": 0,\r\n\r\n\t// Capacity\r\n\t\"minCapacity\": 0,\r\n\t\"capacity\": 0,\r\n\t\"capacityChanged\": true,\r\n\t\"capacityLocalMax\": 0,\r\n\t\"capacityShrinkCheckTime\": 0,\r\n\r\n\t// Components\r\n\t\"vertexComps\": 2,\r\n\t\"colorComps\": 4,\r\n\t\"texCoordComps\": 2,\r\n\r\n\t// WebGL resources\r\n\t\"vertexVBO\": null,\r\n\t\"colorVBO\": null,\r\n\t\"texCoordVBO\": null,\r\n\t\"vao\": null,\r\n\r\n\t// Image Specific items\r\n\t\"texture\": null,\r\n\t\"image\": null,\r\n\r\n\t// Drawing mode, e.g., gl.POINTS or gl.TRIANGLES\r\n\t\"mode\": null,\r\n\r\n\t// Cached shader locations\r\n\t\"locations\": null\r\n};\r\n\r\nlet m_isWebgl2Capable = false;\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\nexport { m_isWebgl2Capable as isWebgl2Capable };\r\n\r\nexport function init() {\r\n\tg_screenManager.addScreenCleanupFunction( cleanup );\r\n\tm_isWebgl2Capable = testWebGL2Capability();\r\n}\r\n\r\nexport function cleanup( screenData ) {\r\n\r\n\tif( screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst gl = screenData.gl;\r\n\r\n\t// Cleanup batches\r\n\tfor( const batchType in screenData.batches ) {\r\n\r\n\t\t// Get the batch\r\n\t\tconst batch = screenData.batches[ batchType ];\r\n\r\n\t\t// Delete texCoord items\r\n\t\tif( batch.texCoordVBO ) {\r\n\t\t\tgl.deleteBuffer( batch.texCoordVBO );\r\n\t\t}\r\n\r\n\t\tgl.deleteBuffer( batch.vertexVBO );\r\n\t\tgl.deleteBuffer( batch.colorVBO );\r\n\t\tgl.deleteVertexArray( batch.vao );\r\n\t\tgl.deleteProgram( batch.program );\r\n\r\n\t\tif( batch.texture ) {\r\n\t\t\tgl.deleteTexture( batch.texture );\r\n\t\t}\r\n\t}\r\n\r\n\t// Clear batches array\r\n\tscreenData.batches = {};\r\n\tscreenData.batchInfo = {};\r\n\t\r\n\t// Cleanup display shader\r\n\tif( screenData.displayProgram ) {\r\n\t\tgl.deleteProgram( screenData.displayProgram );\r\n\t\tgl.deleteBuffer( screenData.displayPositionBuffer );\r\n\t}\r\n\t\r\n\t// Cleanup shaders and FBO\r\n\tif( screenData.FBO ) {\r\n\t\tgl.deleteFramebuffer( screenData.FBO );\r\n\t\tgl.deleteTexture( screenData.texture );\r\n\t}\r\n\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * WebGL Initialization\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Test if WebGL2 is available and working properly\r\n * \r\n * @returns {boolean} True if WebGL2 is available and functional\r\n */\r\nfunction testWebGL2Capability() {\r\n\t\r\n\t// Create a temporary offscreen canvas for testing\r\n\tconst testCanvas = document.createElement( \"canvas\" );\r\n\ttestCanvas.width = 1;\r\n\ttestCanvas.height = 1;\r\n\t\r\n\t// Create a minimal screen data object for testing\r\n\tconst testScreenData = {\r\n\t\t\"canvas\": testCanvas,\r\n\t\t\"width\": 1,\r\n\t\t\"height\": 1\r\n\t};\r\n\t\r\n\t// Use the existing initWebGL function to test capability\r\n\tconst result = initWebGL( testScreenData );\r\n\t\r\n\t// Cleanup test resources if WebGL2 was initialized\r\n\tif( result && testScreenData.gl ) {\r\n\t\tcleanup( testScreenData );\r\n\t}\r\n\t\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Initialize WebGL2 context for a canvas\r\n * \r\n * @param {Object} screenData - Screen Data Object\r\n * @returns {boolean} if successfull\r\n */\r\nexport function initWebGL( screenData ) {\r\n\r\n\t// Setup initial screen data items\r\n\tscreenData.contextLost = false;\r\n\tscreenData.isRenderScheduled = false;\r\n\tscreenData.isFirstRender = true;\r\n\tscreenData.batches = {};\r\n\tscreenData.batchInfo = {\r\n\t\t\"currentBatch\": null,\r\n\t\t\"drawOrder\": []\r\n\t};\r\n\r\n\tconst canvas = screenData.canvas;\r\n\tconst width = screenData.width;\r\n\tconst height = screenData.height;\r\n\t\r\n\t// Try WebGL2 first\r\n\tscreenData.gl = canvas.getContext( \"webgl2\", { \r\n\t\t\"alpha\": true, \r\n\t\t\"premultipliedAlpha\": false,\r\n\t\t\"antialias\": false,\r\n\t\t\"preserveDrawingBuffer\": true,\r\n\t\t\"desynchronized\": false,\r\n\t\t\"colorType\": \"unorm8\"\r\n\t} );\r\n\t\r\n\tif( !screenData.gl ) {\r\n\r\n\t\t// WebGL2 not available\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Setup viewport\r\n\tscreenData.gl.viewport( 0, 0, width, height );\r\n\t\r\n\t// Create texture and FBO\r\n\tif( !createTextureAndFBO( screenData ) ) {\r\n\t\tscreenData.gl = null;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// Create the point batch\r\n\tscreenData.batches[ POINTS_BATCH ] = createBatchSystem( \r\n\t\tscreenData, m_pointVertSrc, m_pointFragSrc, POINTS_BATCH \r\n\t);\r\n\r\n\t// Create the images batch\r\n\tscreenData.batches[ IMAGE_BATCH ] = createBatchSystem( \r\n\t\tscreenData, m_imageVertSrc, m_imageFragSrc, IMAGE_BATCH \r\n\t);\r\n\t\r\n\t// Setup display shader\r\n\tsetupDisplayShader( screenData );\r\n\r\n\t// Enable WebGL debugging extensions\r\n\tif( typeof window !== \"undefined\" && window.location.search.includes( \"webgl-debug\" ) ) {\r\n\t\tconst debugExt = screenData.gl.getExtension( \"WEBGL_debug_renderer_info\" );\r\n\t\tif( debugExt ) {\r\n\t\t\tconsole.log( \"GPU:\", screenData.gl.getParameter( debugExt.UNMASKED_RENDERER_WEBGL ) );\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Track if webglcontext gets lost\r\n\tscreenData.canvas.addEventListener( \"webglcontextlost\", ( e ) => {\r\n\t\te.preventDefault();\r\n\t\tconsole.warn( \"WebGL context lost\" );\r\n\t\tscreenData.contextLost = true;\r\n\t} );\r\n\t\r\n\t// Reinit canvas when webglcontext gets restored\r\n\tscreenData.canvas.addEventListener( \"webglcontextrestored\", () => {\r\n\t\tconsole.log( \"WebGL context restored\" );\r\n\r\n\t\t// TODO: Screen gets lost but maybe we can restore it from the FBO?\r\n\r\n\t\t// Reinitialize WebGL resources\r\n\t\tinitWebGL( screenData );\r\n\t\tscreenData.contextLost = false;\r\n\r\n\t\t// Reset blend mode\r\n\t\tblendModeChanged( screenData );\r\n\t} );\r\n\r\n\t// Return successful\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Create Framebuffer Object for offscreen rendering\r\n * \r\n * @param {Object} screenData - Global screen data object container\r\n */\r\nfunction createTextureAndFBO( screenData ) {\r\n\r\n\tconst gl = screenData.gl;\r\n\tconst width = screenData.width;\r\n\tconst height = screenData.height;\r\n\t\r\n\t// Create texture\r\n\tscreenData.texture = gl.createTexture();\r\n\tif( !screenData.texture ) {\r\n\t\tconsole.error( \"Failed to create WebGL2 texture.\" );\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgl.bindTexture( gl.TEXTURE_2D, screenData.texture );\r\n\tgl.texImage2D( \r\n\t\tgl.TEXTURE_2D, 0, gl.RGBA8, \r\n\t\twidth, height, 0, \r\n\t\tgl.RGBA, gl.UNSIGNED_BYTE, null \r\n\t);\r\n\t\r\n\t// Set texture parameters for pixel-perfect rendering\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\r\n\t// Create FBO\r\n\tscreenData.FBO = gl.createFramebuffer();\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, screenData.FBO );\r\n\t\r\n\t// Attach texture to FBO\r\n\tgl.framebufferTexture2D(\r\n\t\tgl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, \r\n\t\tgl.TEXTURE_2D, screenData.texture, 0 \r\n\t);\r\n\t\r\n\t// Make sure that framebuffer is complete\r\n\tconst status = gl.checkFramebufferStatus( gl.FRAMEBUFFER );\r\n\tif( status !== gl.FRAMEBUFFER_COMPLETE ) {\r\n\t\tconsole.error( \"WebGL2 Framebuffer incomplete:\", status );\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Unbind\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\tgl.bindTexture( gl.TEXTURE_2D, null );\r\n\r\n\treturn true;\r\n}\r\n\r\n\r\n/**\r\n * Create a shader program from vertex and fragment sources\r\n * \r\n * @param {string} vertexSource - Vertex shader source\r\n * @param {string} fragmentSource - Fragment shader source\r\n * @returns {WebGLProgram|null} Shader program or null on error\r\n */\r\nfunction createShaderProgram( screenData, vertexSource, fragmentSource ) {\r\n\tconst gl = screenData.gl;\r\n\r\n\tconst vertexShader = compileShader( screenData, gl.VERTEX_SHADER, vertexSource );\r\n\tconst fragmentShader = compileShader( screenData, gl.FRAGMENT_SHADER, fragmentSource );\r\n\t\r\n\tif( !vertexShader || !fragmentShader ) {\r\n\t\tconst error = new Error( \"screen: Unable to compile shaders.\" );\r\n\t\terror.code = \"INVALID_SHADERS\";\r\n\t\tthrow error;\r\n\t}\r\n\t\r\n\tconst program = gl.createProgram();\r\n\tgl.attachShader( program, vertexShader );\r\n\tgl.attachShader( program, fragmentShader );\r\n\tgl.linkProgram( program );\r\n\r\n\t// Cleanup shader programs\r\n\tgl.deleteShader( vertexShader );\r\n\tgl.deleteShader( fragmentShader );\r\n\t\r\n\tif( !gl.getProgramParameter( program, gl.LINK_STATUS ) ) {\r\n\t\tconst errLog =  gl.getProgramInfoLog( program );\r\n\t\tgl.deleteProgram( program );\r\n\t\tconst error = new Error( `screen: Shader program error:, ${errLog}.` );\r\n\t\terror.code = \"SHADER_PROGRAM_ERROR\";\r\n\t\tthrow error;\r\n\t}\r\n\t\r\n\treturn program;\r\n}\r\n\r\n/**\r\n * Compile a single shader\r\n * \r\n * @param {number} type - Shader type (VERTEX_SHADER or FRAGMENT_SHADER)\r\n * @param {string} source - Shader source code\r\n * @returns {WebGLShader|null} Compiled shader or null on error\r\n */\r\nfunction compileShader( screenData, type, source ) {\r\n\r\n\tconst gl = screenData.gl;\r\n\r\n\tconst shader = gl.createShader( type );\r\n\tgl.shaderSource( shader, source );\r\n\tgl.compileShader( shader );\r\n\t\r\n\tif( !gl.getShaderParameter( shader, gl.COMPILE_STATUS ) ) {\r\n\t\tconsole.error( \"Shader compile error:\", gl.getShaderInfoLog( shader ) );\r\n\t\tgl.deleteShader( shader );\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\treturn shader;\r\n}\r\n\r\n/**\r\n * Setup display shader for rendering FBO to screen\r\n * \r\n * @param {Object} screenData - Screen data object\r\n */\r\nfunction setupDisplayShader( screenData ) {\r\n\t\r\n\tconst gl = screenData.gl;\r\n\t\r\n\t// Create shader program\r\n\tconst program = createShaderProgram( screenData, m_displayVertSrc, m_displayFragSrc );\r\n\t\r\n\t// Create fullscreen quad vertices (NDC: -1 to 1)\r\n\tconst positions = new Float32Array( [\r\n\t\t-1, -1, // Bottom left\r\n\t\t 1, -1, // Bottom right\r\n\t\t-1,  1, // Top left\r\n\t\t-1,  1, // Top left\r\n\t\t 1, -1, // Bottom right\r\n\t\t 1,  1  // Top right\r\n\t] );\r\n\t\r\n\t// Create vertex buffer\r\n\tconst positionBuffer = gl.createBuffer();\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, positionBuffer );\r\n\tgl.bufferData( gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW );\r\n\t\r\n\t// Get attribute/uniform locations\r\n\tconst positionLoc = gl.getAttribLocation( program, \"a_position\" );\r\n\tconst textureLoc = gl.getUniformLocation( program, \"u_texture\" );\r\n\t\r\n\t// Store in screen data\r\n\tscreenData.displayProgram = program;\r\n\tscreenData.displayPositionBuffer = positionBuffer;\r\n\tscreenData.displayLocations = {\r\n\t\t\"position\": positionLoc,\r\n\t\t\"texture\": textureLoc\r\n\t};\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Render Management\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Sets the image dirty / Queue automatic render\r\n * @param {Object} screenData - Global screen data object container\r\n */\r\nexport function setImageDirty( screenData ) {\r\n\tif( !screenData.isRenderScheduled ) {\r\n\t\tscreenData.isRenderScheduled = true;\r\n\t\tg_utils.queueMicrotask( () => {\r\n\t\t\tflushBatches( screenData );\r\n\t\t\tdisplayToCanvas( screenData );\r\n\t\t\tscreenData.isRenderScheduled = false;\r\n\t\t} );\r\n\t}\r\n}\r\n\r\nexport function cls( screenData, x, y, width, height ) {\r\n\t\r\n\t// TODO: Implement clear screen command\r\n\t// How to implement this?\r\n\t// For a full screen clear need to clear the screen and clear out all the batches too.\r\n\t// No need to render anything that happens before this because the user would never see it.\r\n\t// But if it's a partial screen clear then maybe just draw a transparent rectangle over the\r\n\t// clear area.\r\n}\r\n\r\nexport function blendModeChanged( screenData, previousBlend ) {\r\n\r\n\t// Flush existing batch with old blend mode\r\n\tflushBatches( screenData, previousBlend );\r\n\tdisplayToCanvas( screenData );\r\n\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Batch Operations\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Create batch shader program and buffers\r\n * \r\n * @param {Object} screenData - Global screen data object container\r\n * @param {string} vertSrc - Vertex shader program source code\r\n * @param {string} fragSrc - Fragment shader program source code\r\n * @param {number} type - Index number indicating type IE POINTS_BATCH, IMAGE_BATCH, etc.\r\n * \r\n * @returns {Object} The batch system object\r\n */\r\nfunction createBatchSystem( screenData, vertSrc, fragSrc, type ) {\r\n\tconst gl = screenData.gl;\r\n\tconst batch = Object.create( m_batchProto );\r\n\r\n\t// Create the batch shader program\r\n\tbatch.program = createShaderProgram( screenData, vertSrc, fragSrc );\r\n\r\n\t// Cache shader locations for efficiency\r\n\tbatch.locations = {\r\n\t\t\"position\": gl.getAttribLocation( batch.program, \"a_position\" ),\r\n\t\t\"color\": gl.getAttribLocation( batch.program, \"a_color\" ),\r\n\t\t\"resolution\": gl.getUniformLocation( batch.program, \"u_resolution\" )\r\n\t};\r\n\r\n\t// Setup batch type and capacity\r\n\tbatch.type = type;\r\n\tif( batch.type === POINTS_BATCH ) {\r\n\t\tbatch.capacity = DEFAULT_POINT_BATCH_SIZE;\r\n\t\tbatch.minCapacity = DEFAULT_POINT_BATCH_SIZE;\r\n\t\tbatch.maxCapacity = MAX_POINT_BATCH_SIZE;\r\n\t\tbatch.mode = gl.POINTS;\r\n\t} else if( batch.type === IMAGE_BATCH ) {\r\n\t\tbatch.capacity = DEFAULT_IMAGE_BATCH_SIZE;\r\n\t\tbatch.minCapacity = DEFAULT_IMAGE_BATCH_SIZE;\r\n\t\tbatch.maxCapacity = MAX_IMAGE_BATCH_SIZE;\r\n\t\tbatch.mode = gl.TRIANGLES;\r\n\r\n\t\t// Image-specific shader locations\r\n\t\tbatch.locations.texCoord = gl.getAttribLocation( batch.program, \"a_texCoord\" );\r\n\t\tbatch.locations.texture = gl.getUniformLocation( batch.program, \"u_texture\" );\r\n\r\n\t\t// Image-specific data array\r\n\t\tbatch.texCoords = new Float32Array( batch.capacity * batch.texCoordComps );\r\n\r\n\t\t// Image-specific VBO\r\n\t\tbatch.texCoordVBO = gl.createBuffer();\r\n\r\n\t\t// Setup texCoord attribute\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.texCoordVBO );\r\n\t\tgl.enableVertexAttribArray( batch.locations.texCoord );\r\n\t\tgl.vertexAttribPointer(\r\n\t\t\tbatch.locations.texCoord, batch.texCoordComps, gl.FLOAT, false, 0, 0\r\n\t\t);\r\n\t} else {\r\n\t\tthrow new Error( \"Invalid batch type.\" );\r\n\t}\r\n\r\n\t// These are created for all batches\r\n\tbatch.vertices = new Float32Array( batch.capacity * batch.vertexComps );\r\n\tbatch.colors = new Uint8Array( batch.capacity * batch.colorComps );\r\n\tbatch.vertexVBO = gl.createBuffer();\r\n\tbatch.colorVBO = gl.createBuffer();\r\n\r\n\t// Create VAO (WebGL2 only)\r\n\tbatch.vao = gl.createVertexArray();\r\n\tgl.bindVertexArray( batch.vao );\r\n\r\n\t// Setup position attibute\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.vertexVBO );\r\n\tgl.enableVertexAttribArray( batch.locations.position );\r\n\tgl.vertexAttribPointer(\r\n\t\tbatch.locations.position, batch.vertexComps, gl.FLOAT, false, 0, 0\r\n\t);\r\n\r\n\t// Setup color attribute\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.colorVBO );\r\n\tgl.enableVertexAttribArray( batch.locations.color );\r\n\tgl.vertexAttribPointer(\r\n\t\tbatch.locations.color, batch.colorComps, gl.UNSIGNED_BYTE, true, 0, 0\r\n\t);\r\n\t\r\n\tgl.bindVertexArray( null );\r\n\r\n\t// Set the next shrink check time\r\n\tbatch.capacityShrinkCheckTime = Date.now() + BATCH_CAPACITY_SHRINK_INTERVAL;\r\n\r\n\treturn batch;\r\n}\r\n\r\n/**\r\n * Prepare batch and make sure has enough capacity\r\n * \r\n * @param {number} batchType - Batch batch type identifier\r\n * @param {string} newItemCount - Number of new items that will be added\r\n */\r\nexport function prepareBatch( screenData, batchType, newItemCount ) {\r\n\r\n\t// Get the batch\r\n\tconst batch = screenData.batches[ batchType ];\r\n\r\n\t// Track if the batch type is changing\r\n\tconst batchInfo = screenData.batchInfo;\r\n\tif( batchInfo.currentBatch !== batch ) {\r\n\t\t\r\n\t\t// Set the end index for the last drawOrderItem to it's current count\r\n\t\tif( batchInfo.drawOrder.length > 0 ) {\r\n\t\t\tconst lastDrawOrderItem = batchInfo.drawOrder[ batchInfo.drawOrder.length - 1 ];\r\n\t\t\tlastDrawOrderItem.endIndex = lastDrawOrderItem.batch.count;\r\n\t\t}\r\n\r\n\t\t// Add the new batch to the drawOrder array\r\n\t\t// For IMAGE_BATCH, track the current image/texture for this segment\r\n\t\tconst drawOrderItem = { batch, \"startIndex\": batch.count, \"endIndex\": null };\r\n\t\tif( batch.type === IMAGE_BATCH ) {\r\n\t\t\tdrawOrderItem.image = batch.image;\r\n\t\t\tdrawOrderItem.texture = batch.texture;\r\n\t\t}\r\n\t\tbatchInfo.drawOrder.push( drawOrderItem );\r\n\t\tbatchInfo.currentBatch = batch;\r\n\t}\r\n\r\n\t// Check if need to increase\r\n\tconst requiredCount = batch.count + newItemCount;\r\n\tif( requiredCount >= batch.capacity ) {\r\n\r\n\t\t// Make sure we don't exceed max batch size\r\n\t\tif( requiredCount > batch.maxCapacity ) {\r\n\t\t\tflushBatches( screenData );\r\n\t\t\treturn prepareBatch( screenData, batchType, newItemCount );\r\n\t\t}\r\n\r\n\t\t// Resize to new capacity by doubling current capacity\r\n\t\tconst newCapacity = Math.max( requiredCount, batch.capacity * 2 );\r\n\t\tresizeBatch( batch, newCapacity );\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nfunction resizeBatch( batch, newCapacity ) {\r\n\r\n\t// Resize arrays\r\n\tconst newVertices = new Float32Array( newCapacity * batch.vertexComps );\r\n\tconst newColors = new Uint8Array( newCapacity * batch.colorComps );\r\n\t\r\n\t// Copy existing data\r\n\tnewVertices.set( batch.vertices );\r\n\tbatch.vertices = newVertices;\r\n\tnewColors.set( batch.colors );\r\n\tbatch.colors = newColors;\r\n\t\r\n\tif( batch.type === IMAGE_BATCH ) {\r\n\t\tconst newTexCoords = new Float32Array( newCapacity * batch.texCoordComps );\r\n\t\tnewTexCoords.set( batch.texCoords );\r\n\t\tbatch.texCoords = newTexCoords;\r\n\t}\r\n\r\n\tconsole.log(\r\n\t\t`Batch ${BATCH_TYPES[ batch.type]} resized from ${batch.capacity} to ${newCapacity}`\r\n\t);\r\n\r\n\t// Update batch\r\n\tbatch.capacity = newCapacity;\r\n\tbatch.capacityChanged = true;\r\n\r\n\t// Set the time capacity last changed\r\n\tbatch.capacityShrinkCheckTime = Date.now() + BATCH_CAPACITY_SHRINK_INTERVAL;\r\n}\r\n\r\n\r\n/**\r\n * Flush all batches to FBO\r\n * \r\n * @param {Object} screenData - Screen data object\r\n */\r\nfunction flushBatches( screenData, blend = null ) {\r\n\tif( blend === null ) {\r\n\t\tblend = screenData.blends.blend;\r\n\t}\r\n\t\r\n\tconst gl = screenData.gl;\r\n\r\n\tif( screenData.contextLost ) {\r\n\r\n\t\t// TODO: Maybe add warning here?\r\n\t\t// console.warn( \"WebGL context lost unable to render screen.\" );\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Bind FBO\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, screenData.FBO );\r\n\t\r\n\t// Set viewport\r\n\tgl.viewport( 0, 0, screenData.width, screenData.height );\r\n\t\r\n\t// Clear FBO on first render only\r\n\tif( screenData.isFirstRender ) {\r\n\t\tgl.clearColor( 0, 0, 0, 0 );\r\n\t\tgl.clear( gl.COLOR_BUFFER_BIT );\r\n\t\tscreenData.isFirstRender = false;\r\n\t}\r\n\r\n\t// TODO: Images should not share the same blend mode as other drawItems.\r\n\t// Update the blend mode\r\n\tif( blend === g_pens.BLEND_REPLACE ) {\r\n\t\tgl.disable( gl.BLEND );\r\n\t} else {\r\n\t\tgl.enable( gl.BLEND );\r\n\t\tgl.blendFuncSeparate(\r\n\t\t\tgl.SRC_ALPHA,           // srcRGBFactor\r\n\t\t\tgl.ONE_MINUS_SRC_ALPHA, // dstRGBFactor\r\n\t\t\tgl.ONE,                 // srcAlphaFactor  <--- Make src alpha factor 1.0 (no scaling)\r\n\t\t\tgl.ONE_MINUS_SRC_ALPHA  // dstAlphaFactor  <--- Make dst alpha factor (1-src.a)\r\n\t\t);\r\n\t}\r\n\r\n\t// Upload batch buffers\r\n\tfor( const batchType in screenData.batches ) {\r\n\t\tconst batch = screenData.batches[ batchType ];\r\n\t\tif( batch.count > 0 ) {\r\n\t\t\tuploadBatch( gl, batch, screenData.width, screenData.height );\r\n\t\t}\r\n\t}\r\n\r\n\t// Draw items\r\n\tfor( const drawOrderItem of screenData.batchInfo.drawOrder ) {\r\n\t\tif( drawOrderItem.endIndex === null ) {\r\n\t\t\tdrawOrderItem.endIndex = drawOrderItem.batch.count;\r\n\t\t}\r\n\r\n\t\t// Only draw the batch if there is something to draw\r\n\t\tif( drawOrderItem.endIndex - drawOrderItem.startIndex > 0 ) {\r\n\t\t\tconst texture = ( drawOrderItem.batch.type === IMAGE_BATCH ) ? drawOrderItem.texture : null;\r\n\t\t\tdrawBatch( gl, drawOrderItem.batch, drawOrderItem.startIndex, drawOrderItem.endIndex, texture );\r\n\t\t}\r\n\t}\r\n\r\n\t// Reset Batches\r\n\tfor( const batchType in screenData.batches ) {\r\n\t\tconst batch = screenData.batches[ batchType ];\r\n\t\tresetBatch( batch );\r\n\t}\r\n\r\n\t// Reset drawOrder object\r\n\tscreenData.batchInfo.drawOrder = [];\r\n\tscreenData.batchInfo.currentBatch = null;\r\n\r\n\t// Unbind VAO\r\n\tgl.bindVertexArray( null );\r\n\r\n\t// Unbind FBO\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\r\n}\r\n\r\nfunction uploadBatch( gl, batch, width, height ) {\r\n\tgl.useProgram( batch.program );\r\n\tgl.uniform2f( batch.locations.resolution, width, height );\r\n\tgl.bindVertexArray( batch.vao );\r\n\t\r\n\t// Allocate or resize buffers on capacity change\r\n\tif( batch.capacityChanged ) {\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.vertexVBO );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, batch.vertices.byteLength, gl.STREAM_DRAW );\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.colorVBO );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, batch.colors.byteLength, gl.STREAM_DRAW );\r\n\r\n\t\tif( batch.type === IMAGE_BATCH ) {\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.texCoordVBO );\r\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, batch.texCoords.byteLength, gl.STREAM_DRAW );\r\n\t\t}\r\n\r\n\t\tbatch.capacityChanged = false;\r\n\t}\r\n\r\n\t// Upload positions\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.vertexVBO );\r\n\tgl.bufferSubData( \r\n\t\tgl.ARRAY_BUFFER, 0, batch.vertices.subarray( 0, batch.count * batch.vertexComps )\r\n\t);\r\n\t\r\n\t// Upload colors\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.colorVBO );\r\n\tgl.bufferSubData(\r\n\t\tgl.ARRAY_BUFFER, 0, batch.colors.subarray( 0, batch.count * batch.colorComps )\r\n\t);\r\n\r\n\t// Upload texture coordinates\r\n\tif( batch.type === IMAGE_BATCH ) {\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.texCoordVBO );\r\n\t\tgl.bufferSubData(\r\n\t\t\tgl.ARRAY_BUFFER, 0, batch.texCoords.subarray( 0, batch.count * batch.texCoordComps )\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction drawBatch( gl, batch, startIndex, endIndex, texture = null ) {\r\n\tgl.useProgram( batch.program );\r\n\tgl.bindVertexArray( batch.vao );\r\n\r\n\t// For IMAGE_BATCH, bind the texture and set uniform\r\n\tif( batch.type === IMAGE_BATCH && texture ) {\r\n\t\tgl.activeTexture( gl.TEXTURE0 );\r\n\t\tgl.bindTexture( gl.TEXTURE_2D, texture );\r\n\t\tgl.uniform1i( batch.locations.texture, 0 );\r\n\t}\r\n\r\n\t// Draw based on batch mode\r\n\tgl.drawArrays( batch.mode, startIndex, endIndex - startIndex );\r\n}\r\n\r\nfunction resetBatch( batch ) {\r\n\r\n\t// Update the batch local max\r\n\tbatch.capacityLocalMax = Math.max( batch.count, batch.capacityLocalMax );\r\n\r\n\t// Reset batch count\r\n\tbatch.count = 0;\r\n\r\n\tif( batch.type === IMAGE_BATCH ) {\r\n\t\tbatch.image = null;\r\n\t}\r\n\r\n\t// Check if should shrink capacity\r\n\tif( Date.now() > batch.capacityShrinkCheckTime ) {\r\n\r\n\t\t// This will resize the batch slowly over time - cutting in half every 5 seconds\r\n\t\tif( batch.capacity > batch.minCapacity && batch.capacityLocalMax < batch.capacity * 0.5 ) {\r\n\r\n\t\t\t// Resize the batch\r\n\t\t\tresizeBatch( batch, Math.max( batch.capacity * 0.5, batch.minCapacity ) );\r\n\t\t}\r\n\r\n\t\tbatch.capacityShrinkCheckTime = Date.now() + BATCH_CAPACITY_SHRINK_INTERVAL;\r\n\t\tbatch.capacityLocalMax = 0;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Display FBO texture to visible canvas\r\n * \r\n * @param {Object} screenData - Screen data object\r\n */\r\nfunction displayToCanvas( screenData ) {\r\n\t\r\n\tconst gl = screenData.gl;\r\n\tconst program = screenData.displayProgram;\r\n\tconst locations = screenData.displayLocations;\r\n\r\n\t// Bind default framebuffer (screen)\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\t\r\n\t// Set viewport to full canvas\r\n\tgl.viewport( 0, 0, screenData.canvas.width, screenData.canvas.height );\r\n\t\r\n\t// Clear the canvas before drawing the FBO texture\r\n\tgl.clearColor( 0, 0, 0, 0 );\r\n\tgl.clear( gl.COLOR_BUFFER_BIT );\r\n\t\r\n\t// Disable blend for render to display\r\n\tgl.disable( gl.BLEND );\r\n\r\n\t// Use display shader\r\n\tgl.useProgram( program );\r\n\t\r\n\t// Enable position attribute\r\n\tgl.enableVertexAttribArray( locations.position );\r\n\t\r\n\t// Bind position buffer\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, screenData.displayPositionBuffer );\r\n\tgl.vertexAttribPointer( locations.position, 2, gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t// Bind FBO texture\r\n\tgl.activeTexture( gl.TEXTURE0 );\r\n\tgl.bindTexture( gl.TEXTURE_2D, screenData.texture );\r\n\tgl.uniform1i( locations.texture, 0 );\r\n\t\r\n\t// Draw fullscreen quad\r\n\tgl.drawArrays( gl.TRIANGLES, 0, 6 );\r\n\t\r\n\t// Cleanup\r\n\tgl.disableVertexAttribArray( locations.position );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Drawing Operations\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Fast path for direct pixel writes (no bounds check, no blending)\r\n * \r\n * @param {Object} screenData - Screen data object\r\n * @param {number} x - X coordinate\r\n * @param {number} y - Y coordinate\r\n * @param {Object} color - Color object includes r/g/b/a components (0-255)\r\n */\r\nexport function drawPixelUnsafe( screenData, x, y, color ) {\r\n\t\r\n\t// Add directly to point batch\r\n\tconst batch = screenData.batches[ POINTS_BATCH ];\r\n\tconst idx = batch.count * batch.vertexComps;\r\n\tconst cidx = batch.count * batch.colorComps;\r\n\t\r\n\tbatch.vertices[ idx     ] = x;\r\n\tbatch.vertices[ idx + 1 ] = y;\r\n\tbatch.colors[ cidx     ] = color.r;\r\n\tbatch.colors[ cidx + 1 ] = color.g;\r\n\tbatch.colors[ cidx + 2 ] = color.b;\r\n\tbatch.colors[ cidx + 3 ] = color.a;\r\n\r\n\tbatch.count++;\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Readback Operations\r\n **************************************************************************************************/\r\n\r\nexport function readPixel( screenData, x, y ) {\r\n\r\n\t// Ensure latest contents are in the FBO\r\n\tflushBatches( screenData );\r\n\r\n\tconst gl = screenData.gl;\r\n\tconst screenWidth = screenData.width;\r\n\tconst screenHeight = screenData.height;\r\n\r\n\t// Bounds check\r\n\tif( x < 0 || y < 0 || x >= screenWidth || y >= screenHeight ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// WebGL uses bottom-left origin; flip Y\r\n\tconst glY = ( screenHeight - 1 ) - y;\r\n\tconst buf = new Uint8Array( 4 );\r\n\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, screenData.FBO );\r\n\tgl.readPixels( x, glY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buf );\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\r\n\treturn g_utils.rgbToColor( buf[ 0 ], buf[ 1 ], buf[ 2 ], buf[ 3 ] );\r\n}\r\n\r\nexport function readPixelAsync( screenData, x, y ) {\r\n\treturn new Promise( ( resolve ) => {\r\n\t\tg_utils.queueMicrotask( () => {\r\n\t\t\tresolve( readPixel( screenData, x, y ) );\r\n\t\t} );\r\n\t} );\r\n}\r\n\r\n\r\nexport function readPixels( screenData, x, y, width, height ) {\r\n\tconst gl = screenData.gl;\r\n\tconst screenWidth = screenData.width;\r\n\tconst screenHeight = screenData.height;\r\n\r\n\t// Clamp to screen bounds for robustness if not fully clipped by pixels.js\r\n\tconst clampedX = Math.max( 0, x );\r\n\tconst clampedY = Math.max( 0, y );\r\n\tconst clampedWidth = Math.min( width, screenWidth - clampedX );\r\n\tconst clampedHeight = Math.min( height, screenHeight - clampedY );\r\n\r\n\t// If after clamping, nothing left to read\r\n\tif( clampedWidth <= 0 || clampedHeight <= 0 ) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\t// Flush batches before reading\r\n\tflushBatches( screenData );\r\n\r\n\t// Allocate buffer for the exact rectangle to read\r\n\tconst buf = new Uint8Array( clampedWidth * clampedHeight * 4 );\r\n\r\n\t// WebGL origin is bottom-left; convert to top-left for `gl.readPixels`\r\n\t// The Y coordinate for `gl.readPixels` is the bottom edge of the rectangle.\r\n\t// Bottom-left corner Y of the rectangle\r\n\tconst glReadY = ( screenHeight - ( clampedY + clampedHeight ) );\r\n\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, screenData.FBO );\r\n\tgl.readPixels( clampedX, glReadY, clampedWidth, clampedHeight, gl.RGBA, gl.UNSIGNED_BYTE, buf );\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\r\n\t// Map back to output structure expected by graphics/pixels.js\r\n\t// This function will return a flat array of color objects\r\n\tconst resultColors = new Array( clampedHeight );\r\n\tfor( let row = 0; row < clampedHeight; row++ ) {\r\n\r\n\t\tconst resultsRow = new Array( clampedWidth );\r\n\t\tfor( let col = 0; col < clampedWidth; col++ ) {\r\n\r\n\t\t\t// Convert gl.readPixels' bottom-origin Y to top-origin Y for the buffer index\r\n\t\t\t// `buf` itself is ordered from glReadY up to glReadY + clampedHeight - 1\r\n\t\t\t// Flip row index\r\n\t\t\tconst bufRow = ( clampedHeight - 1 ) - row;\r\n\t\t\tconst i = ( ( clampedWidth * bufRow ) + col ) * 4;\r\n\t\t\tresultsRow[ col ] = g_utils.rgbToColor(\r\n\t\t\t\tbuf[ i ], buf[ i + 1 ], buf[ i + 2 ], buf[ i + 3 ]\r\n\t\t\t);\r\n\t\t}\r\n\t\tresultColors[ row ] = resultsRow;\r\n\t}\r\n\r\n\treturn resultColors;\r\n}\r\n\r\nexport function readPixelsAsync( screenData, x, y, width, height ) {\r\n\treturn new Promise( ( resolve ) => {\r\n\t\tg_utils.queueMicrotask( () => {\r\n\t\t\tresolve( readPixels( screenData, x, y, width, height ) );\r\n\t\t} );\r\n\t} );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Image Texture Management\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Get or create WebGL2 texture for an image\r\n * \r\n * @param {Object} screenData - Screen data object\r\n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\r\n * @returns {WebGLTexture|null} WebGL texture or null on error\r\n */\r\nexport function getWebGL2Texture( screenData, img ) {\r\n\r\n\tif( !screenData.gl ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Get or create inner Map for this image\r\n\tlet contextMap = m_webgl2Textures.get( img );\r\n\tif( !contextMap ) {\r\n\t\tcontextMap = new Map();\r\n\t\tm_webgl2Textures.set( img, contextMap );\r\n\t}\r\n\r\n\t// Check if texture already exists for this screen's context\r\n\tconst gl = screenData.gl;\r\n\tlet texture = contextMap.get( gl );\r\n\tif( texture ) {\r\n\t\treturn texture;\r\n\t}\r\n\r\n\t// Create new texture\r\n\ttexture = gl.createTexture();\r\n\tif( !texture ) {\r\n\t\tconsole.error( \"Failed to create WebGL2 texture for image.\" );\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgl.bindTexture( gl.TEXTURE_2D, texture );\r\n\r\n\t// Upload image data to texture\r\n\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img );\r\n\r\n\t// Set texture parameters for pixel-perfect rendering\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\r\n\tgl.bindTexture( gl.TEXTURE_2D, null );\r\n\r\n\t// Store texture in nested Map\r\n\tcontextMap.set( gl, texture );\r\n\r\n\treturn texture;\r\n}\r\n\r\n/**\r\n * Delete WebGL2 texture for an image on all screens\r\n * Must be called explicitly to free GPU memory - textures are not automatically\r\n * garbage collected by the browser.\r\n * \r\n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\r\n */\r\nexport function deleteWebGL2Texture( img ) {\r\n\r\n\t// Get the context Map for this image\r\n\tconst contextMap = m_webgl2Textures.get( img );\r\n\tif( !contextMap ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Get all active screens\r\n\tconst allScreens = g_screenManager.getAllScreens();\r\n\r\n\t// Iterate through all screens and delete textures for this image\r\n\tfor( const screenData of allScreens ) {\r\n\t\tif( !screenData.gl || screenData.renderMode !== \"webgl2\" ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst texture = contextMap.get( screenData.gl );\r\n\t\tif( texture ) {\r\n\t\t\tscreenData.gl.deleteTexture( texture );\r\n\t\t\tcontextMap.delete( screenData.gl );\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove the context Map if empty\r\n\tif( contextMap.size === 0 ) {\r\n\t\tm_webgl2Textures.delete( img );\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Image Drawing Operations\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Draw an image on the screen\r\n * \r\n * @param {Object} screenData - Screen data object\r\n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\r\n * @param {number} x - X coordinate\r\n * @param {number} y - Y coordinate\r\n * @param {number} angleRad - Rotation angle in radians\r\n * @param {number} anchorX - Anchor point X (0-1)\r\n * @param {number} anchorY - Anchor point Y (0-1)\r\n * @param {number} alpha - Alpha value (0-255)\r\n * @param {number} scaleX - Scale X\r\n * @param {number} scaleY - Scale Y\r\n */\r\nexport function drawImage(\r\n\tscreenData, img, x, y, angleRad, anchorX, anchorY, alpha, scaleX, scaleY\r\n) {\r\n\r\n\t// Get or create texture\r\n\tconst texture = getWebGL2Texture( screenData, img );\r\n\tif( !texture ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Calculate image dimensions\r\n\tconst imgWidth = img.width;\r\n\tconst imgHeight = img.height;\r\n\r\n\t// Calculate anchor position in pixels\r\n\tconst anchorXPx = Math.round( imgWidth * anchorX );\r\n\tconst anchorYPx = Math.round( imgHeight * anchorY );\r\n\r\n\t// Calculate scaled dimensions\r\n\tconst scaledWidth = imgWidth * scaleX;\r\n\tconst scaledHeight = imgHeight * scaleY;\r\n\r\n\t// Calculate corner positions relative to anchor point (top-left at -anchor, bottom-right at size-anchor)\r\n\tconst corners = [\r\n\t\t{ \"x\": -anchorXPx, \"y\": -anchorYPx },                    // Top-left\r\n\t\t{ \"x\": scaledWidth - anchorXPx, \"y\": -anchorYPx },      // Top-right\r\n\t\t{ \"x\": -anchorXPx, \"y\": scaledHeight - anchorYPx },     // Bottom-left\r\n\t\t{ \"x\": scaledWidth - anchorXPx, \"y\": scaledHeight - anchorYPx } // Bottom-right\r\n\t];\r\n\r\n\t// Rotate corners around (0,0) then translate to (x,y)\r\n\tconst cos = Math.cos( angleRad );\r\n\tconst sin = Math.sin( angleRad );\r\n\tfor( let i = 0; i < corners.length; i++ ) {\r\n\t\tconst corner = corners[ i ];\r\n\t\tconst rx = corner.x * cos - corner.y * sin;\r\n\t\tconst ry = corner.x * sin + corner.y * cos;\r\n\t\tcorner.x = rx + x;\r\n\t\tcorner.y = ry + y;\r\n\t}\r\n\r\n\t// Texture coordinates (full image)\r\n\tconst texCoords = [\r\n\t\t0, 0,  // Top-left\r\n\t\t1, 0,  // Top-right\r\n\t\t0, 1,  // Bottom-left\r\n\t\t1, 0,  // Top-right (repeat for second triangle)\r\n\t\t1, 1,  // Bottom-right\r\n\t\t0, 1   // Bottom-left (repeat for second triangle)\r\n\t];\r\n\r\n\t// Prepare batch for 6 vertices (2 triangles)\r\n\tconst batch = screenData.batches[ IMAGE_BATCH ];\r\n\r\n\t// Check if we need a new batch segment due to texture change\r\n\tconst batchInfo = screenData.batchInfo;\r\n\tif(\r\n\t\tbatchInfo.currentBatch === batch &&\r\n\t\t( batch.image !== img || batch.texture !== texture )\r\n\t) {\r\n\r\n\t\t// Texture changed - finalize current segment and start new one\r\n\t\tif( batchInfo.drawOrder.length > 0 ) {\r\n\t\t\tconst lastDrawOrderItem = batchInfo.drawOrder[ batchInfo.drawOrder.length - 1 ];\r\n\t\t\tlastDrawOrderItem.endIndex = batch.count;\r\n\t\t}\r\n\r\n\t\t// Create new drawOrder item for this texture\r\n\t\tconst drawOrderItem = {\r\n\t\t\tbatch,\r\n\t\t\t\"startIndex\": batch.count,\r\n\t\t\t\"endIndex\": null,\r\n\t\t\timage: img,\r\n\t\t\ttexture: texture\r\n\t\t};\r\n\t\tbatchInfo.drawOrder.push( drawOrderItem );\r\n\t}\r\n\r\n\t// Prepare batch (will create new segment if batch type changed)\r\n\tprepareBatch( screenData, IMAGE_BATCH, 6 );\r\n\r\n\t// Update current image and texture\r\n\tbatch.image = img;\r\n\tbatch.texture = texture;\r\n\r\n\t// Update drawOrder item texture if this is a new segment\r\n\tif( batchInfo.drawOrder.length > 0 ) {\r\n\t\tconst lastDrawOrderItem = batchInfo.drawOrder[ batchInfo.drawOrder.length - 1 ];\r\n\t\tif( lastDrawOrderItem.endIndex === null ) {\r\n\t\t\tlastDrawOrderItem.image = img;\r\n\t\t\tlastDrawOrderItem.texture = texture;\r\n\t\t}\r\n\t}\r\n\r\n\t// Color with alpha\r\n\tconst r = Math.round( 255 );\r\n\tconst g = Math.round( 255 );\r\n\tconst b = Math.round( 255 );\r\n\tconst a = Math.round( alpha );\r\n\r\n\t// Add two triangles (6 vertices)\r\n\tconst baseIdx = batch.count;\r\n\tconst vertexBase = baseIdx * batch.vertexComps;\r\n\tconst colorBase = baseIdx * batch.colorComps;\r\n\tconst texBase = baseIdx * batch.texCoordComps;\r\n\r\n\t// Triangle 1: Top-left, Top-right, Bottom-left\r\n\tlet vIdx = vertexBase;\r\n\tlet cIdx = colorBase;\r\n\tlet tIdx = texBase;\r\n\r\n\t// Vertex 0: Top-left\r\n\tbatch.vertices[ vIdx++ ] = corners[ 0 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 0 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 0 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 1 ];\r\n\r\n\t// Vertex 1: Top-right\r\n\tbatch.vertices[ vIdx++ ] = corners[ 1 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 1 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 2 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 3 ];\r\n\r\n\t// Vertex 2: Bottom-left\r\n\tbatch.vertices[ vIdx++ ] = corners[ 2 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 2 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 4 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 5 ];\r\n\r\n\t// Triangle 2: Top-right, Bottom-right, Bottom-left\r\n\t// Vertex 3: Top-right\r\n\tbatch.vertices[ vIdx++ ] = corners[ 1 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 1 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 6 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 7 ];\r\n\r\n\t// Vertex 4: Bottom-right\r\n\tbatch.vertices[ vIdx++ ] = corners[ 3 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 3 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 8 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 9 ];\r\n\r\n\t// Vertex 5: Bottom-left\r\n\tbatch.vertices[ vIdx++ ] = corners[ 2 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 2 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 10 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 11 ];\r\n\r\n\t// Update batch count\r\n\tbatch.count += 6;\r\n\r\n\t// Mark screen as dirty\r\n\tsetImageDirty( screenData );\r\n}\r\n", "/**\r\n * Pi.js - Pens Module\r\n * \r\n * Manages pens and blends\r\n * \r\n * @module graphics/pens\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_screenManager from \"../core/screen-manager.js\";\r\nimport * as g_state from \"../core/state-settings.js\";\r\nimport * as g_utils from \"../core/utils.js\";\r\nimport * as g_graphicsApi from \"./graphics-api.js\";\r\n\r\n// Pens\r\nexport const PEN_PIXEL = \"pixel\";\r\nexport const PEN_SQUARE = \"square\";\r\nexport const PEN_CIRCLE = \"circle\";\r\nexport const PENS = new Set( [ PEN_PIXEL, PEN_SQUARE, PEN_CIRCLE ] );\r\n\r\n// Blends\r\nexport const BLEND_REPLACE = \"replace\";\r\nexport const BLEND_ALPHA = \"alpha\";\r\nexport const BLENDS = new Set( [ BLEND_REPLACE, BLEND_ALPHA ] );\r\n\r\nconst m_noiseColor = { \"r\": 0, \"g\": 0, \"b\": 0, \"a\": 0 };\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Initialize the pens\r\nexport async function init( api ) {\r\n\taddScreenDataItems();\r\n\tregisterCommands();\r\n}\r\n\r\nfunction addScreenDataItems() {\r\n\r\n\t// Add Render Screen Data\r\n\tg_screenManager.addScreenDataItem( \"blends\", {\r\n\t\t\"blend\": BLEND_REPLACE, \"blendFn\": null, \"noise\": null, \"noiseData\": []\r\n\t} );\r\n\tg_screenManager.addScreenDataItem( \"pens\", {\r\n\t\t\"pen\": PEN_PIXEL, \"penFn\": null, \"size\": 1, \"pixelsPerPen\": 1\r\n\t} );\r\n\r\n\t// Need to rebuild Pen Fn on screen resize\r\n\tg_screenManager.addScreenResizeFunction( ( screenData ) => {\r\n\t\tbuildPenFn( screenData );\r\n\t} );\r\n}\r\n\r\nfunction registerCommands() {\r\n\r\n\tg_state.addCommand( \"setPen\", setPen, true, [ \"pen\", \"size\", \"blend\", \"noise\" ] );\r\n}\r\n\r\n// Function to dynamically build the optimal penFn and blendFn for the current screen, renderer,\r\n// pen type, and blend mode. This eliminates all runtime 'if' statements and dynamic lookups in the\r\n// pixel-drawing hot path by pre-specializing the functions at configuration change time, \r\n// maximizing V8 JIT compiler's inlining opportunities.\r\n// Note that this gets called anytime a blend or pen get changed on the active screen.\r\n// Also this gets called when the screen resizes in order to reset the s_width and s_height \r\n// variables.\r\nfunction buildPenFn( s_screenData ) {\r\n\r\n\tconst s_drawPixelunsafe = s_screenData.renderer.drawPixelUnsafe;\r\n\tconst s_blendPixelUnsafe = s_screenData.renderer.blendPixelUnsafe;\r\n\tconst s_width = s_screenData.width;\r\n\tconst s_height = s_screenData.height;\r\n\tconst s_noise = s_screenData.blends.noise;\r\n\tconst s_clamp = g_utils.clamp;\r\n\r\n\t// Special fast path for blending we can skip the blend function and just call drawPixelUnsafe\r\n\t// WebGl2 can handle blending in the GPU so we can just use drawPixelUnsafe\r\n\t// BLEND_REPLACE also doesn't do any blending if there is no noise\r\n\t// Pens should handle bounds checking so we can call drawPixelUnsafe\r\n\tlet s_blendFn;\r\n\tif(\r\n\t\ts_screenData.blends.noise === null && (\r\n\t\t\ts_screenData.renderMode === g_screenManager.WEBGL2_RENDER_MODE ||\r\n\t\t\ts_screenData.blends.blend === BLEND_REPLACE\r\n\t\t)\r\n\t) {\r\n\t\ts_blendFn = s_drawPixelunsafe;\r\n\r\n\t// BLEND_REPLACE with noise\r\n\t} else if( s_screenData.blends.blend === BLEND_REPLACE ) {\r\n\r\n\t\t// Draw pixel direct with some random noise data\r\n\t\ts_blendFn = ( screenData, x, y, color ) => {\r\n\t\t\ts_drawPixelunsafe( screenData, x, y, getColorNoise( s_noise, color, s_clamp ) );\r\n\t\t};\r\n\t\r\n\t// BLEND_ALPHA without noise\r\n\t} else if( s_screenData.blends.blend === BLEND_ALPHA && s_screenData.blends.noise === null ) {\r\n\t\tif( s_screenData.renderMode === g_screenManager.WEBGL2_RENDER_MODE ) {\r\n\t\t\ts_blendFn = s_drawPixelunsafe;\r\n\t\t} else {\r\n\t\t\ts_blendFn = s_blendPixelUnsafe;\r\n\t\t}\r\n\t\r\n\t// BLEND_ALPHA with noise\r\n\t} else {\r\n\r\n\t\tif( s_screenData.renderMode === g_screenManager.WEBGL2_RENDER_MODE ) {\r\n\t\t\ts_blendFn = ( screenData, x, y, color ) => {\r\n\t\t\t\ts_drawPixelunsafe(screenData, x, y, getColorNoise( s_noise, color, s_clamp ) );\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\ts_blendFn = ( screenData, x, y, color ) => {\r\n\t\t\t\ts_blendPixelUnsafe( screenData, x, y, getColorNoise( s_noise, color, s_clamp ) );\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t// PEN_PIXEL\r\n\tif( s_screenData.pens.pen === PEN_PIXEL ) {\r\n\r\n\t\t// For a single pixel check the bounds and call blendFn\r\n\t\ts_screenData.pens.penFn = ( screenData, x, y, color ) => {\r\n\t\t\tif( x < 0 || x >= s_width || y < 0 || y >= s_height ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\ts_blendFn( screenData, x, y, color );\r\n\t\t};\r\n\t\r\n\t// PEN_SQUARE\r\n\t} else if( s_screenData.pens.pen === PEN_SQUARE ) {\r\n\r\n\t\t// Size must always be an odd integer\r\n\t\tconst squareSize = s_screenData.pens.size | 1;\r\n\r\n\t\t// Compute the center offset of the square\r\n\t\tconst offset = Math.round( squareSize / 2 ) - 1;\r\n\r\n\t\ts_screenData.pens.penFn = ( screenData, x, y, color ) => {\r\n\r\n\t\t\t// Calculate bounds and clip to screen\r\n\t\t\tconst x1 = s_clamp( x - offset, 0, s_width );\r\n\t\t\tconst x2 = s_clamp( x - offset + squareSize, 0, s_width );\r\n\t\t\tconst y1 = s_clamp( y - offset, 0, s_height );\r\n\t\t\tconst y2 = s_clamp( y - offset + squareSize, 0, s_height );\r\n\r\n\t\t\tdrawPenSquare( screenData, x1, y1, x2, y2, color, s_blendFn );\r\n\t\t};\r\n\t\r\n\t// PEN_CIRCLE\r\n\t} else if( s_screenData.pens.pen === PEN_CIRCLE ) {\r\n\r\n\t\t// Special case for size two draw a 5 pixel cross\r\n\t\tif( s_screenData.pens.size === 2 ) {\r\n\t\t\ts_screenData.pens.penFn = ( screenData, x, y, color ) => {\r\n\t\t\t\tdrawPenCross( screenData, x, y, color, s_width, s_height, s_blendFn );\r\n\t\t\t};\r\n\t\t} else {\r\n\r\n\t\t\t// Double size to get the size of the outer box\r\n\t\t\tconst diameter = s_screenData.pens.size * 2;\r\n\r\n\t\t\t// Half is size of radius\r\n\t\t\tconst half = s_screenData.pens.size;\r\n\r\n\t\t\t// Calculate the center of circle\r\n\t\t\tconst offset = half - 1;\r\n\r\n\t\t\t// Pre-calculate squared radius threshold\r\n\t\t\t// We compare squared distance to (half - 0.5)^2\r\n\t\t\tconst radiusThresholdSq = ( half - 0.5 ) * ( half - 0.5 );\r\n\r\n\t\t\ts_screenData.pens.penFn = ( screenData, x, y, color ) => {\r\n\t\t\t\r\n\t\t\t\t// Calculate bounds and clip to screen\r\n\t\t\t\tconst x1 = s_clamp( x - offset, 0, s_width );\r\n\t\t\t\tconst x2 = s_clamp( x - offset + diameter, 0, s_width );\r\n\t\t\t\tconst y1 = s_clamp( y - offset, 0, s_height );\r\n\t\t\t\tconst y2 = s_clamp( y - offset + diameter, 0, s_height );\r\n\t\r\n\t\t\t\t// Draw circle pen\r\n\t\t\t\tdrawPenCircle(\r\n\t\t\t\t\tscreenData, x, y, x1, y1, x2, y2, radiusThresholdSq, color, s_blendFn\r\n\t\t\t\t);\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Set the blendFn - used in filled shapes and paint\r\n\ts_screenData.blends.blendFn = s_blendFn;\r\n\r\n\t// Rebuild graphics api to get the new pen functions\r\n\tg_graphicsApi.buildGraphicsApi( s_screenData );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * External API Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Set Pen Command\r\nfunction setPen( screenData, options ) {\r\n\tlet pen = options.pen;\r\n\tlet size = g_utils.getInt( options.size, 1 );\r\n\tlet blend = options.blend;\r\n\tlet noise = options.noise;\r\n\r\n\t// Validate pen option\r\n\tif( !pen ) {\r\n\t\tpen = screenData.pens.pen;\r\n\t}\r\n\tif( !PENS.has( pen ) ) {\r\n\t\tconst error = new TypeError(\r\n\t\t\t\"setPen: Parameter pen is not a valid pen. Valid pens are (\" +\r\n\t\t\t`${Array.from( PENS ).join( \", \" )}).`\r\n\t\t);\r\n\t\terror.code = \"INVALID_PEN\";\r\n\t\tthrow error;\r\n\t}\r\n\tif( pen === PEN_PIXEL ) {\r\n\t\tsize = 1;\r\n\t}\r\n\r\n\t// Set the minimum pen size to 1\r\n\tif( size < 1 ) {\r\n\t\tsize = 1;\r\n\t}\r\n\r\n\t// Size one is always just a pixel\r\n\tif( size === 1 ) {\r\n\t\tpen = PEN_PIXEL;\r\n\t}\r\n\r\n\t// Validate the blend option\r\n\tif( !blend ) {\r\n\t\tblend = screenData.blends.blend;\r\n\t}\r\n\tif( !BLENDS.has( blend ) ) {\r\n\t\tconst error = new TypeError(\r\n\t\t\t`setBlend: Parameter blend is not a valid blend. Valid blends are (` +\r\n\t\t\t`${Array.from( BLENDS ).join( \", \" )}).`\r\n\t\t);\r\n\t\terror.code = \"INVALID_BLEND_MODE\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Validate the noise option\r\n\tif( Array.isArray( noise ) ) {\r\n\t\tfor( let i = 0; i < noise.length; i++ ) {\r\n\t\t\tif( isNaN( noise[ i ] ) ) {\r\n\t\t\t\tconst error = new TypeError(\r\n\t\t\t\t\t\"setBlend: Parameter noise array contains an invalid value.\"\r\n\t\t\t\t);\r\n\t\t\t\terror.code = \"INVALID_NOISE_VALUE\";\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tnoise = g_utils.getInt( noise, null );\r\n\t\tif( noise !== null ) {\r\n\t\t\tnoise = [ noise, noise, noise, 0 ];\r\n\t\t}\r\n\t}\r\n\r\n\t// Set the pen on screen data\r\n\tscreenData.pens.pen = pen;\r\n\tscreenData.pens.size = size;\r\n\r\n\t// Set the amount of points that will be drawn by the pen\r\n\tif( pen === PEN_SQUARE ) {\r\n\t\tscreenData.pens.pixelsPerPen = size * size;\r\n\t} else if( pen === PEN_CIRCLE ) {\r\n\t\tif( size === 2 ) {\r\n\t\t\tscreenData.pens.pixelsPerPen = 5;\r\n\t\t} else {\r\n\t\t\tscreenData.pens.pixelsPerPen = Math.round( Math.PI * ( size + 1 ) * ( size + 1 ) ) + 1;\r\n\t\t}\r\n\t} else {\r\n\t\tscreenData.pens.pixelsPerPen = 1;\r\n\t}\r\n\r\n\t// Set blend data on screen\r\n\tconst previousBlend = screenData.blends.blend;\r\n\tscreenData.blends.blend = blend;\r\n\tscreenData.blends.noise = noise;\r\n\r\n\tbuildPenFn( screenData );\r\n\r\n\t// Notify renderer that blend mode has changed for webgl2 renderer\r\n\tif( previousBlend !== blend && screenData.renderMode === g_screenManager.WEBGL2_RENDER_MODE ) {\r\n\t\tscreenData.renderer.blendModeChanged( screenData, previousBlend );\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Pen Functions\r\n **************************************************************************************************/\r\n\r\n\r\n// TODO: These pen functions are obviously flawed for use in lines and shapes as they will write\r\n// over the same pixel multiple times.  Find a better way to draw shapes with a pen might be \r\n// complicated so it's not a high priority, this will get the job done for now. This is especially\r\n// problematic when combined with alpha blends because it will perform blends multiple times.\r\n// One solution could be to have a Set with all the pixel values and use a key lookup to make sure\r\n// the pixel hasn't already been set. It would use a lot of memory and be slower but it wouldn't \r\n// cause issues with alpha blend mode.  Of course it would add branching to my \"hot path\" so maybe\r\n// only use it in alpha mode.\r\n// Use this function to generate a key that is safe for a 8192x8192 max screen size.\r\n// export function getPixelKey( x, y ) {\r\n// \treturn ( y << 13 ) | x; \r\n// }\r\n// The ideal solution is to implement the pen shape in the draw commands as vector shapes\r\n// but kind of a challenge. When moving to using shaders to draw shapes in webgl2 this should be\r\n// managable but for canvas2d probably best to use the \"Set\" solution.\r\n\r\n\r\nfunction drawPenSquare( screenData, x1, y1, x2, y2, color, blendFn ) {\r\n\tfor( let py = y1; py < y2; py++ ) {\r\n\t\tfor( let px = x1; px < x2; px++ ) {\r\n\t\t\tblendFn( screenData, px, py, color );\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction drawPenCross( screenData, x, y, color, width, height, blendFn ) {\r\n\tif( x >= 0 && x < width && y >= 0 && y < height ) {\r\n\t\tblendFn( screenData, x, y, color );\r\n\t}\r\n\tif( x + 1 >= 0 && x + 1 < width && y >= 0 && y < height ) {\r\n\t\tblendFn( screenData, x + 1, y, color );\r\n\t}\r\n\tif( x - 1 >= 0 && x - 1 < width && y >= 0 && y < height ) {\r\n\t\tblendFn( screenData, x - 1, y, color );\r\n\t}\r\n\tif( x >= 0 && x < width && y + 1 >= 0 && y + 1 < height ) {\r\n\t\tblendFn( screenData, x, y + 1, color );\r\n\t}\r\n\tif( x >= 0 && x < width && y - 1 >= 0 && y - 1 < height ) {\r\n\t\tblendFn( screenData, x, y - 1, color );\r\n\t}\r\n}\r\n\r\nfunction drawPenCircle( screenData, x, y, x1, y1, x2, y2, radiusThresholdSq, color, blendFn ) {\r\n\r\n\t// Loop through the clipped square boundary\r\n\tfor( let py = y1; py < y2; py++ ) {\r\n\t\tconst dy = py - y;\r\n\r\n\t\tfor( let px = x1; px < x2; px++ ) {\r\n\t\t\tconst dx = px - x;\r\n\r\n\t\t\t// Compute the squared distance from the center\r\n\t\t\tconst distSq = dx * dx + dy * dy;\r\n\r\n\t\t\t// Only draw the pixel if its squared distance is less than the threshold\r\n\t\t\tif( distSq < radiusThresholdSq ) {\r\n\t\t\t\tblendFn( screenData, px, py, color );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Noise Functions\r\n **************************************************************************************************/\r\n\r\n\r\nfunction getColorNoise( noise, color, clamp ) {\r\n\tconst c2 = m_noiseColor;\r\n\tc2.r = color.r;\r\n\tc2.g = color.g;\r\n\tc2.b = color.b;\r\n\tc2.a = color.a;\r\n\tconst half = noise / 2;\r\n\r\n\t// Generate random noise\r\n\tc2.r = clamp( Math.round( c2.r + g_utils.rndRange( -noise[ 0 ], noise[ 0 ] ) ), 0, 255 );\r\n\tc2.g = clamp( Math.round( c2.g + g_utils.rndRange( -noise[ 1 ], noise[ 1 ] ) ), 0, 255 );\r\n\tc2.b = clamp( Math.round( c2.b + g_utils.rndRange( -noise[ 2 ], noise[ 2 ] ) ), 0, 255 );\r\n\tc2.a = clamp( Math.round( c2.a + g_utils.rndRange( -noise[ 3 ], noise[ 3 ] ) ), 0, 255 );\r\n\r\n\treturn c2;\r\n}\r\n", "/**\r\n * Pi.js - Graphics Module\r\n * \r\n * Basic Graphics Commands: pset, line, and more to come\r\n * \r\n * @module graphics/graphics-api\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_utils from \"../core/utils.js\";\r\nimport * as g_colors from \"./colors.js\";\r\n\r\n// Graphics Modules\r\nimport * as g_webgl2Renderer from \"./renderer-webgl2.js\";\r\nimport * as g_primitives from \"./graphics-primitives.js\";\r\nimport * as g_shapes from \"./graphics-shapes.js\";\r\n\r\nlet m_api = null;\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Initialize graphics module - only gets called on page load\r\nexport function init( api ) {\r\n\tm_api = api;\r\n\r\n\t// Build the null graphics commands - basically will throw an error since no screen is available\r\n\tbuildGraphicsApi( null );\r\n}\r\n\r\n// Function to dynamically build the external API drawing commands (e.g., pset, line, etc...)\r\n// for the current active screen, pen, and blend functions. This creates specialized API wrappers\r\n// that handle input parsing/validation, then call optimized internal drawing routines. By closing\r\n// over specific, already-optimized functions (like penFn), it provides highly performant, \r\n// monomorphic call sites in hot loops. Note that this gets from buildPenFn when a pen or blend\r\n// changes or when screen the screen resizes or there is a new screen. Also gets called when on\r\n// init but just to setup pre-screen calls with error returns.\r\nexport function buildGraphicsApi( s_screenData ) {\r\n\r\n\tif( s_screenData === null ) {\r\n\r\n\t\t// Set error fn for primitives\r\n\t\tfor( const commandName of g_primitives.commandNames ) {\r\n\t\t\tm_api[ commandName ] = () => g_utils.errFn( commandName );\r\n\t\t}\r\n\r\n\t\t// Set error fn for primitives\r\n\t\tfor( const commandName of g_shapes.commandNames ) {\r\n\t\t\tm_api[ commandName ] = () => g_utils.errFn( commandName );\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst s_penFn = s_screenData.pens.penFn;\r\n\tconst s_penSize = s_screenData.pens.size;\r\n\tconst s_penHalfSize = Math.round( s_penSize / 2 );\r\n\tconst s_screenWidth = s_screenData.width;\r\n\tconst s_screenHeight = s_screenData.height;\r\n\tconst s_blendFn = s_screenData.blends.blendFn;\r\n\tconst s_setImageDirty = s_screenData.renderer.setImageDirty;\r\n\tconst s_getImageData = s_screenData.renderer.getImageData;\r\n\tconst s_batchType = g_webgl2Renderer.POINTS_BATCH;\r\n\tconst s_pixelsPerPen = s_screenData.pens.pixelsPerPen;\r\n\tconst s_prepareBatch = s_screenData.renderer.prepareBatch;\r\n\tconst s_isObjectLiteral = g_utils.isObjectLiteral;\r\n\tconst s_getInt = g_utils.getInt;\r\n\tconst s_color = s_screenData.color;\r\n\tconst s_getColorValueByRawInput = g_colors.getColorValueByRawInput;\r\n\r\n\t// Build primitives api\r\n\tg_primitives.buildApi(\r\n\t\tm_api, s_screenData, s_penFn, s_isObjectLiteral, s_getInt, s_getImageData, s_color,\r\n\t\ts_setImageDirty, s_prepareBatch, s_batchType, s_pixelsPerPen\r\n\t);\r\n\r\n\t// build shapes api\r\n\tg_shapes.buildApi(\r\n\t\tm_api, s_screenData, s_penFn, s_blendFn, s_isObjectLiteral, s_getInt, s_getImageData,\r\n\t\ts_color, s_setImageDirty, s_prepareBatch, s_batchType, s_pixelsPerPen, s_screenWidth,\r\n\t\ts_screenHeight, s_penSize, s_penHalfSize, s_getColorValueByRawInput\r\n\t);\r\n}\r\n", "/**\n * Pi.js - Colors Module\n * \n * Manages the color palettes and color values for Alpha 2.\n * Simplified version focused on WebGL2 rendering.\n * \n * @module graphics/colors\n */\n\n\"use strict\";\n\n// Import modules directly\nimport * as g_state from \"../core/state-settings.js\";\nimport * as g_utils from \"../core/utils.js\";\nimport * as g_screenManager from \"../core/screen-manager.js\";\n\nlet m_defaultPal = [];\nlet m_defaultPalMap = new Map();\nlet m_defaultColor = -1;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\n// Initialize color defaults\nexport function init( api ) {\n\n\t// Default 256-color palette (CGA + extended colors) - raw hex strings\n\tconst defaultPaletteHex = [\n\t\t\"#0000AA\", \"#00AA00\", \"#00AAAA\", \"#AA0000\", \"#AA00AA\", \"#AA5500\", \"#AAAAAA\", \"#555555\",\n\t\t\"#5555FF\", \"#55FF55\", \"#55FFFF\", \"#FF5555\", \"#FF55FF\", \"#FFFF55\", \"#FFFFFF\", \"#000000\",\n\t\t\"#141414\", \"#202020\", \"#2D2D2D\", \"#393939\", \"#454545\", \"#515151\", \"#616161\", \"#717171\",\n\t\t\"#828282\", \"#929292\", \"#A2A2A2\", \"#B6B6B6\", \"#CACACA\", \"#E3E3E3\", \"#FFFFFF\", \"#0000FF\",\n\t\t\"#4100FF\", \"#7D00FF\", \"#BE00FF\", \"#FF00FF\", \"#FF00BE\", \"#FF007D\", \"#FF0041\", \"#FF0000\",\n\t\t\"#FF4100\", \"#FF7D00\", \"#FFBE00\", \"#FFFF00\", \"#BEFF00\", \"#7DFF00\", \"#41FF00\", \"#00FF00\",\n\t\t\"#00FF41\", \"#00FF7D\", \"#00FFBE\", \"#00FFFF\", \"#00BEFF\", \"#007DFF\", \"#0041FF\", \"#7D7DFF\",\n\t\t\"#9E7DFF\", \"#BE7DFF\", \"#DF7DFF\", \"#FF7DFF\", \"#FF7DDF\", \"#FF7DBE\", \"#FF7D9E\", \"#FF7D7D\",\n\t\t\"#FF9E7D\", \"#FFBE7D\", \"#FFDF7D\", \"#FFFF7D\", \"#DFFF7D\", \"#BEFF7D\", \"#9EFF7D\", \"#7DFF7D\",\n\t\t\"#7DFF9E\", \"#7DFFBE\", \"#7DFFDF\", \"#7DFFFF\", \"#7DDFFF\", \"#7DBEFF\", \"#7D9EFF\", \"#B6B6FF\",\n\t\t\"#C6B6FF\", \"#DBB6FF\", \"#EBB6FF\", \"#FFB6FF\", \"#FFB6EB\", \"#FFB6DB\", \"#FFB6C6\", \"#FFB6B6\",\n\t\t\"#FFC6B6\", \"#FFDBB6\", \"#FFEBB6\", \"#FFFFB6\", \"#EBFFB6\", \"#DBFFB6\", \"#C6FFB6\", \"#B6FFB6\",\n\t\t\"#B6FFC6\", \"#B6FFDB\", \"#B6FFEB\", \"#B6FFFF\", \"#B6EBFF\", \"#B6DBFF\", \"#B6C6FF\", \"#000071\",\n\t\t\"#1C0071\", \"#390071\", \"#550071\", \"#710071\", \"#710055\", \"#710039\", \"#71001C\", \"#710000\",\n\t\t\"#711C00\", \"#713900\", \"#715500\", \"#717100\", \"#557100\", \"#397100\", \"#1C7100\", \"#007100\",\n\t\t\"#00711C\", \"#007139\", \"#007155\", \"#007171\", \"#005571\", \"#003971\", \"#001C71\", \"#393971\",\n\t\t\"#453971\", \"#553971\", \"#613971\", \"#713971\", \"#713961\", \"#713955\", \"#713945\", \"#713939\",\n\t\t\"#714539\", \"#715539\", \"#716139\", \"#717139\", \"#617139\", \"#557139\", \"#457139\", \"#397139\",\n\t\t\"#397145\", \"#397155\", \"#397161\", \"#397171\", \"#396171\", \"#395571\", \"#394571\", \"#515171\",\n\t\t\"#595171\", \"#615171\", \"#695171\", \"#715171\", \"#715169\", \"#715161\", \"#715159\", \"#715151\",\n\t\t\"#715951\", \"#716151\", \"#716951\", \"#717151\", \"#697151\", \"#617151\", \"#597151\", \"#517151\",\n\t\t\"#517159\", \"#517161\", \"#517169\", \"#517171\", \"#516971\", \"#516171\", \"#515971\", \"#000041\",\n\t\t\"#100041\", \"#200041\", \"#310041\", \"#410041\", \"#410031\", \"#410020\", \"#410010\", \"#410000\",\n\t\t\"#411000\", \"#412000\", \"#413100\", \"#414100\", \"#314100\", \"#204100\", \"#104100\", \"#004100\",\n\t\t\"#004110\", \"#004120\", \"#004131\", \"#004141\", \"#003141\", \"#002041\", \"#001041\", \"#202041\",\n\t\t\"#282041\", \"#312041\", \"#392041\", \"#412041\", \"#412039\", \"#412031\", \"#412028\", \"#412020\",\n\t\t\"#412820\", \"#413120\", \"#413920\", \"#414120\", \"#394120\", \"#314120\", \"#284120\", \"#204120\",\n\t\t\"#204128\", \"#204131\", \"#204139\", \"#204141\", \"#203941\", \"#203141\", \"#202841\", \"#2D2D41\",\n\t\t\"#312D41\", \"#352D41\", \"#3D2D41\", \"#412D41\", \"#412D3D\", \"#412D35\", \"#412D31\", \"#412D2D\",\n\t\t\"#41312D\", \"#41352D\", \"#413D2D\", \"#41412D\", \"#3D412D\", \"#35412D\", \"#31412D\", \"#2D412D\",\n\t\t\"#2D4131\", \"#2D4135\", \"#2D413D\", \"#2D4141\", \"#2D3D41\", \"#2D3541\", \"#2D3141\", \"#000000\",\n\t\t\"#000000\", \"#000000\", \"#000000\", \"#000000\", \"#000000\", \"#000000\"\n\t];\n\n\t// Set the default pal and color\n\tsetDefaultPal( { \"pal\": defaultPaletteHex } );\n\tsetDefaultColor( { \"color\": 7 } );\n\n\t// Add getters for screen manager to get defaults for dynamic items\n\tg_screenManager.addScreenDataItemGetter( \"pal\", () => m_defaultPal );\n\tg_screenManager.addScreenDataItemGetter( \"color\", () => m_defaultColor );\n\tg_screenManager.addScreenDataItemGetter( \"palMap\", () => m_defaultPalMap );\n\n\t// Add external API commands\n\tregisterCommands( api );\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\nfunction registerCommands() {\n\n\t// Register non-screen commands\n\tg_state.addCommand( \"setDefaultPal\", setDefaultPal, false, [ \"pal\" ] );\n\tg_state.addCommand( \"setDefaultColor\", setDefaultColor, false, [ \"color\" ] );\n\n\t// Register screen commands\n\tg_state.addCommand( \"setColor\", setColor, true, [ \"color\", \"isAddToPalette\" ] );\n\tg_state.addCommand( \"getColor\", getColor, true, [ \"asIndex\" ] );\n\tg_state.addCommand( \"getPal\", getPal, true, [] );\n\tg_state.addCommand( \"setPal\", setPal, true, [ \"pal\" ] );\n\tg_state.addCommand( \"getPalIndex\", getPalIndex, true, [ \"color\", \"tolerance\" ] );\n\tg_state.addCommand( \"setBgColor\", setBgColor, true, [ \"color\" ] );\n\tg_state.addCommand( \"setContainerBgColor\", setContainerBgColor, true, [ \"color\" ] );\n\tg_state.addCommand( \"setPalColor\", setPalColor, true, [ \"index\", \"color\" ] );\n\tg_state.addCommand( \"getPalColor\", getPalColor, true, [ \"index\" ] );\n}\n\n// Set default pal\nfunction setDefaultPal( options ) {\n\tconst pal = options.pal;\n\n\tif( !Array.isArray( pal ) ) {\n\t\tconst error = new TypeError( \"setDefaultPal: Parameter pal must be an array.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( pal.length === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setDefaultPal: Parameter pal must have at least one color value.\"\n\t\t);\n\t\terror.code = \"EMPTY_PALETTE\";\n\t\tthrow error;\n\t}\n\n\t// Create default pal with the 0'th item set as a black transparent color\n\tm_defaultPal = [ g_utils.convertToColor( [ 0, 0, 0, 0 ] ) ];\n\n\t// Convert palette to color format\n\tfor( let i = 0; i < pal.length; i++ ) {\n\t\tconst c = g_utils.convertToColor( pal[ i ] );\n\t\tif( c === null ) {\n\t\t\tconsole.warn( `setDefaultPal: Invalid color value inside array pal at index: ${i}.` );\n\t\t\tm_defaultPal.push( g_utils.convertToColor( \"#000000\" ) );\n\t\t} else {\n\t\t\tm_defaultPal.push( c );\n\t\t}\n\t}\n\n\t// Set the default pal map\n\tm_defaultPalMap = new Map();\n\tfor( let i = 0; i < m_defaultPal.length; i++ ) {\n\t\tm_defaultPalMap.set( m_defaultPal[ i ].key, i );\n\t}\n\n\t// Make sure default color is in the new palette\n\tif( !m_defaultPalMap.has( m_defaultColor.key ) ) {\n\t\tm_defaultColor = m_defaultPal[ 1 ];\n\t}\n}\n\n// Set default color\nfunction setDefaultColor( options ) {\n\tlet c = options.color;\n\n\tif( !isNaN( Number( c ) ) && m_defaultPal.length > c ) {\n\t\tm_defaultColor = m_defaultPal[ c ];\n\t} else {\n\t\tc = g_utils.convertToColor( c );\n\t\tif( c === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"setDefaultColor: Parameter color is not a valid color format.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tm_defaultColor = c;\n\t}\n}\n\n// Set color\nfunction setColor( screenData, options ) {\n\tconst colorInput = options.color;\n\tconst isAddToPalette = !!options.isAddToPalette;\n\n\tlet colorValue;\n\n\t// If colorInput is an number then get colorValue for pal\n\tif( typeof colorInput === \"number\" ) {\n\t\tif( colorInput >= screenData.pal.length ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t`setColor: Parameter color index is not in pal.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tcolorValue = screenData.pal[ colorInput ];\n\t} else {\n\n\t\t// Convert the color to a colorValue\n\t\tcolorValue = g_utils.convertToColor( colorInput );\n\n\t\t// If we were unable to convert this color than it is not a valid color format\n\t\tif( colorValue === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t`setColor: Parameter color is not a valid color format.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// If we are adding to palette then we need to do an additional check to see if the color\n\t\t// is already in the palette or not\n\t\tif( isAddToPalette && findColorIndexByColorValue( screenData, colorValue ) === null ) {\n\t\t\tscreenData.pal.push( colorValue );\n\t\t\tscreenData.palMap.set( colorValue.key, screenData.pal.length - 1 );\n\t\t}\n\t}\n\n\t// Update the color values\n\tg_utils.setColor( colorValue, screenData.color );\n\n\treturn true;\n}\n\nfunction getColor( screenData, options ) {\n\tconst asIndex = !!options.asIndex;\n\tif( asIndex ) {\n\t\treturn findColorIndexByColorValue( screenData, screenData.color );\n\t}\n\treturn g_utils.rgbToColor(\n\t\tscreenData.color.r, screenData.color.g, screenData.color.b, screenData.color.a\n\t);\n}\n\n// TODO: Add parameter (include0) to return the 0 item from the pal.\n// Get palette\nfunction getPal( screenData ) {\n\tconst filteredPal = [];\n\n\t// Need to explicitly convert each color because they need to have the \n\tfor( let i = 1; i < screenData.pal.length; i += 1 ) {\n\t\tfilteredPal.push( { ...screenData.pal[ i ] } );\n\t}\n\treturn filteredPal;\n}\n\n// Set entire palette\nfunction setPal( screenData, options ) {\n\tconst pal = options.pal;\n\n\tif( !Array.isArray( pal ) ) {\n\t\tconst error = new TypeError( \"setPal: Parameter pal is must be an array.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( pal.length === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPal: Parameter pal must have at least one color value.\"\n\t\t);\n\t\terror.code = \"EMPTY_PALETTE\";\n\t\tthrow error;\n\t}\n\n\t// Create a new pal with 0'th color set to black transparent\n\tconst newPal = [ g_utils.convertToColor( [ 0, 0, 0, 0 ] ) ];\n\n\t// Convert all colors and validate\n\tfor( let i = 0; i < pal.length; i++ ) {\n\t\tconst c = g_utils.convertToColor( pal[ i ] );\n\t\tif( c === null ) {\n\t\t\tconsole.warn( `setPal: Invalid color value inside array pal at index: ${i}.` );\n\t\t\tnewPal.push( g_utils.convertToColor( \"#000000\" ) );\n\t\t} else {\n\t\t\tnewPal.push( c );\n\t\t}\n\t}\n\n\t// Set the new palette\n\tscreenData.pal = newPal;\n\n\t// Clear the palMap since we've replaced the entire palette\n\tscreenData.palMap = new Map();\n\n\t// Rebuild palMap for new palette colors\n\tfor( let i = 0; i < newPal.length; i++ ) {\n\t\tscreenData.palMap.set( newPal[ i ].key, i );\n\t}\n\n\t// Check if current drawing color needs to be updated\n\t// Find the new palette index that best matches the current color\n\tconst currentColor = screenData.color;\n\tconst newIndex = findColorIndexByColorValue( screenData, currentColor );\n\tif( newIndex !== null ) {\n\t\tscreenData.color = newPal[ newIndex ];\n\t} else {\n\n\t\t// If current color not found, default to palette index 1\n\t\tscreenData.color = newPal[ 1 ];\n\t}\n}\n\n// Get palette index for a color\nfunction getPalIndex( screenData, options ) {\n\tlet color = options.color;\n\tlet tolerance = g_utils.getFloat( options.tolerance, 1 );\n\n\t// Validate tolerance variable\n\tif( tolerance < 0 || tolerance > 1 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"getPalIndex: Parameter tolerance must be a number between 0 and 1.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Convert to color value\n\tconst colorValue = g_utils.convertToColor( color );\n\tif( colorValue === null ) {\n\t\tconst error = new TypeError(\n\t\t\t`getPalIndex: Parameter color is not a valid color format.`\n\t\t);\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n\n\tconst index = findColorIndexByColorValue( screenData, colorValue, tolerance );\n\tif( index === null ) {\n\t\treturn false;\n\t}\n\treturn index;\n}\n\n// Set the background color of the canvas\nfunction setBgColor( screenData, options ) {\n\tconst color = options.color;\n\tlet bc;\n\n\tif( Number.isInteger( color ) ) {\n\t\tbc = screenData.pal[ color ];\n\t} else {\n\t\tbc = g_utils.convertToColor( color );\n\t}\n\tif( bc && typeof bc.hex === \"string\" ) {\n\t\tscreenData.canvas.style.backgroundColor = bc.hex;\n\t} else {\n\t\tconst error = new TypeError( \"setBgColor: invalid color value for parameter color.\" );\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n}\n\n// Set the background color of the container\nfunction setContainerBgColor( screenData, options ) {\n\tconst color = options.color;\n\tlet bc;\n\tif( screenData.container ) {\n\t\tif( Number.isInteger( color ) ) {\n\t\t\tbc = screenData.pal[ color ];\n\t\t} else {\n\t\t\tbc = g_utils.convertToColor( color );\n\t\t}\n\t\tif( bc && typeof bc.hex === \"string\" ) {\n\t\t\tscreenData.container.style.backgroundColor = bc.hex;\n\t\t\treturn;\n\t\t} else {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"setContainerBgColor: invalid color value for parameter color.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COLOR\";\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\n// Set palette color\nfunction setPalColor( screenData, options ) {\n\tconst index = options.index;\n\tconst color = options.color;\n\n\t// index must be an integer\n\tif(\n\t\t!Number.isInteger( index ) ||\n\t\tindex < 0 ||\n\t\tindex >= screenData.pal.length\n\t) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPalColor: Parameter index must be an integer value.\"\n\t\t);\n\t\terror.code = \"INVALID_INDEX\";\n\t\tthrow error;\n\t}\n\n\t// index cannot be 0\n\tif( index === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPalColor: Parameter index cannot be 0, this is reserved for transparency. To set \" +\n\t\t\t\"background color of the screen use the setBgColor command.\"\n\t\t);\n\t\terror.code = \"INVALID_INDEX\";\n\t\tthrow error;\n\t}\n\n\t// Get the color value\n\tconst colorValue = g_utils.convertToColor( color );\n\tif( colorValue === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"setPalColor: Parameter color is not a valid color format.\"\n\t\t);\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n\n\t// Store the old color before replacing\n\tconst oldColor = screenData.pal[ index ];\n\n\t// Check if we are changing the current selected fore color\n\tif( screenData.color.key === oldColor.key ) {\n\t\tscreenData.color = colorValue;\n\t}\n\n\t// Set the new palette color\n\tscreenData.pal[ index ] = colorValue;\n\n\t// Update the palMap - remove old color entry and add new one\n\tscreenData.palMap.delete( oldColor.key );\n\tscreenData.palMap.set( colorValue.key, index );\n}\n\nfunction getPalColor( screenData, options ) {\n\tconst index = options.index;\n\n\tif( screenData.pal[ index ] ) {\n\t\tconst color = screenData.pal[ index ];\n\t\treturn g_utils.rgbToColor( color.r, color.g, color.b, color.a );\n\t}\n\treturn null;\n}\n\n// TODO: Implement replaceColors and replacePalColors commands\n// These require special planning for WebGL2 implementation\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\nexport function getColorValueByRawInput( screenData, rawInput ) {\n\tlet colorValue;\n\n\t// If it is an integer than get from pal array\n\tif( Number.isInteger( rawInput ) ) {\n\t\tif( rawInput >= screenData.pal.length ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn screenData.pal[ rawInput ];\n\t}\n\t\n\t// Convert to a color value\n\tcolorValue = g_utils.convertToColor( rawInput );\n\n\treturn colorValue;\n}\n\n// Finds a color index without adding it to palette\nexport function findColorIndexByColorValue( screenData, color, tolerance = 1 ) {\n\n\t// First check by key - fastest lookup\n\tif( screenData.palMap.has( color.key ) ) {\n\t\treturn screenData.palMap.get( color.key );\n\t}\n\n\t// Max color difference constant\n\tconst maxDifference = ( 255 * 255 ) * 3.25;\n\tconst minSimularity = tolerance * ( 2 - tolerance ) * maxDifference;\n\n\t// Collect all matches meeting the target similarity, then return the most similar\n\tlet bestMatchIndex = null;\n\tlet bestMatchSimularity = 0;\n\tfor( let i = 0; i < screenData.pal.length; i++ ) {\n\t\tconst palColor = screenData.pal[ i ];\n\t\tif( palColor.key === color.key ) {\n\n\t\t\t// Exact match found; this is the best possible\n\t\t\treturn i;\n\t\t}\n\n\t\tlet difference;\n\n\t\t// Special case for color 0: weight alpha higher for transparent color\n\t\tif( i === 0 ) {\n\t\t\tdifference = g_utils.calcColorDifference( palColor, color, [ 0.2, 0.2, 0.2, 0.4 ] );\n\t\t} else {\n\t\t\tdifference = g_utils.calcColorDifference( palColor, color );\n\t\t}\n\n\t\tconst similarity = maxDifference - difference;\n\t\tif( similarity >= minSimularity ) {\n\t\t\tif( similarity > bestMatchSimularity ) {\n\t\t\t\tbestMatchIndex = i;\n\t\t\t\tbestMatchSimularity = similarity;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bestMatchIndex;\n}\n\nexport function getColorValueByIndex( screenData, palIndex ) {\n\tif( palIndex >= screenData.pal.length ) {\n\t\treturn null;\n\t}\n\treturn screenData.pal[ palIndex ];\n}\n", "/**\n * Pi.js - Primitives Graphics Module\n * \n * Primitive Graphics Commands: pset, line, arc, bezier.\n * \n * @important NO INIT REQUIRED, DO NOT INCLUDE IN index.js.\n * @module graphics/primitives\n */\n\n\"use strict\";\n\n// Module Imports\nimport * as g_screenManager from \"../core/screen-manager.js\";\n\n// List of commands\nexport const commandNames = [ \"pset\", \"lines\", \"arc\", \"bezier\" ];\n\n// Build the Primitives API\nexport function buildApi(\n\ts_api, s_screenData, s_penFn, s_isObjectLiteral, s_getInt, s_getImageData, s_color,\n\ts_setImageDirty, s_prepareBatch, s_batchType, s_pixelsPerPen\n) {\n\n\n\t/**********************************************************\n\t * PSET\n\t **********************************************************/\n\n\n\t// Set the preprocess method\n\tlet s_preprocessPset;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessPset = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessPset = ( screenData ) => s_prepareBatch(\n\t\t\tscreenData, s_batchType, s_pixelsPerPen\n\t\t);\n\t}\n\n\tconst psetFn = ( x, y ) => {\n\t\tlet pX, pY;\n\n\t\t// Parse object if needed\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t}\n\n\t\t// Make sure x and y are integers\n\t\tif( pX === null || pY === null ) {\n\t\t\tconst error = new TypeError( \"pset: Parameters x and y must be integers.\" );\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\ts_preprocessPset( s_screenData );\n\t\ts_penFn( s_screenData, pX, pY, s_color );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.pset = psetFn\n\ts_screenData.api.pset = psetFn;\n\n\n\t/**********************************************************\n\t * LINE\n\t **********************************************************/\n\t\n\tlet s_preprocessLine;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessLine = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessLine = ( screenData, x1, y1, x2, y2 ) => {\n\t\t\tconst dx = x2 - x1;\n\t\t\tconst dy = y2 - y1;\n\t\t\tconst lineLen = Math.round( Math.sqrt( dx * dx + dy * dy ) ) + 1;\n\t\t\ts_prepareBatch( screenData, s_batchType, lineLen * s_pixelsPerPen );\n\t\t};\n\t}\n\t\n\tconst lineFn = ( x1, y1, x2, y2 ) => {\n\t\tlet px1, py1, px2, py2;\n\n\t\tif( s_isObjectLiteral( x1 ) ) {\n\t\t\tpx1 = s_getInt( x1.x1, null );\n\t\t\tpy1 = s_getInt( x1.y1, null );\n\t\t\tpx2 = s_getInt( x1.x2, null );\n\t\t\tpy2 = s_getInt( x1.y2, null );\n\t\t} else {\n\t\t\tpx1 = s_getInt( x1, null );\n\t\t\tpy1 = s_getInt( y1, null );\n\t\t\tpx2 = s_getInt( x2, null );\n\t\t\tpy2 = s_getInt( y2, null );\n\t\t}\n\n\t\t// Make sure x and y are integers\n\t\tif( px1 === null || py1 === null || px2 === null || py2 === null ) {\n\t\t\tconst error = new TypeError( \"line: Parameters x1, y1, x2, and y2 must be integers.\" );\n\t\t\terror.code = \"INVALID_COORDINATES\";\n\t\t\tthrow error;\n\t\t}\n\n\t\ts_preprocessLine( s_screenData, px1, py1, px2, py2 );\n\t\tm_line( s_screenData, px1, py1, px2, py2, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.line = lineFn;\n\ts_screenData.api.line = lineFn;\n\n\n\t/**********************************************************\n\t * ARC (outline only)\n\t **********************************************************/\n\n\tlet s_preprocessArcOutline;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessArcOutline = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessArcOutline = ( screenData, radius, spanDeg ) => {\n\t\t\t\n\t\t\t// Estimate number of pixels as portion of circumference\n\t\t\tconst span = Math.max( 0, Math.min( 360, spanDeg ) );\n\t\t\tconst perimeterPixels = Math.max(\n\t\t\t\t1,\n\t\t\t\tMath.round( 2 * Math.PI * radius * ( span / 360 ) )\n\t\t\t);\n\t\t\ts_prepareBatch( screenData, s_batchType, perimeterPixels * s_pixelsPerPen );\n\t\t};\n\t}\n\n\tconst arcFn = ( x, y, radius, angle1, angle2 ) => {\n\t\tlet pX, pY, pRadius, pAngle1, pAngle2;\n\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t\tpRadius = s_getInt( x.radius, null );\n\t\t\tpAngle1 = s_getInt( x.angle1, null );\n\t\t\tpAngle2 = s_getInt( x.angle2, null );\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t\tpRadius = s_getInt( radius, null );\n\t\t\tpAngle1 = s_getInt( angle1, null );\n\t\t\tpAngle2 = s_getInt( angle2, null );\n\t\t}\n\n\t\tif(\n\t\t\tpX === null || pY === null || pRadius === null ||\n\t\t\tpAngle1 === null || pAngle2 === null\n\t\t) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"arc: Parameters x1, y1, radius, angle1, and angle2 must be integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETERS\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Normalize angles to 0..360\n\t\tpAngle1 = ( pAngle1 + 360 ) % 360;\n\t\tpAngle2 = ( pAngle2 + 360 ) % 360;\n\t\tconst winding = pAngle1 > pAngle2;\n\n\t\t// Nothing to draw\n\t\tif( pRadius < 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Single point\n\t\tif( pRadius === 0 ) {\n\t\t\ts_preprocessArcOutline( s_screenData, 1, 0 );\n\t\t\ts_penFn( s_screenData, pX, pY, s_color );\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\t// Compute angle span for batching (approximate)\n\t\tlet spanDeg;\n\t\tif( winding ) {\n\t\t\tspanDeg = ( 360 - pAngle1 ) + pAngle2;\n\t\t} else {\n\t\t\tspanDeg = pAngle2 - pAngle1;\n\t\t}\n\n\t\ts_preprocessArcOutline( s_screenData, pRadius, spanDeg );\n\t\tm_arcOutline( s_screenData, pX, pY, pRadius, pAngle1, pAngle2, winding, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.arc = arcFn;\n\ts_screenData.api.arc = arcFn;\n\n\n\t/**********************************************************\n\t * BEZIER (cubic, outline)\n\t **********************************************************/\n\n\tlet s_preprocessBezierOutline;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessBezierOutline = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessBezierOutline = ( screenData, p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y ) => {\n\n\t\t\t// Approximate curve length by control polygon length\n\t\t\tconst d01 = Math.hypot( p1x - p0x, p1y - p0y );\n\t\t\tconst d12 = Math.hypot( p2x - p1x, p2y - p1y );\n\t\t\tconst d23 = Math.hypot( p3x - p2x, p3y - p2y );\n\t\t\tconst approxLen = Math.max( 1, Math.round( d01 + d12 + d23 ) );\n\t\t\ts_prepareBatch( screenData, s_batchType, approxLen * s_pixelsPerPen );\n\t\t};\n\t}\n\n\tconst bezierFn = ( xStart, yStart, x1, y1, x2, y2, xEnd, yEnd ) => {\n\t\tlet p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\n\t\tif( s_isObjectLiteral( xStart ) ) {\n\t\t\tp0x = s_getInt( xStart.xStart, null );\n\t\t\tp0y = s_getInt( xStart.yStart, null );\n\t\t\tp1x = s_getInt( xStart.x1, null );\n\t\t\tp1y = s_getInt( xStart.y1, null );\n\t\t\tp2x = s_getInt( xStart.x2, null );\n\t\t\tp2y = s_getInt( xStart.y2, null );\n\t\t\tp3x = s_getInt( xStart.xEnd, null );\n\t\t\tp3y = s_getInt( xStart.yEnd, null );\n\t\t} else {\n\t\t\tp0x = s_getInt( xStart, null );\n\t\t\tp0y = s_getInt( yStart, null );\n\t\t\tp1x = s_getInt( x1, null );\n\t\t\tp1y = s_getInt( y1, null );\n\t\t\tp2x = s_getInt( x2, null );\n\t\t\tp2y = s_getInt( y2, null );\n\t\t\tp3x = s_getInt( xEnd, null );\n\t\t\tp3y = s_getInt( yEnd, null );\n\t\t}\n\n\t\tif(\n\t\t\tp0x === null || p0y === null || p1x === null || p1y === null ||\n\t\t\tp2x === null || p2y === null || p3x === null || p3y === null\n\t\t) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"bezier: Parameters xStart, yStart, x1, y1, x2, y2, xEnd, and yEnd must be \" +\n\t\t\t\t\"integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETERS\";\n\t\t\tthrow error;\n\t\t}\n\n\t\ts_preprocessBezierOutline(\n\t\t\ts_screenData, p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y\n\t\t);\n\t\tm_bezierOutline( s_screenData, p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.bezier = bezierFn;\n\ts_screenData.api.bezier = bezierFn;\n}\n\n\n/***************************************************************************************************\n * Hot Paths\n **************************************************************************************************/\n\n/**********************************************************\n * LINE\n **********************************************************/\n\nfunction m_line( screenData, x1, y1, x2, y2, color, penFn ) {\n\t\n\tconst dx = Math.abs( x2 - x1 );\n\tconst dy = Math.abs( y2 - y1 );\n\n\t// Set the slopes\n\tlet sx = x1 < x2 ? 1 : -1;\n\tlet sy = y1 < y2 ? 1 : -1;\n\t\n\t// Set the err\n\tlet err = dx - dy;\n\n\t// Draw the first pixel\n\tpenFn( screenData, x1, y1, color );\n\n\t// Loop until the end of the line\n\twhile( !( ( x1 === x2 ) && ( y1 === y2 ) ) ) {\n\t\tconst e2 = err << 1;\n\n\t\tif( e2 > -dy ) {\n\t\t\terr -= dy;\n\t\t\tx1 += sx;\n\t\t}\n\n\t\tif( e2 < dx ) {\n\t\t\terr += dx;\n\t\t\ty1 += sy;\n\t\t}\n\n\t\t// Set the next pixel\n\t\tpenFn( screenData, x1, y1, color );\n\t}\n}\n\n/**********************************************************\n * ARC\n **********************************************************/\n\nfunction m_arcOutline(\n\tscreenData, cx, cy, radius, angle1, angle2, winding, color, penFn\n) {\n\n\t// Helper to test angle gate and set pixel\n\tfunction setPixel( px, py ) {\n\t\tlet a = Math.atan2( py - cy, px - cx ) * ( 180 / Math.PI );\n\t\ta = ( a + 360 ) % 360;\n\t\tif( winding ) {\n\t\t\tif( a >= angle1 || a <= angle2 ) {\n\t\t\t\tpenFn( screenData, px, py, color );\n\t\t\t}\n\t\t} else if( a >= angle1 && a <= angle2 ) {\n\t\t\tpenFn( screenData, px, py, color );\n\t\t}\n\t}\n\n\t// Midpoint circle algorithm drawing only points within arc angles\n\tlet x = radius;\n\tlet y = 0;\n\tlet err = 1 - x;\n\n\t// Draw initial symmetrical points\n\tsetPixel( cx + x, cy + y );\n\tsetPixel( cx - x, cy + y );\n\tsetPixel( cx + y, cy + x );\n\tsetPixel( cx + y, cy - x );\n\n\twhile( x >= y ) {\n\t\ty++;\n\t\tif( err < 0 ) {\n\t\t\terr += 2 * y + 1;\n\t\t} else {\n\t\t\tx--;\n\t\t\terr += 2 * ( y - x ) + 1;\n\t\t}\n\n\t\tsetPixel( cx + x, cy + y );\n\t\tsetPixel( cx + y, cy + x );\n\t\tsetPixel( cx - y, cy + x );\n\t\tsetPixel( cx - x, cy + y );\n\t\tsetPixel( cx - x, cy - y );\n\t\tsetPixel( cx - y, cy - x );\n\t\tsetPixel( cx + y, cy - x );\n\t\tsetPixel( cx + x, cy - y );\n\t}\n}\n\n/**********************************************************\n * BEZIER (cubic, outline)\n **********************************************************/\n\nfunction m_bezierOutline(\n\tscreenData, p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y, color, penFn\n) {\n\n\tfunction bezierPoint( t ) {\n\t\tconst u = 1 - t;\n\t\tconst uu = u * u;\n\t\tconst uuu = uu * u;\n\t\tconst tt = t * t;\n\t\tconst ttt = tt * t;\n\n\t\tconst x = Math.round(\n\t\t\tuuu * p0x + 3 * uu * t * p1x + 3 * u * tt * p2x + ttt * p3x\n\t\t);\n\t\tconst y = Math.round(\n\t\t\tuuu * p0y + 3 * uu * t * p1y + 3 * u * tt * p2y + ttt * p3y\n\t\t);\n\t\treturn { \"x\": x, \"y\": y };\n\t}\n\n\tfunction distance( a, b ) {\n\t\tconst dx = a.x - b.x;\n\t\tconst dy = a.y - b.y;\n\t\treturn Math.sqrt( dx * dx + dy * dy );\n\t}\n\n\tlet lastPoint = bezierPoint( 0 );\n\tpenFn( screenData, lastPoint.x, lastPoint.y, color );\n\n\tlet t = 0.1;\n\tlet dt = 0.1;\n\tconst minDistance = 1;\n\n\twhile( t < 1 ) {\n\t\tconst point = bezierPoint( t );\n\t\tconst d = distance( point, lastPoint );\n\n\t\tif( d > minDistance && dt > 0.00001 ) {\n\t\t\tt -= dt;\n\t\t\tdt = dt * 0.75;\n\t\t} else {\n\t\t\tpenFn( screenData, point.x, point.y, color );\n\t\t\tlastPoint = point;\n\t\t}\n\t\tt += dt;\n\t}\n\n\tconst endPoint = bezierPoint( 1 );\n\tpenFn( screenData, endPoint.x, endPoint.y, color );\n}\n", "/**\n * Pi.js - Shapes Graphics Module\n * \n * Shapes Graphics Commands: rect, circle, ellipse.\n * \n * @important NO INIT REQUIRED, DO NOT INCLUDE IN index.js.\n * @module graphics/shapes\n */\n\n\"use strict\";\n\n// Module Imports\nimport * as g_screenManager from \"../core/screen-manager.js\";\nexport const commandNames = [ \"rect\", \"circle\", \"ellipse\" ];\n\n// Build the Shapes API\nexport function buildApi(\n\ts_api, s_screenData, s_penFn, s_blendFn, s_isObjectLiteral, s_getInt, s_getImageData, s_color,\n\ts_setImageDirty, s_prepareBatch, s_batchType, s_pixelsPerPen, s_screenWidth, s_screenHeight,\n\ts_penSize, s_penHalfSize, s_getColorValueByRawInput\n) {\n\n\n\t/**********************************************************\n\t * RECT\n\t **********************************************************/\n\n\n\tlet s_preprocessRectOutline;\n\tlet s_preprocessRectFilled;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessRectOutline = s_getImageData;\n\t\ts_preprocessRectFilled = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessRectOutline = ( screenData, width, height ) => {\n\t\t\tlet perimeterPixels = width * 2 + height * 2;\n\t\t\ts_prepareBatch( screenData, s_batchType, perimeterPixels * s_pixelsPerPen );\n\t\t};\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessRectFilled = ( screenData, width, height ) => {\n\t\t\tconst areaPixels = width * height;\n\t\t\ts_prepareBatch( screenData, s_batchType, areaPixels * s_pixelsPerPen );\n\t\t};\n\t}\n\n\tconst rectFn = ( x, y, width, height, fillColor ) => {\n\t\tlet pX, pY, pFillColor, pWidth, pHeight;\n\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t\tpWidth = s_getInt( x.width, null );\n\t\t\tpHeight = s_getInt( x.height, null );\n\t\t\tpFillColor = x.pFillColor;\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t\tpWidth = s_getInt( width, null );\n\t\t\tpHeight = s_getInt( height, null );\n\t\t\tpFillColor = fillColor;\n\t\t}\n\n\t\tif( pX === null || pY === null || pWidth === null || pHeight === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"rect: Parameters x1, y1, width, and height must be integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COORDINATES\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Return if nothing to draw\n\t\tif( pWidth < 1 || pHeight < 1 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst x2 = pX + pWidth;\n\t\tconst y2 = pY + pHeight;\n\t\tconst fillColorValue = s_getColorValueByRawInput( s_screenData, pFillColor );\n\n\t\tif( fillColorValue !== null && pWidth > s_penSize && pHeight > s_penSize ) {\n\t\t\ts_preprocessRectFilled( s_screenData, pWidth, pHeight );\n\t\t\tm_rectFilled(\n\t\t\t\ts_screenData,\n\t\t\t\tMath.max( pX + s_penHalfSize, 0 ),\n\t\t\t\tMath.max( pY + s_penHalfSize, 0 ),\n\t\t\t\tMath.min( x2 - s_penHalfSize, s_screenWidth - 1 ),\n\t\t\t\tMath.min( y2 - s_penHalfSize, s_screenHeight - 1 ),\n\t\t\t\tfillColorValue,\n\t\t\t\ts_blendFn\n\t\t\t);\n\t\t}\n\t\ts_preprocessRectOutline( s_screenData, pWidth, pHeight );\n\t\tm_rectOutline( s_screenData, pX, pY, x2, y2, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.rect = rectFn;\n\ts_screenData.api.rect = rectFn;\n\n\n\t/**********************************************************\n\t * CIRCLE\n\t **********************************************************/\n\n\n\tlet s_preprocessCircleOutline;\n\tlet s_preprocessCircleFilled;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessCircleOutline = s_getImageData;\n\t\ts_preprocessCircleFilled = s_getImageData;\n\t} else {\n\n\t\t// Keep signature parity with canvas2d path\n\t\ts_preprocessCircleOutline = ( screenData, radius ) => {\n\t\t\tconst perimeterPixels = Math.round( 2 * Math.PI * radius );\n\t\t\ts_prepareBatch(\n\t\t\t\tscreenData, s_batchType, perimeterPixels * s_pixelsPerPen\n\t\t\t);\n\t\t};\n\t\ts_preprocessCircleFilled = ( screenData, radius ) => {\n\t\t\tconst areaPixels = Math.round( Math.PI * radius * radius );\n\t\t\ts_prepareBatch(\n\t\t\t\tscreenData, s_batchType, areaPixels * s_pixelsPerPen\n\t\t\t);\n\t\t};\n\t}\n\n\tconst circleFn = ( x, y, radius, fillColor ) => {\n\t\tlet pX, pY, pRadius, pFillColor;\n\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t\tpRadius = s_getInt( x.radius, null );\n\t\t\tpFillColor = x.pFillColor;\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t\tpRadius = s_getInt( radius, null );\n\t\t\tpFillColor = fillColor;\n\t\t}\n\n\t\tif( pX === null || pY === null || pRadius === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"circle: Parameters x1, y1, and radius must be integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COORDINATES\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Nothing to draw\n\t\tif( pRadius < 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Single point\n\t\tif( pRadius === 0 ) {\n\t\t\t\n\t\t\t// Reusing this for a single pixel\n\t\t\ts_preprocessRectFilled( s_screenData, 1, 1 );\n\t\t\ts_penFn( s_screenData, pX, pY, s_color );\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\tconst fillColorValue = s_getColorValueByRawInput( s_screenData, pFillColor );\n\n\t\tif( fillColorValue !== null && pRadius > s_penSize ) {\n\t\t\ts_preprocessCircleFilled( s_screenData, pRadius );\n\t\t\tm_circleFilled(\n\t\t\t\ts_screenData, pX, pY, pRadius, fillColorValue,\n\t\t\t\ts_blendFn, s_screenWidth - 1, s_screenHeight - 1\n\t\t\t);\n\t\t}\n\n\t\ts_preprocessCircleOutline( s_screenData, pRadius );\n\t\tm_circleOutline( s_screenData, pX, pY, pRadius, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.circle = circleFn;\n\ts_screenData.api.circle = circleFn;\n\n\n\t/**********************************************************\n\t * ELLIPSE\n\t **********************************************************/\n\n\n\tlet s_preprocessEllipseOutline;\n\tlet s_preprocessEllipseFilled;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessEllipseOutline = s_getImageData;\n\t\ts_preprocessEllipseFilled = s_getImageData;\n\t} else {\n\n\t\t// Keep signature parity with canvas2d path\n\t\ts_preprocessEllipseOutline = ( screenData, rx, ry ) => {\n\n\t\t\t// Ramanujan perimeter approximation P \u2248 2\u03C0 * sqrt( (rx^2 + ry^2) / 2 )\n\t\t\tconst perimeterPixels = Math.round(\n\t\t\t\t2 * Math.PI * Math.sqrt( ( rx * rx + ry * ry ) / 2 )\n\t\t\t);\n\t\t\ts_prepareBatch( screenData, s_batchType, perimeterPixels * s_pixelsPerPen );\n\t\t};\n\t\ts_preprocessEllipseFilled = ( screenData, rx, ry ) => {\n\t\t\tconst areaPixels = Math.round( Math.PI * rx * ry );\n\t\t\ts_prepareBatch( screenData, s_batchType, areaPixels * s_pixelsPerPen );\n\t\t};\n\t}\n\n\tconst ellipseFn = ( x, y, rx, ry, fillColor ) => {\n\t\tlet pX, pY, pRx, pRy, pFillColor;\n\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t\tpRx = s_getInt( x.rx, null );\n\t\t\tpRy = s_getInt( x.ry, null );\n\t\t\tpFillColor = x.pFillColor;\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t\tpRx = s_getInt( rx, null );\n\t\t\tpRy = s_getInt( ry, null );\n\t\t\tpFillColor = fillColor;\n\t\t}\n\n\t\tif( pX === null || pY === null || pRx === null || pRy === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"ellipse: Parameters x1, y1, rx, and ry must be integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COORDINATES\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Nothing to draw\n\t\tif( pRx < 0 || pRy < 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Single point\n\t\tif( pRx === 0 && pRy === 0 ) {\n\t\t\ts_preprocessEllipseOutline( s_screenData, 1, 1 );\n\t\t\ts_penFn( s_screenData, pX, pY, s_color );\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\t// Degenerate into line when one radius is 0\n\t\tif( pRx === 0 ) {\n\t\t\ts_preprocessEllipseOutline( s_screenData, 1, pRy );\n\t\t\tlet y1 = pY - pRy;\n\t\t\tconst y2 = pY + pRy;\n\t\t\twhile( y1 <= y2 ) {\n\t\t\t\ts_penFn( s_screenData, pX, y1, s_color );\n\t\t\t\ty1++;\n\t\t\t}\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\tif( pRy === 0 ) {\n\t\t\ts_preprocessEllipseOutline( s_screenData, pRx, 1 );\n\t\t\tlet x1 = pX - pRx;\n\t\t\tconst x2 = pX + pRx;\n\t\t\twhile( x1 <= x2 ) {\n\t\t\t\ts_penFn( s_screenData, x1, pY, s_color );\n\t\t\t\tx1++;\n\t\t\t}\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\tconst fillColorValue = s_getColorValueByRawInput( s_screenData, pFillColor );\n\n\t\tif( fillColorValue !== null && pRx > s_penSize && pRy > s_penSize ) {\n\t\t\ts_preprocessEllipseFilled( s_screenData, pRx, pRy );\n\t\t\tm_ellipseFilled(\n\t\t\t\ts_screenData, pX, pY, pRx, pRy, fillColorValue, s_blendFn,\n\t\t\t\ts_screenWidth - 1, s_screenHeight - 1\n\t\t\t);\n\t\t}\n\n\t\ts_preprocessEllipseOutline( s_screenData, pRx, pRy );\n\t\tm_ellipseOutline( s_screenData, pX, pY, pRx, pRy, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.ellipse = ellipseFn;\n\ts_screenData.api.ellipse = ellipseFn;\n\n}\n\n\n/***************************************************************************************************\n * Hot Paths\n **************************************************************************************************/\n\n\n/**********************************************************\n * RECT\n **********************************************************/\n\n\nfunction m_rectOutline( screenData, x1, y1, x2, y2, color, penFn ) {\n\n\t// Single point\n\tif( x1 === x2 && y1 === y2 ) {\n\t\tpenFn( screenData, x1, y1, color );\n\t\treturn;\n\t}\n\n\t// Horizontal line\n\tif( y1 === y2 ) {\n\t\tlet x = x1;\n\t\twhile( x <= x2 ) {\n\t\t\tpenFn( screenData, x, y1, color );\n\t\t\tx++;\n\t\t}\n\t\treturn;\n\t}\n\n\t// Verticle line\n\tif( x1 === x2 ) {\n\t\tlet y = y1;\n\t\twhile( y <= y2 ) {\n\t\t\tpenFn( screenData, x1, y, color );\n\t\t\ty++;\n\t\t}\n\t\treturn;\n\t}\n\n\tlet x;\n\tlet y;\n\n\tx = x1;\n\twhile( x <= x2 ) {\n\t\tpenFn( screenData, x, y1, color );\n\t\tx++;\n\t}\n\n\tx = x1;\n\twhile( x <= x2 ) {\n\t\tpenFn( screenData, x, y2, color );\n\t\tx++;\n\t}\n\n\ty = y1 + 1;\n\twhile( y < y2 ) {\n\t\tpenFn( screenData, x1, y, color );\n\t\tpenFn( screenData, x2, y, color );\n\t\ty++;\n\t}\n}\n\nfunction m_rectFilled( screenData, x1, y1, x2, y2, color, blendFn ) {\n\tlet y = y1;\n\twhile( y <= y2 ) {\n\t\tlet x = x1;\n\t\twhile( x <= x2 ) {\n\t\t\tblendFn( screenData, x, y, color );\n\t\t\tx++;\n\t\t}\n\t\ty++;\n\t}\n}\n\n\n/**********************************************************\n * CIRCLE\n **********************************************************/\n\n\nfunction m_circleOutline( screenData, cx, cy, radius, color, penFn ) {\n\n\t// Midpoint circle algorithm (8-way symmetry)\n\tlet x = radius;\n\tlet y = 0;\n\tlet err = 1 - x;\n\n\twhile( x >= y ) {\n\t\tpenFn( screenData, cx + x, cy + y, color );\n\t\tpenFn( screenData, cx + y, cy + x, color );\n\t\tpenFn( screenData, cx - y, cy + x, color );\n\t\tpenFn( screenData, cx - x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy - y, color );\n\t\tpenFn( screenData, cx - y, cy - x, color );\n\t\tpenFn( screenData, cx + y, cy - x, color );\n\t\tpenFn( screenData, cx + x, cy - y, color );\n\n\t\ty++;\n\t\tif( err < 0 ) {\n\t\t\terr += 2 * y + 1;\n\t\t} else {\n\t\t\tx--;\n\t\t\terr += 2 * ( y - x ) + 1;\n\t\t}\n\t}\n}\n\nfunction m_circleFilled( screenData, cx, cy, radius, color, blendFn, maxX, maxY ) {\n\tfor( let dy = -radius; dy <= radius; dy++ ) {\n\t\tconst y = cy + dy;\n\t\tif( y < 0 || y > maxY ) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst dxMax = Math.floor( Math.sqrt( radius * radius - dy * dy ) );\n\t\tlet x = Math.max( cx - dxMax, 0 );\n\t\tconst xEnd = Math.min( cx + dxMax, maxX );\n\t\twhile( x <= xEnd ) {\n\t\t\tblendFn( screenData, x, y, color );\n\t\t\tx++;\n\t\t}\n\t}\n}\n\n\n/**\n * ELLIPSE\n */\n\n\nfunction m_ellipseOutline( screenData, cx, cy, rx, ry, color, penFn ) {\n\n\t// Midpoint ellipse algorithm\n\tlet x = 0;\n\tlet y = ry;\n\n\tconst rx2 = rx * rx;\n\tconst ry2 = ry * ry;\n\tlet dx = 2 * ry2 * x;\n\tlet dy = 2 * rx2 * y;\n\n\t// Region 1\n\tlet p1 = ry2 - rx2 * ry + 0.25 * rx2;\n\twhile( dx < dy ) {\n\n\t\t// 4-way symmetry\n\t\tpenFn( screenData, cx + x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy - y, color );\n\t\tpenFn( screenData, cx + x, cy - y, color );\n\n\t\tx++;\n\t\tdx += 2 * ry2;\n\t\tif( p1 < 0 ) {\n\t\t\tp1 += ry2 + dx;\n\t\t} else {\n\t\t\ty--;\n\t\t\tdy -= 2 * rx2;\n\t\t\tp1 += ry2 + dx - dy;\n\t\t}\n\t}\n\n\t// Region 2\n\tlet p2 = ry2 * ( x + 0.5 ) * ( x + 0.5 ) + rx2 * ( y - 1 ) * ( y - 1 ) - rx2 * ry2;\n\twhile( y >= 0 ) {\n\n\t\t// 4-way symmetry\n\t\tpenFn( screenData, cx + x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy - y, color );\n\t\tpenFn( screenData, cx + x, cy - y, color );\n\n\t\ty--;\n\t\tdy -= 2 * rx2;\n\t\tif( p2 > 0 ) {\n\t\t\tp2 += rx2 - dy;\n\t\t} else {\n\t\t\tx++;\n\t\t\tdx += 2 * ry2;\n\t\t\tp2 += rx2 - dy + dx;\n\t\t}\n\t}\n}\n\nfunction m_ellipseFilled( screenData, cx, cy, rx, ry, color, blendFn, maxX, maxY ) {\n\tfor( let dy = -ry; dy <= ry; dy++ ) {\n\t\tconst y = cy + dy;\n\t\tif( y < 0 || y > maxY ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Compute x extent for this scanline\n\t\tconst t = 1 - ( dy * dy ) / ( ry * ry );\n\t\tconst dxMax = t <= 0 ? 0 : Math.floor( rx * Math.sqrt( t ) );\n\t\tlet x = Math.max( cx - dxMax, 0 );\n\t\tconst xEnd = Math.min( cx + dxMax, maxX );\n\t\twhile( x <= xEnd ) {\n\t\t\tblendFn( screenData, x, y, color );\n\t\t\tx++;\n\t\t}\n\t}\n}\n", "#version 300 es\nin vec2 a_position;\nin vec4 a_color;\nuniform vec2 u_resolution;\nout vec4 v_color;\n\nvoid main() {\n\n\t// Convert screen coords to NDC with pixel center adjustment\n\t// Add 0.5 to center the pixel, then convert to NDC\n\tvec2 pixelCenter = a_position + 0.5;\n\tvec2 ndc = ((pixelCenter / u_resolution) * 2.0 - 1.0) * vec2(1.0, -1.0);\n\tgl_Position = vec4(ndc, 0.0, 1.0);\n\tgl_PointSize = 1.0;\n\tv_color = a_color;\n}", "#version 300 es\nprecision mediump float;\nin vec4 v_color;\nout vec4 fragColor;\n\nvoid main() {\n\t\n\t// The fragColor will always be the straight alpha v_color.\n\t// The blend state (enabled/disabled) will determine how it's written.\n\tfragColor = v_color;\n}", "#version 300 es\nin vec4 a_position;\nin vec4 a_color;\nin vec2 a_texCoord;\n\nuniform vec2 u_resolution;\n\nout vec4 v_color;\nout vec2 v_texCoord;\n\nvoid main() {\n\t\n\t// Convert from pixel space (0 to u_resolution) to clip space (-1 to 1)\n\tvec2 zeroToOne = a_position.xy / u_resolution;\n\tvec2 zeroToTwo = zeroToOne * 2.0;\n\tvec2 clipSpace = zeroToTwo - 1.0;\n\n\t// Flip the Y-coordinate to match standard 2D graphics (top-left origin)\n\t// In WebGL, +Y is typically up, but for 2D, we want +Y down.\n\tgl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n\n\tv_color = a_color;\n\tv_texCoord = a_texCoord;\n}", "#version 300 es\nprecision highp float;\n\nin vec4 v_color;\nin vec2 v_texCoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n\n\t// Sample the color from the texture at the given texture coordinates\n\tvec4 texColor = texture(u_texture, v_texCoord);\n\n\t// Multiply the texture color by the vertex color (which can be used for tinting/alpha)\n\t// If v_color is white (1,1,1,1), it will just use the texColor.\n\toutColor = texColor * v_color;\n}", "#version 300 es\nin vec2 a_position;\nout vec2 v_texCoord;\n\nvoid main() {\n\tgl_Position = vec4(a_position, 0.0, 1.0);\n\n\t// Flip Y coordinate when sampling texture\n\tv_texCoord = (a_position + 1.0) * 0.5;\n}", "#version 300 es\nprecision mediump float;\nin vec2 v_texCoord;\nuniform sampler2D u_texture;\nout vec4 fragColor;\n\nvoid main() {\n\tvec4 texColor = texture(u_texture, v_texCoord);\n\t\n\t// The FBO already contains STRAIGHT ALPHA, so just output it directly.\n\tfragColor = texColor;\n}", "/**\n * Pi.js - Canvas2D Renderer Core Module\n * \n * 2D Canvas rendering with ImageData manipulation for pixel-perfect rendering.\n * Fallback renderer when WebGL2 is not available.\n * \n * @module graphics/renderer-canvas2d\n */\n\n\"use strict\";\n\nimport * as g_utils from \"../core/utils.js\";\n\n// Auto-render state\nlet m_autoRenderScheduled = false;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\t\n\t// Initialize will be called per screen\n}\n\nexport function cleanup( screenData ) {\n\tscreenData.context = null;\n\tscreenData.canvas = null;\n\tscreenData.imageData = null;\n\tscreenData.bufferCanvas = null;\n\tscreenData.bufferContext = null;\n}\n\n\n/***************************************************************************************************\n * Canvas2D Initialization\n **************************************************************************************************/\n\n\n/**\n * Initialize 2D Canvas context\n * \n * @param {Object} screenData - Screen data object\n */\nexport function initCanvas2D( screenData ) {\n\t\n\tconst context = screenData.canvas.getContext( \"2d\", { \"willReadFrequently\": true } );\n\t\n\tif( !context ) {\n\t\treturn null;\n\t}\n\t\n\t// Setup canvas for pixel-perfect rendering\n\tcontext.imageSmoothingEnabled = false;\n\t\n\t// Create ImageData for pixel manipulation\n\tscreenData.imageData = context.createImageData( screenData.width, screenData.height );\n\tscreenData.context = context;\n\tscreenData.bufferCanvas = null;\n\tscreenData.bufferContext = null;\n\n\treturn true;\n}\n\n\nexport function getImageData( screenData ) {\n\n\t// TODO: getImageData but only if image has been drawn to by context command such\n\t// as drawImage.  Otherwise we shouldn't need to getImageData as it should be up to\n\t// date\n}\n\n/**\n * Queue automatic render\n * \n * @param {Object} screenData - Screen data object\n */\nexport function setImageDirty( screenData ) {\n\tif( !m_autoRenderScheduled ) {\n\t\tm_autoRenderScheduled = true;\n\t\tg_utils.queueMicrotask( () => {\n\t\t\tscreenData.context.putImageData( screenData.imageData, 0, 0 );\n\t\t\tm_autoRenderScheduled = false;\n\t\t} );\n\t}\n}\n\n/**\n * Before screen size has changed\n * \n * @param {Object} screenData - Global screen data object container\n * @param {Object} fromSize - Original size width/height\n */\nexport function beforeResize( screenData, fromSize ) {\n\t\n\tif( screenData.bufferCanvas === null ) {\n\t\tscreenData.bufferCanvas = new OffscreenCanvas( fromSize.width, fromSize.height );\n\t\tscreenData.bufferContext = screenData.bufferCanvas.getContext( \"2d\" );\n\n\t\t// Set a timeout to remove the buffer from memory after 3 second -- saves memory usage\n\t\tsetTimeout( () => {\n\t\t\tscreenData.bufferCanvas = null;\n\t\t\tscreenData.bufferContext = null;\n\t\t}, 3000 );\n\t}\n\n\t// Draw the canvas to the buffer\n\tscreenData.bufferContext.clearRect( 0, 0, fromSize.width, fromSize.height );\n\tscreenData.bufferContext.drawImage( screenData.canvas, 0, 0 );\n\n}\n\n/**\n * After screen size has changed - bufferCanvas is guaranteed because beforeResize is called first\n * in the same thread.\n * \n * @param {Object} screenData - Global screen data object container\n * @param {Object} fromSize - Original size width/height\n * @param {Object} toSize - New size width/height\n */\nexport function afterResize( screenData, fromSize, toSize ) {\n\n\t// Draw the buffer back onto the canvas\n\tscreenData.context.drawImage(\n\t\tscreenData.bufferCanvas, 0, 0, fromSize.width, fromSize.height\n\t);\n\n\t// Clear up memory for buffer canvas\n\tscreenData.bufferCanvas.width = toSize.width;\n\tscreenData.bufferCanvas.height = toSize.height;\n}\n\n\n/***************************************************************************************************\n * Batch Operations\n **************************************************************************************************/\n\n\nexport function cls( screenData, x, y, width, height ) {\n\t\n\t// TODO: Implement clear screen command\n}\n\n\n/**\n * Fast path for direct pixel writes (no bounds check, no blending)\n * \n * @param {Object} screenData - Screen data object\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} r - Red component (0-255)\n * @param {number} g - Green component (0-255)\n * @param {number} b - Blue component (0-255)\n * @param {number} a - Alpha component (0-255)\n */\nexport function drawPixelUnsafe( screenData, x, y, color ) {\n\tconst data = screenData.imageData.data;\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\t\n\tdata[ i ] = color.r;\n\tdata[ i + 1 ] = color.g;\n\tdata[ i + 2 ] = color.b;\n\tdata[ i + 3 ] = color.a;\n}\n\n\nexport function blendPixelUnsafe( screenData, x, y, color ) {\n\tconst data = screenData.imageData.data;\n\n\t// Calculate the index\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\n\t// Normalize alpha to [ 0, 1 ]\n\tconst srcA = color.a / 255;\n\tconst dstA = data[ i + 3 ] / 255;\n\n\t// Apply the blend to the data\n\tdata[ i ]     = Math.round( color.r * srcA + data[ i ] * ( 1 - srcA ) );\n\tdata[ i + 1 ] = Math.round( color.g * srcA + data[ i + 1 ] * ( 1 - srcA ) );\n\tdata[ i + 2 ] = Math.round( color.b * srcA + data[ i + 2 ] * ( 1 - srcA ) );\n\tdata[ i + 3 ] = Math.round( ( srcA + dstA * ( 1 - srcA ) ) * 255 );\n}\n\n\n/***************************************************************************************************\n * Readback Operations\n **************************************************************************************************/\n\n\nexport function readPixel( screenData, x, y ) {\n\n\t// Bounds check\n\tif( x < 0 || y < 0 || x >= screenData.width || y >= screenData.height ) {\n\t\treturn null;\n\t}\n\n\t// For Canvas2D path, screenData.imageData is the source of truth.\n\tconst data = screenData.imageData.data;\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\treturn g_utils.rgbToColor( data[ i ], data[ i + 1 ], data[ i + 2 ], data[ i + 3 ] );\n}\n\nexport function readPixelAsync( screenData, x, y ) {\n\treturn Promise.resolve( readPixel( screenData, x, y ) );\n}\n\n\nexport function readPixels( screenData, x, y, width, height ) {\n\n\t// Ensure imageData reflects latest CPU buffer (we render from imageData)\n\tgetImageData( screenData );\n\n\tconst screenWidth = screenData.width;\n\tconst screenHeight = screenData.height;\n\tconst data = screenData.imageData.data;\n\n\t// Build a 2D array [height][width], null for out-of-bounds\n\tconst results = new Array( height );\n\tfor( let row = 0; row < height; row++ ) {\n\t\tconst screenY = y + row;\n\t\tconst isRowOnScreen = ( screenY >= 0 && screenY < screenHeight );\n\t\tconst resultRow = new Array( width );\n\t\tfor( let col = 0; col < width; col++ ) {\n\t\t\tconst screenX = x + col;\n\t\t\tif( isRowOnScreen && screenX >= 0 && screenX < screenWidth ) {\n\t\t\t\tconst i = ( ( screenWidth * screenY ) + screenX ) * 4;\n\t\t\t\tresultRow[ col ] = g_utils.rgbToColor(\n\t\t\t\t\tdata[ i ], data[ i + 1 ], data[ i + 2 ], data[ i + 3 ]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresultRow[ col ] = null;\n\t\t\t}\n\t\t}\n\t\tresults[ row ] = resultRow;\n\t}\n\n\treturn results;\n}\n\nexport function readPixelsAsync( screenData, x, y, width, height ) {\n\treturn Promise.resolve( readPixels( screenData, x, y, width, height ) );\n}\n\n\n/***************************************************************************************************\n * Image Drawing Operations\n **************************************************************************************************/\n\n\n/**\n * Draw an image on the screen\n * \n * @param {Object} screenData - Screen data object\n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} angleRad - Rotation angle in radians\n * @param {number} anchorX - Anchor point X (0-1)\n * @param {number} anchorY - Anchor point Y (0-1)\n * @param {number} alpha - Alpha value (0-255)\n * @param {number} scaleX - Scale X\n * @param {number} scaleY - Scale Y\n */\nexport function drawImage(\n\tscreenData, img, x, y, angleRad, anchorX, anchorY, alpha, scaleX, scaleY\n) {\n\n\tconst context = screenData.context;\n\n\t// Calculate anchor position in pixels\n\tconst anchorXPx = Math.round( img.width * anchorX );\n\tconst anchorYPx = Math.round( img.height * anchorY );\n\n\t// Save current context state\n\tcontext.save();\n\n\t// Set alpha\n\tcontext.globalAlpha = alpha / 255;\n\n\t// Apply transformations\n\tcontext.translate( x, y );\n\tcontext.rotate( angleRad );\n\tcontext.scale( scaleX, scaleY );\n\n\t// Draw image\n\tcontext.drawImage( img, -anchorXPx, -anchorYPx );\n\n\t// Restore context state\n\tcontext.restore();\n\n\t// Mark screen as dirty\n\tsetImageDirty( screenData );\n}\n", "/**\n * Pi.js - Plugin System Core Module\n * \n * Plugin registration and management for extending Pi.js functionality.\n * \n * @module core/plugins\n */\n\n\"use strict\";\n\n// Import modules directly\nimport * as g_utils from \"./utils.js\";\nimport * as g_state from \"./state-settings.js\";\n\nconst m_plugins = [];\nlet m_api;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\tm_api = api;\n\n\t// Register external API commands\n\tg_state.addCommand(\n\t\t\"registerPlugin\", registerPlugin, false, [ \"name\", \"version\", \"description\", \"init\"]\n\t);\n\tg_state.addCommand(\n\t\t\"getPlugins\", getPlugins, false, []\n\t);\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n/**\n * Register a plugin with Pi.js\n * \n * @param {Object} options - Plugin configuration\n * @param {string} options.name - Unique name for the plugin\n * @param {Function} options.init - Initialization function that receives pluginApi\n * @param {string} [options.version] - Optional version string\n * @param {string} [options.description] - Optional description\n * @returns {void}\n * \n * @example\n * pi.registerPlugin( {\n *   \"name\": \"my-plugin\",\n *   \"version\": \"1.0.0\",\n *   \"description\": \"My custom plugin\",\n *   \"init\": ( pluginApi ) => {\n *     pluginApi.addCommand( \"myCommand\", myFn, [ \"param1\" ] );\n *   }\n * } );\n */\nfunction registerPlugin( options ) {\n\n\t// Validate required parameters\n\tif( !options.name || typeof options.name !== \"string\" ) {\n\t\tconst error = new TypeError( \"registerPlugin: Plugin must have a 'name' property.\" );\n\t\terror.code = \"INVALID_PLUGIN_NAME\";\n\t\tthrow error;\n\t}\n\n\tif( !options.init || typeof options.init !== \"function\" ) {\n\t\tconst error = new TypeError(\n\t\t\t`registerPlugin: Plugin '${options.name}' must have an 'init' function.`\n\t\t);\n\t\terror.code = \"INVALID_PLUGIN_INIT\";\n\t\tthrow error;\n\t}\n\n\t// Check for duplicate\n\tif( m_plugins.find( p => p.name === options.name ) ) {\n\t\tconst error = new Error(\n\t\t\t`registerPlugin: Plugin '${options.name}' is already registered.`\n\t\t);\n\t\terror.code = \"DUPLICATE_PLUGIN\";\n\t\tthrow error;\n\t}\n\n\t// Store plugin info\n\tconst pluginInfo = {\n\t\t\"name\": options.name,\n\t\t\"version\": options.version || \"unknown\",\n\t\t\"description\": options.description || \"\",\n\t\t\"config\": options,\n\t\t\"initialized\": false\n\t};\n\n\tm_plugins.push( pluginInfo );\n\tinitializePlugin( pluginInfo );\n}\n\n/**\n * Get list of registered plugins\n * \n * @returns {Array<Object>} Array of plugin info objects with name, version, description\n * \n * @example\n * const plugins = pi.getPlugins();\n * console.log( plugins ); // [{ name: \"my-plugin\", version: \"1.0.0\", ... }]\n */\nfunction getPlugins() {\n\treturn m_plugins.map( p => ( {\n\t\t\"name\": p.name,\n\t\t\"version\": p.version,\n\t\t\"description\": p.description,\n\t\t\"initialized\": p.initialized\n\t} ) );\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Initialize a plugin\nfunction initializePlugin( pluginInfo ) {\n\tif( pluginInfo.initialized ) {\n\t\treturn;\n\t}\n\n\t// Initialize plugin\n\ttry {\n\t\tpluginInfo.config.init( m_api, m_mods );\n\t\tpluginInfo.initialized = true;\n\t} catch( error ) {\n\t\tconst pluginError = new Error(\n\t\t\t`registerPlugin: Failed to initialize plugin '${pluginInfo.name}': ${error.message}`\n\t\t);\n\t\tpluginError.code = \"PLUGIN_INIT_FAILED\";\n\t\tpluginError.originalError = error;\n\t\tthrow pluginError;\n\t}\n}\n", "/**\n * Pi.js - Graphics Pixels Module\n * \n * Commands to read and write pixels from the screen across renderers.\n * \n * @module graphics/pixels\n */\n\n\"use strict\";\n\n// Imports\nimport * as g_utils from \"../core/utils.js\";\nimport * as g_screenManager from \"../core/screen-manager.js\";\nimport * as g_colors from \"./colors.js\";\nimport * as g_state from \"../core/state-settings.js\";\nimport * as g_webgl2Renderer from \"./renderer-webgl2.js\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\tregisterCommands();\n\n\t// Stable API - do not route through addCommand for hot path put\n\tapi.put = ( data, x, y, include0 ) => {\n\t\treturn putWrapper( g_screenManager.getActiveScreen( \"put\" ), data, x, y, include0 );\n\t};\n\n\t// Also add to each screen's api for convenience\n\tg_screenManager.addScreenInitFunction( ( screenData ) => {\n\t\tscreenData.api.put = ( data, x, y, include0 ) => {\n\t\t\treturn putWrapper( screenData, data, x, y, include0 );\n\t\t};\n\t} );\n}\n\n\nfunction registerCommands() {\n\t\n\t// Register screen commands via state\n\tg_state.addCommand( \"getPixel\", getPixel, true, [ \"x\", \"y\", \"asIndex\" ] );\n\tg_state.addCommand( \"getPixelAsync\", getPixelAsync, true, [ \"x\", \"y\", \"asIndex\" ] );\n\tg_state.addCommand(\n\t\t\"get\", get, true, [ \"x\", \"y\", \"width\", \"height\", \"tolerance\", \"asIndex\" ]\n\t);\n}\n\n\n/***************************************************************************************************\n * External API\n **************************************************************************************************/\n\n\n// getPixel: Returns RGBA color object by default; if asIndex===true, returns palette index\nfunction getPixel( screenData, options ) {\n\tconst px = g_utils.getInt( options.x, null );\n\tconst py = g_utils.getInt( options.y, null );\n\tif( px === null || py === null ) {\n\t\tconst error = new TypeError( \"getPixel: Parameters x and y must be integers.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\tconst asIndex = options.asIndex === true ? true : false;\n\tconst colorValue = screenData.renderer.readPixel( screenData, px, py );\n\tif( asIndex ) {\n\t\treturn g_colors.findColorIndexByColorValue( screenData, colorValue );\n\t}\n\treturn colorValue;\n}\n\nfunction getPixelAsync( screenData, options ) {\n\tconst px = g_utils.getInt( options.x, null );\n\tconst py = g_utils.getInt( options.y, null );\n\tif( px === null || py === null ) {\n\t\tconst error = new TypeError( \"getPixelAsync: Parameters x and y must be integers.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\tconst asIndex = options.asIndex === true ? true : false;\n\treturn screenData.renderer.readPixelsAsync( screenData, px, py ).then( ( arr ) => {\n\t\tconst colorValue = arr[ 0 ];\n\t\tif( asIndex ) {\n\t\t\treturn g_colors.findColorIndexByColorValue( screenData, colorValue );\n\t\t}\n\t\treturn colorValue;\n\t} );\n}\n\n// get: Returns a 2D array [height][width] of palette indices by default.\n// Set asIndex=false to return colorValue objects instead.\n// Optional tolerance passed to findColorIndexByColorValue.\nfunction get( screenData, options ) {\n\tconst pX = g_utils.getInt( options.x, null );\n\tconst pY = g_utils.getInt( options.y, null );\n\tconst pWidth = g_utils.getInt( options.width, null );\n\tconst pHeight = g_utils.getInt( options.height, null );\n\tconst tolerance = options.tolerance;\n\tconst asIndex = ( options.asIndex === null ? true : !!options.asIndex );\n\n\tif( pX === null || pY === null || pWidth === null || pHeight === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"get: Parameters x, y, width and height must be integers.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( pWidth <= 0 || pHeight <= 0 ) {\n\t\treturn [];\n\t}\n\n\tconst colors = screenData.renderer.readPixels( screenData, pX, pY, pWidth, pHeight );\n\tif( !asIndex ) {\n\t\treturn colors;\n\t}\n\tconst results = new Array( colors.length );\n\tfor( let row = 0; row < colors.length; row++ ) {\n\t\tconst resultsRow = new Array( colors[ row ].length );\n\t\tfor( let col = 0; col < pWidth; col++ ) {\n\t\t\tconst colorValue = colors[ row ][ col ];\n\t\t\tif( asIndex ) {\n\t\t\t\tconst idx = g_colors.findColorIndexByColorValue(\n\t\t\t\t\tscreenData, colorValue, tolerance\n\t\t\t\t);\n\t\t\t\tresultsRow[ col ] = ( idx === null ? 0 : idx );\n\t\t\t} else {\n\t\t\t\tresultsRow[ col ] = colorValue;\n\t\t\t}\n\t\t}\n\t\tresults[ row ] = resultsRow;\n\t}\n\n\treturn results;\n}\n\n\n// (no internal helper functions)\n\n\n/***************************************************************************************************\n * Write API\n **************************************************************************************************/\n\n// Wrapper for the put commands handles all parsing and data validation\nfunction putWrapper( screenData, data, x, y, include0 = false ) {\n\n\t// Accept either object-literal or positional params without using parseOptions\n\tlet pData, pX, pY, pInclude0;\n\tif( g_utils.isObjectLiteral( data ) ) {\n\t\tpData = data.data;\n\t\tpX = g_utils.getInt( data.x, null );\n\t\tpY = g_utils.getInt( data.y, null );\n\t\tpInclude0 = !!data.include0;\n\t} else {\n\t\tpData = data;\n\t\tpX = g_utils.getInt( x, null );\n\t\tpY = g_utils.getInt( y, null );\n\t\tpInclude0 = !!include0;\n\t}\n\n\t// Fast bail if no data\n\tif( !pData || pData.length < 1 ) {\n\t\treturn null;\n\t}\n\n\t// Validate coordinates\n\tif( pX === null || pY === null ) {\n\t\tconst error = new TypeError( \"put: Parameters x and y must be integers.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Validate and clip data\n\tconst screenW = screenData.width;\n\tconst screenH = screenData.height;\n\n\t// Clip starting offsets when x/y are negative\n\tlet startX = ( pX < 0 ? -pX : 0 );\n\tlet startY = ( pY < 0 ? -pY : 0 );\n\n\t// Calculate width/height available from data starting at the clipped offsets\n\tlet width = data[ 0 ] ? ( data[ 0 ].length - startX ) : 0;\n\tlet height = data.length - startY;\n\n\t// Clamp to screen bounds\n\tif( pX + startX + width > screenW ) {\n\t\twidth = screenW - pX - startX;\n\t}\n\tif( pY + startY + height > screenH ) {\n\t\theight = screenH - pY - startY;\n\t}\n\n\t// If nothing to draw after clipping, exit\n\tif( width <= 0 || height <= 0 ) {\n\t\treturn;\n\t}\n\n\tif( screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\n\t\t// Call context getImageData only if out of sync\n\t\tscreenData.renderer.getImageData();\n\t} else {\n\n\t\t// Prepare the batch by making sure there are enough memory in the batch\n\t\tlet pixelCount = 0;\n\n\t\t// Use the already calculated loop bounds\n\t\tfor( let i = startY; i < startY + height; i++ ) {\n\t\t\tconst row = pData[ i ];\n\n\t\t\t// Check if row exists\n\t\t\tif( row ) {\n\n\t\t\t\t// The actual number of pixels drawn from this row will be `width`\n\t\t\t\tpixelCount += width;\n\t\t\t}\n\t\t}\n\n\t\tscreenData.renderer.prepareBatch( screenData, g_webgl2Renderer.POINTS_BATCH, pixelCount );\n\t}\n\n\tput( screenData, pData, pX, pY, pInclude0, startY, startX, width, height );\n\n\t// Mark image as dirty\n\tscreenData.renderer.setImageDirty( screenData );\n}\n\n// put: Hot path inner function. Assumes x/y are integers and data is a 2D array.\nfunction put( screenData, data, x, y, include0, startY, startX, width, height ) {\n\t\n\tconst endY = startY + height;\n\tconst endX = startX + width;\n\n\t// Draw\n\tfor( let dataY = startY; dataY < endY; dataY++ ) {\n\t\tconst row = data[ dataY ];\n\t\tif( !row ) {\n\t\t\tcontinue;\n\t\t}\n\t\tfor( let dataX = startX; dataX < endX; dataX++ ) {\n\n\t\t\t// Double bitwise NOT - fast convert to int function\n\t\t\tconst colorIndex = ~~row[ dataX ];\n\n\t\t\t// Skip transparent unless include0 is true\n\t\t\tif( colorIndex === 0 && include0 === false ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst colorValue = g_colors.getColorValueByIndex( screenData, colorIndex );\n\t\t\tconst sx = x + dataX;\n\t\t\tconst sy = y + dataY;\n\n\t\t\tscreenData.renderer.drawPixelUnsafe( screenData, sx, sy, colorValue );\n\t\t}\n\t}\n}\n", "/**\n * Pi.js - Images Module\n * \n * Image loading, storage, and management for both WebGL2 and Canvas2D renderers.\n * Uses WeakMaps for efficient image-to-texture mapping.\n * \n * @module graphics/images\n */\n\n\"use strict\";\n\n// Import modules directly\nimport * as g_utils from \"../core/utils.js\";\nimport * as g_state from \"../core/state-settings.js\";\nimport * as g_screenManager from \"../core/screen-manager.js\";\nimport * as g_webgl2Renderer from \"./renderer-webgl2.js\";\n\n// Image storage by name\nconst m_images = {};\nlet m_imageCount = 0;\n\n// WeakMap for Canvas2D image storage (for compatibility)\n// Maps Image/Canvas elements to themselves - allows unified access pattern\n// even though Canvas2D can use images directly\nconst m_canvas2dImages = new WeakMap();\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\tregisterCommands();\n}\n\nfunction registerCommands() {\n\n\t// Register non-screen commands\n\tg_state.addCommand(\n\t\t\"loadImage\", loadImage, false, [ \"src\", \"name\", \"onLoad\", \"onError\" ]\n\t);\n\n\t// Register screen commands\n\tg_state.addCommand(\n\t\t\"drawImage\", drawImage, true,\n\t\t[ \"name\", \"x\", \"y\", \"angle\", \"anchorX\", \"anchorY\", \"alpha\", \"scaleX\", \"scaleY\" ]\n\t);\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n/**\n * Load an image from URL or use provided Image/Canvas element\n * \n * @param {Object} options - Load options\n * @param {string|HTMLImageElement|HTMLCanvasElement} options.src - Image source\n * @param {string} [options.name] - Optional name for the image\n * @param {Function} [options.onLoad] - Callback when image loads\n * @param {Function} [options.onError] - Callback when image fails to load\n * @returns {string} Image name\n */\nfunction loadImage( options ) {\n\tconst src = options.src;\n\tlet name = options.name;\n\tconst onLoadCallback = options.onLoad;\n\tconst onErrorCallback = options.onError;\n\tconst srcErrMsg = \"loadImage: Parameter src must be a string URL, Image element, or Canvas \" +\n\t\t\"element.\";\n\n\t// Validate src parameter - can be string URL, Image element, or Canvas element\n\tif( typeof src === \"string\" ) {\n\t\tif( src === \"\" ) {\n\t\t\tconst error = new TypeError( srcErrMsg );\n\t\t\terror.code = \"INVALID_SRC\";\n\t\t\tthrow error;\n\t\t}\n\t} else if( src && typeof src === \"object\" ) {\n\t\tif( src.tagName !== \"IMG\" && src.tagName !== \"CANVAS\" ) {\n\t\t\tconst error = new TypeError( srcErrMsg );\n\t\t\terror.code = \"INVALID_SRC\";\n\t\t\tthrow error;\n\t\t}\n\t} else {\n\t\tconst error = new TypeError( srcErrMsg );\n\t\terror.code = \"INVALID_SRC\";\n\t\tthrow error;\n\t}\n\n\tif( name && typeof name !== \"string\" ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter name must be a string.\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\t// Generate a name if none is provided\n\tif( !name || name === \"\" ) {\n\t\tm_imageCount += 1;\n\t\tname = \"\" + m_imageCount;\n\t}\n\n\tif( m_images[ name ] ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter name must be unique.\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\t// Validate callbacks if provided\n\tif( onLoadCallback != null && !g_utils.isFunction( onLoadCallback ) ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter onLoad must be a function.\" );\n\t\terror.code = \"INVALID_CALLBACK\";\n\t\tthrow error;\n\t}\n\n\tif( onErrorCallback != null && !g_utils.isFunction( onErrorCallback ) ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter onError must be a function.\" );\n\t\terror.code = \"INVALID_CALLBACK\";\n\t\tthrow error;\n\t}\n\n\tlet img;\n\n\t// Handle Image or Canvas element passed directly\n\tif( typeof src !== \"string\" ) {\n\n\t\t// Use the element directly\n\t\timg = src;\n\n\t\t// Store immediately since element is already loaded\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"ready\",\n\t\t\t\"type\": \"image\",\n\t\t\t\"image\": img,\n\t\t\t\"width\": img.width,\n\t\t\t\"height\": img.height\n\t\t};\n\n\t\t// Register in WeakMaps (renderers will create textures when needed)\n\t\tregisterImageForRenderers( img );\n\n\t\t// Call user callback if provided\n\t\tif( onLoadCallback ) {\n\t\t\tonLoadCallback( img );\n\t\t}\n\n\t\treturn name;\n\t}\n\n\t// Handle string URL - requires async loading\n\tm_images[ name ] = { \"status\": \"loading\" };\n\n\timg = new Image();\n\n\t// Set up handlers before setting src\n\t// Increment wait count for ready() - will be decremented in onload/onerror\n\tg_state.wait();\n\n\timg.onload = function() {\n\n\t\t// Store the loaded image\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"ready\",\n\t\t\t\"type\": \"image\",\n\t\t\t\"image\": img,\n\t\t\t\"width\": img.width,\n\t\t\t\"height\": img.height\n\t\t};\n\n\t\t// Register in WeakMaps (renderers will create textures when needed)\n\t\tregisterImageForRenderers( img );\n\n\t\t// Call user callback if provided\n\t\tif( onLoadCallback ) {\n\t\t\tonLoadCallback( img );\n\t\t}\n\n\t\t// Decrement wait count\n\t\tg_state.done();\n\t};\n\n\timg.onerror = function( error ) {\n\n\t\t// Mark image as failed\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"error\",\n\t\t\t\"error\": error\n\t\t};\n\n\t\t// Call user error callback if provided\n\t\tif( onErrorCallback ) {\n\t\t\tonErrorCallback( error );\n\t\t}\n\n\t\t// Decrement wait count even on error\n\t\tg_state.done();\n\t};\n\n\t// Set source - may trigger onload synchronously if cached\n\timg.src = src;\n\n\treturn name;\n}\n\n/**\n * Draw an image on the screen\n * \n * @param {Object} screenData - Screen data object\n * @param {Object} options - Draw options\n * @param {string|Object} options.name - Image name, screen object, or Image/Canvas element\n * @param {number} options.x - X coordinate\n * @param {number} options.y - Y coordinate\n * @param {number} [options.angle] - Rotation angle in degrees\n * @param {number} [options.anchorX] - Anchor point X (0-1)\n * @param {number} [options.anchorY] - Anchor point Y (0-1)\n * @param {number} [options.alpha] - Alpha value (0-255)\n * @param {number} [options.scaleX] - Scale X\n * @param {number} [options.scaleY] - Scale Y\n */\nfunction drawImage( screenData, options ) {\n\tconst name = options.name;\n\tlet x = options.x || 0;\n\tlet y = options.y || 0;\n\tlet angle = options.angle;\n\tlet anchorX = options.anchorX;\n\tlet anchorY = options.anchorY;\n\tlet alpha = options.alpha;\n\tlet scaleX = options.scaleX;\n\tlet scaleY = options.scaleY;\n\n\tlet img;\n\n\t// Resolve image from name parameter\n\tif( typeof name === \"string\" ) {\n\n\t\t// Handle string image name\n\t\tconst imageData = getStoredImage( name );\n\t\tif( !imageData ) {\n\t\t\tconst error = new Error( `drawImage: Image \"${name}\" not found.` );\n\t\t\terror.code = \"IMAGE_NOT_FOUND\";\n\t\t\tthrow error;\n\t\t}\n\n\t\tif( imageData.status === \"loading\" ) {\n\t\t\tconst error = new Error(\n\t\t\t\t`drawImage: Image \"${name}\" is still loading. Use $.ready() to wait for it.`\n\t\t\t);\n\t\t\terror.code = \"IMAGE_NOT_READY\";\n\t\t\tthrow error;\n\t\t}\n\n\t\tif( imageData.status === \"error\" ) {\n\t\t\tconst error = new Error( `drawImage: Image \"${name}\" failed to load.` );\n\t\t\terror.code = \"IMAGE_LOAD_FAILED\";\n\t\t\tthrow error;\n\t\t}\n\n\t\timg = imageData.image;\n\t} else if( name && typeof name === \"object\" ) {\n\n\t\t// Handle screen API object\n\t\tif( name.screen === true ) {\n\t\t\tif( typeof name.canvas === \"function\" ) {\n\t\t\t\timg = name.canvas();\n\t\t\t} else {\n\t\t\t\timg = name.canvas;\n\t\t\t}\n\t\t\tif( !img ) {\n\t\t\t\tconst error = new Error( \"drawImage: Screen has no canvas.\" );\n\t\t\t\terror.code = \"INVALID_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t} else if( name.tagName === \"CANVAS\" || name.tagName === \"IMG\" ) {\n\n\t\t\t// Handle Canvas or Image element\n\t\t\timg = name;\n\t\t} else {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"drawImage: Parameter name must be a string, screen object, Canvas element, \" +\n\t\t\t\t\"or Image element.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_NAME\";\n\t\t\tthrow error;\n\t\t}\n\t} else {\n\t\tconst error = new TypeError(\n\t\t\t\"drawImage: Parameter name must be a string, screen object, Canvas element, \" +\n\t\t\t\"or Image element.\"\n\t\t);\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\t// Validate coordinates\n\tif( isNaN( x ) || isNaN( y ) ) {\n\t\tconst error = new TypeError( \"drawImage: Parameters x and y must be numbers.\" );\n\t\terror.code = \"INVALID_COORDINATES\";\n\t\tthrow error;\n\t}\n\n\t// Default values\n\tif( scaleX == null || isNaN( Number( scaleX ) ) ) {\n\t\tscaleX = 1;\n\t}\n\tif( scaleY == null || isNaN( Number( scaleY ) ) ) {\n\t\tscaleY = 1;\n\t}\n\tif( angle == null ) {\n\t\tangle = 0;\n\t}\n\tif( anchorX == null ) {\n\t\tanchorX = 0;\n\t}\n\tif( anchorY == null ) {\n\t\tanchorY = 0;\n\t}\n\tif( alpha == null && alpha !== 0 ) {\n\t\talpha = 255;\n\t}\n\n\t// Convert angle from degrees to radians\n\tconst angleRad = g_utils.degreesToRadian( angle );\n\n\t// Draw using renderer-specific implementation\n\tscreenData.renderer.drawImage(\n\t\tscreenData, img, x, y, angleRad, anchorX, anchorY, alpha, scaleX, scaleY\n\t);\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n/**\n * Register an image in WeakMap for Canvas2D renderer access\n * \n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\n */\nfunction registerImageForRenderers( img ) {\n\n\t// For Canvas2D, just store reference to image itself\n\t// Canvas2D can use Image/Canvas elements directly\n\tm_canvas2dImages.set( img, img );\n\n\t// For WebGL2, texture will be created on-demand by renderer-webgl2.getWebGL2Texture()\n\t// No need to create it here to avoid creating textures for images that may never be used\n}\n\n/**\n * Get Canvas2D image reference\n * \n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\n * @returns {HTMLImageElement|HTMLCanvasElement|null} Image or Canvas element or null\n */\nexport function getCanvas2DImage( img ) {\n\treturn m_canvas2dImages.get( img ) || img;\n}\n\n/**\n * Get stored image by name\n * \n * @param {string} name - Image name\n * @returns {Object|null} Image data object or null if not found\n */\nexport function getStoredImage( name ) {\n\tif( typeof name !== \"string\" ) {\n\t\treturn null;\n\t}\n\treturn m_images[ name ] || null;\n}\n\n/**\n * Remove an image from storage\n * \n * @param {string} name - Image name\n */\nexport function removeImage( name ) {\n\tif( typeof name !== \"string\" ) {\n\t\treturn;\n\t}\n\n\tconst imageData = m_images[ name ];\n\tif( imageData && imageData.image ) {\n\n\t\tconst img = imageData.image;\n\n\t\t// Explicitly delete WebGL2 textures to free GPU memory\n\t\t// WebGLTextures hold GPU memory that is NOT automatically freed by JS garbage collection\n\t\t// Must call gl.deleteTexture() explicitly to prevent memory leaks\n\t\tg_webgl2Renderer.deleteWebGL2Texture( img );\n\n\t\t// Canvas2D doesn't need explicit cleanup - it just references the image element\n\n\t\tdelete m_images[ name ];\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n", "/**\n * Pi.js - Event Management Core Module\n * \n * Centralized event listener management for input events (mouse, touch, keyboard, etc.)\n * \n * @module input/events\n */\n\n\"use strict\";\n\n// Import modules directly\nimport * as g_utils from \"../core/utils.js\";\nimport * as g_screenManager from \"../core/screen-manager.js\";\nimport * as g_state from \"../core/state-settings.js\";\n\n\n// Import clear functions from input modules (TODO: Re-enable when input modules are reimplemented)\n// import { clearKeyboardEvents } from \"../modules/keyboard\";\n// import { clearMouseEvents } from \"../modules/mouse\";\n// import { clearTouchEvents } from \"../modules/touch\";\n// import { clearPressEvents, clearClickEvents } from \"../modules/press\";\n// import { clearGamepadEvents } from \"../modules/gamepad\";\n\n// Placeholder functions until modules are reimplemented\nfunction clearKeyboardEvents() {\n\t// TODO: Implement when keyboard module is reimplemented\n}\n\nfunction clearMouseEvents( screenData ) {\n\t// TODO: Implement when mouse module is reimplemented\n}\n\nfunction clearTouchEvents( screenData ) {\n\t// TODO: Implement when touch module is reimplemented\n}\n\nfunction clearPressEvents( screenData ) {\n\t// TODO: Implement when press module is reimplemented\n}\n\nfunction clearClickEvents( screenData ) {\n\t// TODO: Implement when press module is reimplemented\n}\n\nfunction clearGamepadEvents() {\n\t// TODO: Implement when gamepad module is reimplemented\n}\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\tg_state.addCommand( \"clearEvents\", clearEvents, true, [ \"clearEvents\" ], true );\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n/**\n * Clear event handlers for specified input types\n * \n * @param {Object|null} screenData - Screen data object (null if no screen available)\n * @param {Object} options - Command options\n * @param {string|Array<string>} options.type - Type(s) to clear (keyboard, mouse, touch, press, click, gamepad)\n */\nfunction clearEvents( screenData, options ) {\n\tconst type = options.type;\n\tconst types = Array.isArray( type ) ? type : ( type ? [ type ] : null );\n\n\t// If no type specified, clear all\n\tif( !types ) {\n\t\tclearKeyboardEvents();\n\t\tclearGamepadEvents();\n\t\tif( screenData ) {\n\t\t\tclearMouseEvents( screenData );\n\t\t\tclearTouchEvents( screenData );\n\t\t\tclearPressEvents( screenData );\n\t\t\tclearClickEvents( screenData );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Clear specific types\n\tfor( const t of types ) {\n\t\tconst lowerType = t.toLowerCase();\n\t\tif( lowerType === \"keyboard\" ) {\n\t\t\tclearKeyboardEvents();\n\t\t} else if( lowerType === \"gamepad\" ) {\n\t\t\tclearGamepadEvents();\n\t\t} else if( lowerType === \"mouse\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear mouse events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearMouseEvents( screenData );\n\t\t} else if( lowerType === \"touch\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear touch events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearTouchEvents( screenData );\n\t\t} else if( lowerType === \"press\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear press events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearPressEvents( screenData );\n\t\t} else if( lowerType === \"click\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear click events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearClickEvents( screenData );\n\t\t} else {\n\t\t\tconst error = new Error(\n\t\t\t\t`clearEvents: Invalid type \"${t}\". ` +\n\t\t\t\t`Valid types: keyboard, mouse, touch, press, click, gamepad.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_TYPE\";\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\n\n/***************************************************************************************************\n * Event Management Functions\n **************************************************************************************************/\n\n\n/**\n * Register an event listener\n * \n * @param {string} mode - Event mode (e.g., \"down\", \"up\", \"move\")\n * @param {Function} fn - Callback function\n * @param {boolean} once - If true, listener is removed after first trigger\n * @param {Object} hitBox - Optional hit box with x, y, width, height properties\n * @param {Array<string>} modes - Valid modes for this event type\n * @param {string} name - Command name for error messages\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} extraId - Optional extra ID to append to mode\n * @param {*} extraData - Optional extra data to store with listener\n * @param {*} customData - Optional custom data passed to callback\n * @returns {boolean} True if listener was successfully registered\n */\nexport function onevent(\n\tmode, fn, once, hitBox, modes, name, listenerArr, extraId, extraData, customData\n) {\n\tlet modeFound = false;\n\n\t// Validate mode\n\tfor( let i = 0; i < modes.length; i++ ) {\n\t\tif( mode === modes[ i ] ) {\n\t\t\tmodeFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !modeFound ) {\n\t\tconst error = new Error(\n\t\t\t`${name}: mode needs to be one of the following: ${modes.join( \", \" )}.`\n\t\t);\n\t\terror.code = \"INVALID_MODE\";\n\t\tthrow error;\n\t}\n\n\t// Validate once parameter\n\tonce = !!( once );\n\n\t// Validate callback function\n\tif( !g_utils.isFunction( fn ) ) {\n\t\tconst error = new Error( `${name}: fn is not a valid function.` );\n\t\terror.code = \"INVALID_FUNCTION\";\n\t\tthrow error;\n\t}\n\n\t// Validate hitBox\n\tif( hitBox ) {\n\t\tif(\n\t\t\t!Number.isInteger( hitBox.x ) ||\n\t\t\t!Number.isInteger( hitBox.y ) ||\n\t\t\t!Number.isInteger( hitBox.width ) ||\n\t\t\t!Number.isInteger( hitBox.height )\n\t\t) {\n\t\t\tconst error = new Error(\n\t\t\t\t`${name}: hitBox must have properties x, y, width, and height ` +\n\t\t\t\t`whose values are integers.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_HITBOX\";\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Use setTimeout to prevent event from being triggered if called within an event\n\tsetTimeout( () => {\n\t\tconst originalFn = fn;\n\t\tlet newMode = mode;\n\n\t\t// Add extraId to mode if provided\n\t\tif( typeof extraId === \"string\" ) {\n\t\t\tnewMode = mode + extraId;\n\t\t}\n\n\t\t// Wrap function if it should only run once\n\t\tlet wrappedFn = fn;\n\t\tif( once ) {\n\t\t\twrappedFn = ( data, customData ) => {\n\t\t\t\toffevent( mode, originalFn, modes, name, listenerArr, extraId );\n\t\t\t\toriginalFn( data, customData );\n\t\t\t};\n\t\t}\n\n\t\t// Initialize listener array for this mode if needed\n\t\tif( !listenerArr[ newMode ] ) {\n\t\t\tlistenerArr[ newMode ] = [];\n\t\t}\n\n\t\t// Add listener\n\t\tlistenerArr[ newMode ].push( {\n\t\t\t\"fn\": wrappedFn,\n\t\t\t\"hitBox\": hitBox,\n\t\t\t\"extraData\": extraData,\n\t\t\t\"clickDown\": false,\n\t\t\t\"originalFn\": originalFn,\n\t\t\t\"customData\": customData\n\t\t} );\n\t}, 1 );\n\n\treturn true;\n}\n\n/**\n * Unregister an event listener\n * \n * @param {string} mode - Event mode\n * @param {Function} fn - Callback function to remove, or null to remove all\n * @param {Array<string>} modes - Valid modes for this event type\n * @param {string} name - Command name for error messages\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} extraId - Optional extra ID appended to mode\n * @returns {boolean} True if listener(s) were successfully removed\n */\nexport function offevent( mode, fn, modes, name, listenerArr, extraId ) {\n\tlet modeFound = false;\n\n\t// Validate mode\n\tfor( let i = 0; i < modes.length; i++ ) {\n\t\tif( mode === modes[ i ] ) {\n\t\t\tmodeFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !modeFound ) {\n\t\tconst error = new Error(\n\t\t\t`${name}: mode needs to be one of the following: ${modes.join( \", \" )}.`\n\t\t);\n\t\terror.code = \"INVALID_MODE\";\n\t\tthrow error;\n\t}\n\n\t// Add extraId to mode if provided\n\tif( typeof extraId === \"string\" ) {\n\t\tmode += extraId;\n\t}\n\n\t// Determine if clearing all listeners or specific function\n\tconst isClear = fn == null;\n\n\tif( !isClear && !g_utils.isFunction( fn ) ) {\n\t\tconst error = new Error( `${name}: fn is not a valid function.` );\n\t\terror.code = \"INVALID_FUNCTION\";\n\t\tthrow error;\n\t}\n\n\t// Remove listeners\n\tif( listenerArr[ mode ] ) {\n\t\tif( isClear ) {\n\n\t\t\t// Remove all listeners for this mode\n\t\t\tdelete listenerArr[ mode ];\n\t\t} else {\n\n\t\t\t// Remove specific function\n\t\t\tfor( let i = listenerArr[ mode ].length - 1; i >= 0; i-- ) {\n\t\t\t\tif( listenerArr[ mode ][ i ].originalFn === fn ) {\n\t\t\t\t\tlistenerArr[ mode ].splice( i, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clean up empty array\n\t\t\tif( listenerArr[ mode ].length === 0 ) {\n\t\t\t\tdelete listenerArr[ mode ];\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Trigger all event listeners for a specific mode\n * \n * @param {string} mode - Event mode to trigger\n * @param {*} data - Event data to pass to listeners\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} clickStatus - Optional \"down\" or \"up\" for click tracking\n */\nexport function triggerEventListeners( mode, data, listenerArr, clickStatus ) {\n\tif( !listenerArr[ mode ] ) {\n\t\treturn;\n\t}\n\n\t// Make a copy to prevent infinite loops if listener adds new listeners\n\tconst temp = listenerArr[ mode ].slice();\n\n\t// Loop through all event listeners\n\tfor( let i = 0; i < temp.length; i++ ) {\n\t\tconst listener = temp[ i ];\n\n\t\t// Handle click up without click down\n\t\tif( clickStatus === \"up\" && !listener.clickDown ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check hitBox if present\n\t\tif( listener.hitBox ) {\n\t\t\tlet isHit = false;\n\t\t\tlet newData;\n\n\t\t\t// Handle array data (touches)\n\t\t\tif( Array.isArray( data ) ) {\n\t\t\t\tnewData = [];\n\t\t\t\tfor( let j = 0; j < data.length; j++ ) {\n\t\t\t\t\tconst pos = data[ j ];\n\t\t\t\t\tif( g_utils.inRange( pos, listener.hitBox ) ) {\n\t\t\t\t\t\tnewData.push( pos );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( newData.length > 0 ) {\n\t\t\t\t\tisHit = true;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Handle single data point (mouse)\n\t\t\t\tnewData = data;\n\t\t\t\tif( g_utils.inRange( data, listener.hitBox ) ) {\n\t\t\t\t\tisHit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( isHit ) {\n\n\t\t\t\t// For click events, track down state\n\t\t\t\tif( clickStatus === \"down\" ) {\n\t\t\t\t\tlistener.clickDown = true;\n\t\t\t\t} else {\n\t\t\t\t\tlistener.clickDown = false;\n\t\t\t\t\tlistener.fn( newData, listener.customData );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\t// No hitBox, trigger for all events\n\t\t\tlistener.fn( data, listener.customData );\n\t\t}\n\t}\n}\n\n", "/**\r\n * Pi.js - Main Entry Point\r\n * \r\n * Graphics and sound library for retro-style games and demos.\r\n * \r\n * @module pi.js\r\n * @author Andy Stubbs\r\n * @license Apache-2.0\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Core Modules\r\nimport * as g_utils from \"./core/utils\";\r\nimport * as g_state from \"./core/state-settings.js\";\r\nimport * as g_screenManager from \"./core/screen-manager.js\";\r\nimport * as g_plugins from \"./core/plugins.js\";\r\n\r\n// Graphics\r\nimport * as g_webgl2Renderer from \"./graphics/renderer-webgl2.js\";\r\nimport * as g_canvas2dRenderer from \"./graphics/renderer-canvas2d.js\";\r\nimport * as g_pens from \"./graphics/pens.js\";\r\nimport * as g_colors from \"./graphics/colors.js\";\r\nimport * as g_graphicsApi from \"./graphics/graphics-api.js\";\r\nimport * as g_pixels from \"./graphics/pixels.js\";\r\nimport * as g_images from \"./graphics/images.js\";\r\n\r\n// Text\r\n// TODO: Import text modules\r\n\r\n// Inputs\r\nimport * as g_events from \"./input/events.js\";\r\n\r\n// Audio\r\n// TODO: Import audio modules\r\n\r\n// Version injected during build from package.json\r\nconst VERSION = \"2.0.0-alpha.2\";\r\n\r\n// Create the main api for all external commands later assinged to globals pi or $\r\nconst api = {\r\n\t\"version\": VERSION\r\n};\r\n\r\n// Store modules in array for orderered initialization\r\nconst mods = [\r\n\tg_utils, g_state, g_screenManager, g_plugins, g_webgl2Renderer, g_canvas2dRenderer, g_pens,\r\n\tg_colors, g_graphicsApi, g_pixels, g_images, g_events\r\n];\r\n\r\n// Initialize the modules\r\nfor( const mod of mods ) {\r\n\tif( mod.init ) {\r\n\t\tmod.init( api );\r\n\t}\r\n}\r\n\r\n// Process API commands\r\ng_state.processCommands( api );\r\n\r\n// Set window.pi for browser environments\r\nif( typeof window !== \"undefined\" ) {\r\n\twindow.pi = api;\r\n\r\n\t// Set $ alias only if not already defined (avoid jQuery conflicts)\r\n\tif( window.$ === undefined ) {\r\n\t\twindow.$ = api;\r\n\t}\r\n}\r\n\r\n// Export for different module systems\r\nexport default api;\r\nexport { api as pi };\r\n"],
  "mappings": "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",
  "names": ["utils_exports", "__export", "calcColorDifference", "clamp", "convertToColor", "degreesToRadian", "errFn", "generateColorKey", "getFloat", "getInt", "hexToData", "inRange", "inRange2", "isDomElement", "isFunction", "isObjectLiteral", "pad", "padL", "parseOptions", "queueMicrotask", "radiansToDegrees", "rgbToColor", "rndRange", "setColor", "commandName", "error", "args", "parameterNames", "resultOptions", "name", "isNamedParameterFound", "inputOptions", "i", "fn", "el", "obj", "proto", "hex", "width", "height", "data", "digits", "digitIndex", "y", "x", "hexPart", "num", "min", "max", "point", "hitBox", "x1", "y1", "x2", "y2", "deg", "rad", "str", "len", "c", "val", "def", "parsed", "callback", "COLOR_PROTO", "m_colorCheckerContext", "r", "g", "b", "a", "rgbToHex", "createColor", "color", "hexToColor", "splitRgb", "colorStringToColor", "c1", "c2", "w", "dr", "dg", "db", "da", "colorSrc", "colorDest", "s", "parts", "colors", "cToHex", "colorStr", "state_settings_exports", "__export", "addCommand", "addSetting", "done", "init", "processCommands", "set", "wait", "screen_manager_exports", "__export", "CANVAS2D_RENDER_MODE", "WEBGL2_RENDER_MODE", "m_activeScreenData", "addScreenCleanupFunction", "addScreenDataItem", "addScreenDataItemGetter", "addScreenInitFunction", "addScreenResizeFunction", "getActiveScreen", "getAllScreens", "init", "renderer_webgl2_exports", "__export", "IMAGE_BATCH", "POINTS_BATCH", "blendModeChanged", "cleanup", "cls", "deleteWebGL2Texture", "drawImage", "drawPixelUnsafe", "getWebGL2Texture", "init", "initWebGL", "m_isWebgl2Capable", "prepareBatch", "readPixel", "readPixelAsync", "readPixels", "readPixelsAsync", "setImageDirty", "pens_exports", "__export", "BLENDS", "BLEND_ALPHA", "BLEND_REPLACE", "PENS", "PEN_CIRCLE", "PEN_PIXEL", "PEN_SQUARE", "init", "graphics_api_exports", "__export", "buildGraphicsApi", "init", "colors_exports", "__export", "findColorIndexByColorValue", "getColorValueByIndex", "getColorValueByRawInput", "init", "m_defaultPal", "m_defaultPalMap", "m_defaultColor", "init", "api", "setDefaultPal", "setDefaultColor", "addScreenDataItemGetter", "registerCommands", "addCommand", "setColor", "getColor", "getPal", "setPal", "getPalIndex", "setBgColor", "setContainerBgColor", "setPalColor", "getPalColor", "options", "pal", "error", "convertToColor", "i", "c", "screenData", "colorInput", "isAddToPalette", "colorValue", "findColorIndexByColorValue", "rgbToColor", "filteredPal", "newPal", "currentColor", "newIndex", "color", "tolerance", "getFloat", "index", "bc", "oldColor", "getColorValueByRawInput", "rawInput", "maxDifference", "minSimularity", "bestMatchIndex", "bestMatchSimularity", "palColor", "difference", "calcColorDifference", "similarity", "getColorValueByIndex", "palIndex", "commandNames", "buildApi", "s_api", "s_screenData", "s_penFn", "s_isObjectLiteral", "s_getInt", "s_getImageData", "s_color", "s_setImageDirty", "s_prepareBatch", "s_batchType", "s_pixelsPerPen", "s_preprocessPset", "CANVAS2D_RENDER_MODE", "screenData", "psetFn", "x", "y", "pX", "pY", "error", "s_preprocessLine", "x1", "y1", "x2", "y2", "dx", "dy", "lineLen", "lineFn", "px1", "py1", "px2", "py2", "m_line", "s_preprocessArcOutline", "radius", "spanDeg", "span", "perimeterPixels", "arcFn", "angle1", "angle2", "pRadius", "pAngle1", "pAngle2", "winding", "m_arcOutline", "s_preprocessBezierOutline", "p0x", "p0y", "p1x", "p1y", "p2x", "p2y", "p3x", "p3y", "d01", "d12", "d23", "approxLen", "bezierFn", "xStart", "yStart", "xEnd", "yEnd", "m_bezierOutline", "color", "penFn", "sx", "sy", "err", "e2", "cx", "cy", "setPixel", "px", "py", "a", "bezierPoint", "t", "u", "uu", "uuu", "tt", "ttt", "distance", "b", "lastPoint", "dt", "minDistance", "point", "endPoint", "commandNames", "buildApi", "s_api", "s_screenData", "s_penFn", "s_blendFn", "s_isObjectLiteral", "s_getInt", "s_getImageData", "s_color", "s_setImageDirty", "s_prepareBatch", "s_batchType", "s_pixelsPerPen", "s_screenWidth", "s_screenHeight", "s_penSize", "s_penHalfSize", "s_getColorValueByRawInput", "s_preprocessRectOutline", "s_preprocessRectFilled", "CANVAS2D_RENDER_MODE", "screenData", "width", "height", "perimeterPixels", "areaPixels", "rectFn", "x", "y", "fillColor", "pX", "pY", "pFillColor", "pWidth", "pHeight", "error", "x2", "y2", "fillColorValue", "m_rectFilled", "m_rectOutline", "s_preprocessCircleOutline", "s_preprocessCircleFilled", "radius", "circleFn", "pRadius", "m_circleFilled", "m_circleOutline", "s_preprocessEllipseOutline", "s_preprocessEllipseFilled", "rx", "ry", "ellipseFn", "pRx", "pRy", "y1", "x1", "m_ellipseFilled", "m_ellipseOutline", "color", "penFn", "blendFn", "cx", "cy", "err", "maxX", "maxY", "dy", "dxMax", "xEnd", "rx2", "ry2", "dx", "p1", "p2", "t", "m_api", "init", "api", "buildGraphicsApi", "s_screenData", "commandName", "commandNames", "errFn", "s_penFn", "s_penSize", "s_penHalfSize", "s_screenWidth", "s_screenHeight", "s_blendFn", "s_setImageDirty", "s_getImageData", "s_batchType", "POINTS_BATCH", "s_pixelsPerPen", "s_prepareBatch", "s_isObjectLiteral", "isObjectLiteral", "s_getInt", "getInt", "s_color", "s_getColorValueByRawInput", "getColorValueByRawInput", "buildApi", "PEN_PIXEL", "PEN_SQUARE", "PEN_CIRCLE", "PENS", "BLEND_REPLACE", "BLEND_ALPHA", "BLENDS", "m_noiseColor", "init", "api", "addScreenDataItems", "registerCommands", "addScreenDataItem", "addScreenResizeFunction", "screenData", "buildPenFn", "addCommand", "setPen", "s_screenData", "s_drawPixelunsafe", "s_blendPixelUnsafe", "s_width", "s_height", "s_noise", "s_clamp", "clamp", "s_blendFn", "WEBGL2_RENDER_MODE", "x", "y", "color", "getColorNoise", "squareSize", "offset", "x1", "x2", "y1", "y2", "drawPenSquare", "drawPenCross", "diameter", "half", "radiusThresholdSq", "drawPenCircle", "buildGraphicsApi", "options", "pen", "size", "getInt", "blend", "noise", "error", "i", "previousBlend", "blendFn", "py", "px", "width", "height", "dy", "dx", "c2", "rndRange", "point_default", "point_default", "image_default", "image_default", "display_default", "display_default", "MAX_POINT_BATCH_SIZE", "DEFAULT_POINT_BATCH_SIZE", "MAX_IMAGE_BATCH_SIZE", "DEFAULT_IMAGE_BATCH_SIZE", "BATCH_CAPACITY_SHRINK_INTERVAL", "m_webgl2Textures", "POINTS_BATCH", "IMAGE_BATCH", "BATCH_TYPES", "m_batchProto", "m_isWebgl2Capable", "init", "addScreenCleanupFunction", "cleanup", "m_isWebgl2Capable", "testWebGL2Capability", "screenData", "CANVAS2D_RENDER_MODE", "gl", "batchType", "batch", "testCanvas", "testScreenData", "result", "initWebGL", "canvas", "width", "height", "createTextureAndFBO", "POINTS_BATCH", "createBatchSystem", "point_default", "IMAGE_BATCH", "image_default", "setupDisplayShader", "debugExt", "e", "blendModeChanged", "status", "createShaderProgram", "vertexSource", "fragmentSource", "vertexShader", "compileShader", "fragmentShader", "error", "program", "errLog", "type", "source", "shader", "display_default", "positions", "positionBuffer", "positionLoc", "textureLoc", "setImageDirty", "queueMicrotask", "flushBatches", "displayToCanvas", "cls", "x", "y", "previousBlend", "vertSrc", "fragSrc", "m_batchProto", "DEFAULT_POINT_BATCH_SIZE", "MAX_POINT_BATCH_SIZE", "DEFAULT_IMAGE_BATCH_SIZE", "MAX_IMAGE_BATCH_SIZE", "BATCH_CAPACITY_SHRINK_INTERVAL", "prepareBatch", "newItemCount", "batchInfo", "lastDrawOrderItem", "drawOrderItem", "requiredCount", "newCapacity", "resizeBatch", "newVertices", "newColors", "newTexCoords", "BATCH_TYPES", "blend", "BLEND_REPLACE", "uploadBatch", "texture", "drawBatch", "resetBatch", "startIndex", "endIndex", "locations", "drawPixelUnsafe", "color", "idx", "cidx", "readPixel", "screenWidth", "screenHeight", "glY", "buf", "rgbToColor", "readPixelAsync", "resolve", "readPixels", "clampedX", "clampedY", "clampedWidth", "clampedHeight", "glReadY", "resultColors", "row", "resultsRow", "col", "bufRow", "i", "readPixelsAsync", "getWebGL2Texture", "img", "contextMap", "m_webgl2Textures", "deleteWebGL2Texture", "allScreens", "getAllScreens", "drawImage", "angleRad", "anchorX", "anchorY", "alpha", "scaleX", "scaleY", "imgWidth", "imgHeight", "anchorXPx", "anchorYPx", "scaledWidth", "scaledHeight", "corners", "cos", "sin", "corner", "rx", "ry", "texCoords", "r", "g", "b", "a", "baseIdx", "vertexBase", "colorBase", "texBase", "vIdx", "cIdx", "tIdx", "renderer_canvas2d_exports", "__export", "afterResize", "beforeResize", "blendPixelUnsafe", "cleanup", "cls", "drawImage", "drawPixelUnsafe", "getImageData", "init", "initCanvas2D", "readPixel", "readPixelAsync", "readPixels", "readPixelsAsync", "setImageDirty", "m_autoRenderScheduled", "init", "api", "cleanup", "screenData", "initCanvas2D", "context", "getImageData", "setImageDirty", "queueMicrotask", "beforeResize", "fromSize", "afterResize", "toSize", "cls", "x", "y", "width", "height", "drawPixelUnsafe", "color", "data", "blendPixelUnsafe", "srcA", "dstA", "readPixel", "i", "rgbToColor", "readPixelAsync", "readPixels", "screenWidth", "screenHeight", "results", "row", "screenY", "isRowOnScreen", "resultRow", "col", "screenX", "readPixelsAsync", "drawImage", "img", "angleRad", "anchorX", "anchorY", "alpha", "scaleX", "scaleY", "anchorXPx", "anchorYPx", "WEBGL2_RENDER_MODE", "CANVAS2D_RENDER_MODE", "MAX_CANVAS_DIMENSION", "SCREEN_API_PROTO", "m_screens", "m_screenDataItems", "m_screenDataItemGetters", "m_screenDataInitFunctions", "m_screenDataResizeFunctions", "m_screenDataCleanupFunctions", "m_nextScreenId", "m_activeScreenData", "m_resizeObserver", "m_observedContainers", "getAllScreens", "screens", "id", "m_screens", "init", "api", "m_resizeObserver", "entries", "entry", "canvases", "canvas", "screenId", "screenData", "resizeScreen", "registerCommands", "addCommand", "screen", "setScreen", "getScreen", "removeScreen", "widthCmd", "heightCmd", "canvasCmd", "addScreenDataItem", "name", "val", "m_screenDataItems", "addScreenDataItemGetter", "fn", "m_screenDataItemGetters", "addScreenInitFunction", "m_screenDataInitFunctions", "addScreenResizeFunction", "m_screenDataResizeFunctions", "addScreenCleanupFunction", "m_screenDataCleanupFunctions", "getActiveScreen", "fnName", "isScreenOptional", "m_activeScreenData", "error", "options", "isFunction", "m_nextScreenId", "SCREEN_API_PROTO", "m_isWebgl2Capable", "itemGetter", "parseAspect", "validateDimensions", "setupOffscreenCanvasOptions", "isDomElement", "setDefaultCanvasOptions", "m_observedContainers", "setupScreenRenderer", "PEN_PIXEL", "aspect", "match", "width", "splitter", "height", "imageRenderingValues", "i", "webgl2Status", "initWebGL", "WEBGL2_RENDER_MODE", "renderer_webgl2_exports", "initCanvas2D", "CANVAS2D_RENDER_MODE", "renderer_canvas2d_exports", "MAX_CANVAS_DIMENSION", "createdDeletedMethodErrorFn", "key", "errorMessage", "hasOtherScreens", "otherScreen", "getter", "screenObj", "getInt", "isInit", "fromSize", "beforeResize", "size", "getSize", "setCanvasSize", "toSize", "afterResize", "maxWidth", "maxHeight", "aspectData", "newCssWidth", "newCssHeight", "factorX", "factorY", "factor", "ratio1", "ratio2", "element", "m_settings", "m_readyCallbacks", "m_isDocumentReady", "m_waitCount", "m_checkReadyTimeout", "m_commands", "init", "api", "onDocumentReady", "registerCommands", "addScreenInitFunction", "processScreenCommands", "addCommand", "ready", "set", "wait", "done", "scheduleReadyCheck", "addSetting", "name", "fn", "isScreen", "parameterNames", "isScreenOptional", "settingName", "processCommands", "command", "args", "options", "parseOptions", "screenData", "getActiveScreen", "callback", "isFunction", "error", "resolve", "optionName", "setting", "argsArray", "parsedOptions", "checkReady", "callbacks", "item", "plugins_exports", "__export", "init", "m_plugins", "m_api", "init", "api", "addCommand", "registerPlugin", "getPlugins", "options", "error", "p", "pluginInfo", "initializePlugin", "pluginError", "pixels_exports", "__export", "init", "init", "api", "registerCommands", "data", "x", "y", "include0", "putWrapper", "getActiveScreen", "addScreenInitFunction", "screenData", "addCommand", "getPixel", "getPixelAsync", "get", "options", "px", "getInt", "py", "error", "asIndex", "colorValue", "findColorIndexByColorValue", "arr", "pX", "pY", "pWidth", "pHeight", "tolerance", "colors", "results", "row", "resultsRow", "col", "idx", "pData", "pInclude0", "isObjectLiteral", "screenW", "screenH", "startX", "startY", "width", "height", "CANVAS2D_RENDER_MODE", "pixelCount", "i", "POINTS_BATCH", "put", "endY", "endX", "dataY", "dataX", "colorIndex", "getColorValueByIndex", "sx", "sy", "images_exports", "__export", "getCanvas2DImage", "getStoredImage", "init", "removeImage", "m_images", "m_imageCount", "m_canvas2dImages", "init", "api", "registerCommands", "addCommand", "loadImage", "drawImage", "options", "src", "name", "onLoadCallback", "onErrorCallback", "srcErrMsg", "error", "isFunction", "img", "registerImageForRenderers", "wait", "done", "screenData", "x", "y", "angle", "anchorX", "anchorY", "alpha", "scaleX", "scaleY", "imageData", "getStoredImage", "angleRad", "degreesToRadian", "getCanvas2DImage", "removeImage", "deleteWebGL2Texture", "events_exports", "__export", "init", "offevent", "onevent", "triggerEventListeners", "init", "api", "addCommand", "clearEvents", "screenData", "options", "type", "types", "t", "lowerType", "error", "onevent", "mode", "fn", "once", "hitBox", "modes", "name", "listenerArr", "extraId", "extraData", "customData", "modeFound", "i", "isFunction", "originalFn", "newMode", "wrappedFn", "data", "offevent", "isClear", "triggerEventListeners", "clickStatus", "temp", "listener", "isHit", "newData", "j", "pos", "inRange", "VERSION", "api", "mods", "utils_exports", "state_settings_exports", "screen_manager_exports", "plugins_exports", "renderer_webgl2_exports", "renderer_canvas2d_exports", "pens_exports", "colors_exports", "graphics_api_exports", "pixels_exports", "images_exports", "events_exports", "mod", "processCommands", "index_default"]
}
