{
  "version": 3,
  "sources": ["../src/core/utils.js", "../src/core/state-settings.js", "../src/core/screen-manager.js", "../src/graphics/renderer-webgl2.js", "../src/graphics/pens.js", "../src/graphics/graphics-api.js", "../src/graphics/colors.js", "../src/graphics/graphics-primitives.js", "../src/graphics/graphics-shapes.js", "../src/graphics/shaders/point.vert", "../src/graphics/shaders/point.frag", "../src/graphics/shaders/image.vert", "../src/graphics/shaders/image.frag", "../src/graphics/shaders/display.vert", "../src/graphics/shaders/display.frag", "../src/graphics/renderer-canvas2d.js", "../src/core/plugins.js", "../src/graphics/pixels.js", "../src/graphics/images.js", "../src/input/events.js", "../src/index.js"],
  "sourceRoot": "../src/",
  "sourcesContent": ["/**\r\n * Pi.js - Utilities Module\r\n * \r\n * Common utility functions for math, colors, types, and data manipulation.\r\n * \r\n * @module core/utils\r\n */\r\n\r\n\"use strict\";\r\n\r\n\r\n/***************************************************************************************************\r\n * General Utility Functions\r\n **************************************************************************************************/\r\n\r\n\r\nexport const errFn = ( commandName ) => {\r\n\tconst error = new Error(\r\n\t\t`${commandName}: No screens available for command. You must first create a ` +\r\n\t\t`screen with $.screen command.`\r\n\t);\r\n\terror.code = \"NO_SCREEN\";\r\n\tthrow error;\r\n};\r\n\r\n/**\r\n * Parse options - normalizes input arguments into an object with named parameters.\r\n *\r\n * @param {Array<any>} args - Arguments passed to the command (from rest parameters like `...args`).\r\n * @param {Array<string>} parameterNames - Array of parameter names in expected order.\r\n * @returns {Object<string, any>} \tAn object where keys are `parameterNames` and values are the \r\n * \t\t\t\t\t\t\t\t\tparsed arguments. Missing values will be `null`.\r\n */\r\nexport function parseOptions( args, parameterNames ) {\r\n\tconst resultOptions = {};\r\n\r\n\t// Initialize all named parameters to null\r\n\tfor( const name of parameterNames ) {\r\n\t\tresultOptions[ name ] = null;\r\n\t}\r\n\r\n\tlet isNamedParameterFound = false;\r\n\r\n\t// Case 1: First argument is an object literal\r\n\tif( args.length > 0 && isObjectLiteral( args[ 0 ] ) ) {\r\n\t\tconst inputOptions = args[ 0 ];\r\n\r\n\t\tfor( const name of parameterNames ) {\r\n\t\t\tif( name in inputOptions ) {\r\n\t\t\t\tisNamedParameterFound = true;\r\n\t\t\t\tresultOptions[ name ] = inputOptions[ name ];\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\t\r\n\t// If no named parameters found then treat as positional array\r\n\tif( !isNamedParameterFound ) {\r\n\r\n\t\t// Case 2: Arguments are passed positionally\r\n\t\t// Map the positional arguments to the named parameters\r\n\t\t// If args[ i ] is out of bounds, it remains null from initialization\r\n\t\tfor( let i = 0; i < parameterNames.length; i++ ) {\r\n\t\t\tif( i < args.length ) {\r\n\t\t\t\tresultOptions[ parameterNames[ i ] ] = args[ i ];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn resultOptions;\r\n}\r\n\r\n// Type checking utilities\r\nexport const isFunction = ( fn ) => typeof fn === \"function\";\r\nexport const isDomElement = ( el ) => el instanceof Element;\r\nexport const isObjectLiteral = ( obj ) => {\r\n\tif( typeof obj !== \"object\" || obj === null || Array.isArray( obj ) ) {\r\n\t\treturn false;\r\n\t}\r\n\tconst proto = Object.getPrototypeOf( obj );\r\n\treturn proto === null || proto === Object.prototype;\r\n};\r\n\r\n// Data conversion utilities\r\n\r\n/**\r\n * Convert hex string to 2D data array\r\n * \r\n * @param {string} hex - Hex string\r\n * @param {number} width - Width of data\r\n * @param {number} height - Height of data\r\n * @returns {Array<Array<number>>} 2D array of binary data\r\n */\r\nexport function hexToData( hex, width, height ) {\r\n\thex = hex.toUpperCase();\r\n\tconst data = [];\r\n\tlet i = 0;\r\n\tlet digits = \"\";\r\n\tlet digitIndex = 0;\r\n\r\n\tfor( let y = 0; y < height; y++ ) {\r\n\t\tdata.push( [] );\r\n\t\tfor( let x = 0; x < width; x++ ) {\r\n\t\t\tif( digitIndex >= digits.length ) {\r\n\t\t\t\tlet hexPart = parseInt( hex[ i ], 16 );\r\n\t\t\t\tif( isNaN( hexPart ) ) {\r\n\t\t\t\t\thexPart = 0;\r\n\t\t\t\t}\r\n\t\t\t\tdigits = padL( hexPart.toString( 2 ), 4, \"0\" );\r\n\t\t\t\ti += 1;\r\n\t\t\t\tdigitIndex = 0;\r\n\t\t\t}\r\n\t\t\tdata[ y ].push( parseInt( digits[ digitIndex ] ) );\r\n\t\t\tdigitIndex += 1;\r\n\t\t}\r\n\t}\r\n\treturn data;\r\n}\r\n\r\n// Math utilities\r\n\r\n/**\r\n * Clamp a number between min and max\r\n * \r\n * @param {number} num - Number to clamp\r\n * @param {number} min - Minimum value\r\n * @param {number} max - Maximum value\r\n * @returns {number} Clamped value\r\n */\r\nexport function clamp( num, min, max ) {\r\n\treturn Math.min( Math.max( num, min ), max );\r\n}\r\n\r\n/**\r\n * Check if a point is in a rectangle\r\n * \r\n * @param {Object} point - Point with x, y properties\r\n * @param {Object} hitBox - Rectangle with x, y, width, height properties\r\n * @returns {boolean} True if point is inside rectangle\r\n */\r\nexport function inRange( point, hitBox ) {\r\n\treturn point.x >= hitBox.x && point.x < hitBox.x + hitBox.width &&\r\n\t\tpoint.y >= hitBox.y && point.y < hitBox.y + hitBox.height;\r\n}\r\n\r\n/**\r\n * Check if coordinates are in a rectangle\r\n * \r\n * @param {number} x1 - Point x\r\n * @param {number} y1 - Point y\r\n * @param {number} x2 - Rectangle x\r\n * @param {number} y2 - Rectangle y\r\n * @param {number} width - Rectangle width\r\n * @param {number} height - Rectangle height\r\n * @returns {boolean} True if point is inside rectangle\r\n */\r\nexport function inRange2( x1, y1, x2, y2, width, height ) {\r\n\treturn x1 >= x2 && x1 < x2 + width &&\r\n\t\ty1 >= y2 && y1 < y2 + height;\r\n}\r\n\r\n/**\r\n * Generate random number in range\r\n * \r\n * @param {number} min - Minimum value\r\n * @param {number} max - Maximum value\r\n * @returns {number} Random number between min and max\r\n */\r\nexport function rndRange( min, max ) {\r\n\treturn Math.random() * ( max - min ) + min;\r\n}\r\n\r\n/**\r\n * Convert degrees to radians\r\n * \r\n * @param {number} deg - Degrees\r\n * @returns {number} Radians\r\n */\r\nexport function degreesToRadian( deg ) {\r\n\treturn deg * ( Math.PI / 180 );\r\n}\r\n\r\n/**\r\n * Convert radians to degrees\r\n * \r\n * @param {number} rad - Radians\r\n * @returns {number} Degrees\r\n */\r\nexport function radiansToDegrees( rad ) {\r\n\treturn rad * ( 180 / Math.PI );\r\n}\r\n\r\n// String utilities\r\n\r\n/**\r\n * Pad string on left\r\n * \r\n * @param {string} str - String to pad\r\n * @param {number} len - Target length\r\n * @param {string} c - Padding character\r\n * @returns {string} Padded string\r\n */\r\nexport function padL( str, len, c ) {\r\n\tif( typeof c !== \"string\" ) {\r\n\t\tc = \" \";\r\n\t}\r\n\tlet pad = \"\";\r\n\tstr = str + \"\";\r\n\tfor( let i = str.length; i < len; i++ ) {\r\n\t\tpad += c;\r\n\t}\r\n\treturn pad + str;\r\n}\r\n\r\n/**\r\n * Pad string on both sides\r\n * \r\n * @param {string} str - String to pad\r\n * @param {number} len - Target length\r\n * @param {string} c - Padding character\r\n * @returns {string} Padded string\r\n */\r\nexport function pad( str, len, c ) {\r\n\tif( typeof c !== \"string\" || c.length === 0 ) {\r\n\t\tc = \" \";\r\n\t}\r\n\tstr = str + \"\";\r\n\twhile( str.length < len ) {\r\n\t\tstr = c + str + c;\r\n\t}\r\n\tif( str.length > len ) {\r\n\t\tstr = str.substring( 0, len );\r\n\t}\r\n\treturn str;\r\n}\r\n\r\n/**\r\n * Parse integer with default value\r\n * \r\n * @param {*} val - Value to parse\r\n * @param {number} def - Default value if parsing fails\r\n * @returns {number} Parsed integer or default\r\n */\r\nexport function getInt( val, def ) {\r\n\tif( val === null || val === undefined ) {\r\n\t\treturn def;\r\n\t}\r\n\tconst parsed = Number( val );\r\n\tif( !Number.isFinite( parsed ) ) {\r\n\t\treturn def;\r\n\t}\r\n\r\n\treturn Math.round( parsed );\r\n}\r\n\r\n/**\r\n * Parse float with default value\r\n * \r\n * @param {*} val - Value to parse\r\n * @param {number} def - Default value if parsing fails\r\n * @returns {number} Parsed float or default\r\n */\r\nexport function getFloat( val, def ) {\r\n\tif( val === null || val === undefined ) {\r\n\t\treturn def;\r\n\t}\r\n\tconst parsed = Number( val );\r\n\tif( !Number.isFinite( parsed ) ) {\r\n\t\treturn def;\r\n\t}\r\n\r\n\treturn parsed;\r\n}\r\n\r\n// Queue microtask (built-in in modern browsers)\r\n// Wrap to preserve window context\r\nexport const queueMicrotask = ( callback ) => {\r\n\tif( window.queueMicrotask ) {\r\n\t\twindow.queueMicrotask( callback );\r\n\t} else {\r\n\t\tsetTimeout( callback, 0 );\r\n\t}\r\n};\r\n\r\n\r\n/***************************************************************************************************\r\n * Color Utility Functions\r\n **************************************************************************************************/\r\n\r\n\r\nconst COLOR_PROTO = {\r\n\t\"key\": 0,\r\n\t\"r\": 0,\r\n\t\"g\": 0,\r\n\t\"b\": 0,\r\n\t\"a\": 0,\r\n\t\"rgba\": \"\",\r\n\t\"hex\": \"\"\r\n};\r\nconst m_colorCheckerContext = document.createElement( \"canvas\" ).getContext(\r\n\t\"2d\", { \"willReadFrequently\": true }\r\n);\r\n\r\n/**\r\n * Generates a unique 32-bit integer key for an opaque RGB color.\r\n * Each color component (R, G, B) is assumed to be an 8-bit integer (0-255).\r\n * The components are packed in the order: Red | Green | Blue.\r\n *\r\n * @param {number} r - Red component (0-255).\r\n * @param {number} g - Green component (0-255).\r\n * @param {number} b - Blue component (0-255).\r\n * @param {number} a - Alpha component (0-255).\r\n * @returns {number} A 32-bit integer representing the color.\r\n */\r\nexport function generateColorKey( r, g, b, a ) {\r\n\treturn ( r << 24 ) | ( g << 16 ) | ( b << 8 ) | a;\r\n}\r\n\r\n/**\r\n * Convert RGB to color object\r\n * \r\n * @param {number} r - Red component (0-255)\r\n * @param {number} g - Green component (0-255)\r\n * @param {number} b - Blue component (0-255)\r\n * @param {number} a - Alpha component (0-255)\r\n * @returns {Object} Color object\r\n */\r\nexport function rgbToColor( r, g, b, a ) {\r\n\tconst hex = rgbToHex( r, g, b, a );\r\n\treturn createColor( r, g, b, a, hex );\r\n}\r\n\r\n/**\r\n * Convert various color formats to color object\r\n * \r\n * @param {*} color - Color in various formats\r\n * @returns {Object|null} Color object or null if invalid\r\n */\r\nexport function convertToColor( color ) {\r\n\tif( color === undefined || color === null || color === \"\" ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Check if color is already a color prototype object\r\n\tif( Object.getPrototypeOf( color ) === COLOR_PROTO ) {\r\n\t\treturn color;\r\n\t} else if( Array.isArray( color ) ) {\r\n\r\n\t\t// Array format [r, g, b, a]\r\n\t\tif( color.length < 3 ) {\r\n\t\t\treturn null;\r\n\t\t} else if( color.length === 3 ) {\r\n\t\t\tcolor.push( 255 );\r\n\t\t}\r\n\t} else if( color.r !== undefined ) {\r\n\r\n\t\t// Convert from object literal or color object\r\n\t\tcolor = [ color.r, color.g, color.b, color.a ];\r\n\t} else if( typeof color === \"string\" ) {\r\n\r\n\t\t// Check if is hex format\r\n\t\tconst checkHexColor = /(^#[0-9A-F]{8}$)|(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;\r\n\t\tif( checkHexColor.test( color ) ) {\r\n\t\t\treturn hexToColor( color );\r\n\t\t}\r\n\r\n\t\t// RGB/RGBA format\r\n\t\tif( color.indexOf( \"rgb\" ) === 0 ) {\r\n\t\t\tcolor = splitRgb( color );\r\n\t\t\tif( color.length < 3 ) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else if( color.length === 3 ) {\r\n\t\t\t\tcolor.push( 255 );\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\t// Named color or other CSS color\r\n\t\t\treturn colorStringToColor( color );\r\n\t\t}\r\n\t}\r\n\r\n\t// Parse rgb colors\r\n\tfor( let i = 0; i < 3; i += 1 ) {\r\n\t\tcolor[ i ] = getInt( color[ i ], 0 );\r\n\t}\r\n\r\n\t// Parse alpha\r\n\tcolor[ 3 ] = getFloat( color[ 3 ], 0 );\r\n\tif( color[ 3 ] < 1 ) {\r\n\t\tcolor[ 3 ] = Math.round( color[ 3 ] * 255 );\r\n\t} else {\r\n\t\tcolor[ 3 ] = Math.round( color[ 3 ] );\r\n\t}\r\n\t\r\n\treturn rgbToColor( color[ 0 ], color[ 1 ], color[ 2 ], color[ 3 ] );\r\n}\r\n\r\nexport function calcColorDifference( c1, c2, w = [ 0.2, 0.68, 0.07, 0.05 ] ) {\r\n\tconst dr = c1.r - c2.r;\r\n\tconst dg = c1.g - c2.g;\r\n\tconst db = c1.b - c2.b;\r\n\tconst da = c1.a - c2.a;\r\n\r\n\treturn ( dr * dr * w[ 0 ] + dg * dg * w[ 1 ] + db * db * w[ 2 ] + da * da * w[ 3 ] );\r\n}\r\n\r\nfunction createColor( r, g, b, a, hex ) {\r\n\tconst color = Object.create( COLOR_PROTO );\r\n\tcolor.key = generateColorKey( r, g, b, a, hex );\r\n\tcolor.r = r;\r\n\tcolor.g = g;\r\n\tcolor.b = b;\r\n\tcolor.a = a;\r\n\tcolor.rgba = `rgba(${r},${g},${b},${( a / 255 ).toFixed( 3 )})`;\r\n\tcolor.hex = hex;\r\n\treturn color;\r\n}\r\n\r\nexport function setColor( colorSrc, colorDest ) {\r\n\tcolorDest.key = colorSrc.key;\r\n\tcolorDest.r = colorSrc.r;\r\n\tcolorDest.g = colorSrc.g;\r\n\tcolorDest.b = colorSrc.b;\r\n\tcolorDest.a = colorSrc.a;\r\n\tcolorDest.rgba = colorSrc.rgba;\r\n\tcolorDest.hex = colorSrc.hex;\r\n}\r\n\r\n/**\r\n * Convert hex color to color object\r\n * \r\n * @param {string} hex - Hex color string (#RGB, #RRGGBB, or #RRGGBBAA)\r\n * @returns {Object} Color object with r, g, b, a, s, s2 properties\r\n */\r\nfunction hexToColor( hex ) {\r\n\tlet r, g, b, a;\r\n\r\n\tif( hex.length === 4 ) {\r\n\t\tr = parseInt( hex.slice( 1, 2 ), 16 ) * 16 - 1;\r\n\t\tg = parseInt( hex.slice( 2, 3 ), 16 ) * 16 - 1;\r\n\t\tb = parseInt( hex.slice( 3, 4 ), 16 ) * 16 - 1;\r\n\t} else {\r\n\t\tr = parseInt( hex.slice( 1, 3 ), 16 );\r\n\t\tg = parseInt( hex.slice( 3, 5 ), 16 );\r\n\t\tb = parseInt( hex.slice( 5, 7 ), 16 );\r\n\t}\r\n\r\n\tif( hex.length === 9 ) {\r\n\t\ta = parseInt( hex.slice( 7, 9 ), 16 );\r\n\t} else {\r\n\t\ta = 255;\r\n\t}\r\n\r\n\treturn createColor( r, g, b, a, hex );\r\n}\r\n\r\n/**\r\n * Split RGB/RGBA string into components\r\n * \r\n * @param {string} s - RGB or RGBA string\r\n * @returns {Array<number>} Array of color components\r\n */\r\nfunction splitRgb( s ) {\r\n\ts = s.slice( s.indexOf( \"(\" ) + 1, s.indexOf( \")\" ) );\r\n\tconst parts = s.split( \",\" );\r\n\tconst colors = [];\r\n\tfor( let i = 0; i < parts.length; i++ ) {\r\n\t\tlet val;\r\n\t\tif( i === 3 ) {\r\n\t\t\tval = parseFloat( parts[ i ].trim() );\r\n\t\t\tif( val <= 1 ) {\r\n\t\t\t\tval *= 255;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tval = parseInt( parts[ i ].trim() );\r\n\t\t}\r\n\t\tcolors.push( val );\r\n\t}\r\n\treturn colors;\r\n}\r\n\r\n/**\r\n * Convert color component to hex\r\n * \r\n * @param {number} c - Color component (0-255)\r\n * @returns {string} Hex string\r\n */\r\nfunction cToHex( c ) {\r\n\tif( !Number.isInteger( c ) ) {\r\n\t\tc = Math.round( c );\r\n\t}\r\n\tc = clamp( c, 0, 255 );\r\n\tconst hex = Number( c ).toString( 16 );\r\n\treturn hex.length < 2 ? \"0\" + hex : hex.toUpperCase();\r\n}\r\n\r\n/**\r\n * Convert RGB to hex color\r\n * \r\n * @param {number} r - Red component (0-255)\r\n * @param {number} g - Green component (0-255)\r\n * @param {number} b - Blue component (0-255)\r\n * @param {number} a - Alpha component (0-255), defaults to 255\r\n * @returns {string} Hex color string\r\n */\r\nfunction rgbToHex( r, g, b, a ) {\r\n\tif( isNaN( a ) ) {\r\n\t\ta = 255;\r\n\t}\r\n\treturn \"#\" + cToHex( r ) + cToHex( g ) + cToHex( b ) + cToHex( a );\r\n}\r\n\r\n/**\r\n * Convert color string to color object using canvas\r\n * \r\n * @param {string} colorStr - CSS color string\r\n * @returns {Object} Color object\r\n */\r\nfunction colorStringToColor( colorStr ) {\r\n\tm_colorCheckerContext.clearRect( 0, 0, 1, 1 );\r\n\tm_colorCheckerContext.fillStyle = colorStr;\r\n\tm_colorCheckerContext.fillRect( 0, 0, 1, 1 );\r\n\tconst data = m_colorCheckerContext.getImageData( 0, 0, 1, 1 ).data;\r\n\treturn rgbToColor( data[ 0 ], data[ 1 ], data[ 2 ], data[ 3 ] );\r\n}\r\n", "/**\r\n * Pi.js - State/Settings Module - Handles set and ready command\r\n * \r\n * @module core/state-settings\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_utils from \"./utils.js\";\r\nimport * as g_screenManager from \"./screen-manager.js\";\r\n\r\nconst m_settings = {};\r\nlet m_readyCallbacks = [];\r\nlet m_isDocumentReady = false;\r\nlet m_waitCount = 0;\r\nlet m_checkReadyTimeout = null;\r\nlet m_commands = [];\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\nexport function init( api ) {\r\n\r\n\t// Set up document ready detection\r\n\tif( typeof document !== \"undefined\" ) {\r\n\t\tif( document.readyState === \"loading\" ) {\r\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", onDocumentReady );\r\n\t\t} else {\r\n\r\n\t\t\t// Document already ready\r\n\t\t\tm_isDocumentReady = true;\r\n\t\t}\r\n\t} else {\r\n\r\n\t\t// Not in browser environment, mark as ready immediately\r\n\t\tm_isDocumentReady = true;\r\n\t}\r\n\r\n\tregisterCommands( api );\r\n\tg_screenManager.addScreenInitFunction( processScreenCommands );\r\n}\r\n\r\nfunction registerCommands( api ) {\r\n\r\n\t// Register non screen commands\r\n\taddCommand( \"ready\", ready, false, [ \"callback\" ] );\r\n\taddCommand( \"set\", set, true, [ \"options\" ], true );\r\n}\r\n\r\n/**\r\n * Increment wait count - called by modules when starting async operations\r\n */\r\nexport function wait() {\r\n\tm_waitCount++;\r\n}\r\n\r\n/**\r\n * Decrement wait count - called by modules when async operations complete\r\n */\r\nexport function done() {\r\n\tm_waitCount--;\r\n\tif( m_waitCount < 0 ) {\r\n\t\tm_waitCount = 0;\r\n\t}\r\n\r\n\t// Check if ready to trigger callbacks\r\n\tscheduleReadyCheck();\r\n}\r\n\r\nexport function addSetting( name, fn, isScreen ) {\r\n\tm_settings[ name ] = { fn, isScreen };\r\n}\r\n\r\nexport function addCommand( name, fn, isScreen, parameterNames, isScreenOptional ) {\r\n\tm_commands.push( { name, fn, isScreen, parameterNames, isScreenOptional } );\r\n\tif( name.startsWith( \"set\" ) && name !== \"set\" ) {\r\n\t\tconst settingName = name.substring( 3, 4 ).toLowerCase() + name.substring( 4 );\r\n\t\tm_settings[ settingName ] = { fn, isScreen, \"parameterNames\": parameterNames };\r\n\t}\r\n}\r\n\r\nexport function processCommands( api ) {\r\n\tfor( const command of m_commands ) {\r\n\t\tconst { name, fn, isScreen, parameterNames, isScreenOptional } = command;\r\n\t\tif( isScreen ) {\r\n\t\t\tapi[ name ] = ( ...args ) => {\r\n\t\t\t\tconst options = g_utils.parseOptions( args, parameterNames );\r\n\t\t\t\tconst screenData = g_screenManager.getActiveScreen( name, isScreenOptional );\r\n\t\t\t\treturn fn( screenData, options );\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tapi[ name ] = ( ...args ) => {\r\n\t\t\t\tconst options = g_utils.parseOptions( args, parameterNames );\r\n\t\t\t\treturn fn( options );\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction processScreenCommands( screenData ) {\r\n\tfor( const command of m_commands ) {\r\n\t\tconst { name, fn, isScreen, parameterNames } = command;\r\n\t\tif( isScreen ) {\r\n\t\t\tscreenData.api[ name ] = ( ...args ) => {\r\n\t\t\t\tconst options = g_utils.parseOptions( args, parameterNames );\r\n\t\t\t\treturn fn( screenData, options );\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * External API Commands\r\n **************************************************************************************************/\r\n\r\n/**\r\n * ready command - waits for document ready and all pending resources\r\n * \r\n * Supports both callback and promise patterns:\r\n *   - $.ready( callback )        // Callback style\r\n *   - await $.ready()            // Promise style\r\n *   - $.ready().then( ... )      // Promise .then() style\r\n * \r\n * Behavior:\r\n *   - Never executes immediately (always defers to next tick)\r\n *   - Waits for document ready AND all resources with pending wait count\r\n *   - All ready() calls before resources are loaded trigger together\r\n *   - Each callback/promise only triggers once\r\n * \r\n * Example:\r\n *   $.loadImage( \"a.png\", \"a\" );\r\n *   $.loadImage( \"b.png\", \"b\" );\r\n *   $.ready( () => console.log( \"Both loaded\" ) );\r\n *   // Waits for both a and b, triggers once\r\n */\r\nfunction ready( callback ) {\r\n\r\n\t// Validate callback if provided\r\n\tif( callback != null && !g_utils.isFunction( callback ) ) {\r\n\t\tconst error = new TypeError( \"ready: Parameter callback must be a function.\" );\r\n\t\terror.code = \"INVALID_CALLBACK\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Never execute immediately - always defer to next tick\r\n\treturn new Promise( ( resolve ) => {\r\n\t\tm_readyCallbacks.push( {\r\n\t\t\t\"callback\": callback,\r\n\t\t\t\"resolve\": resolve,\r\n\t\t\t\"triggered\": false\r\n\t\t} );\r\n\r\n\t\t// Schedule a check for next tick (allows more resources to be added in same thread)\r\n\t\tscheduleReadyCheck();\r\n\t} );\r\n}\r\n\r\n\r\n// Global settings command\r\n// This can get called from either the global api or directly from a screenData.api.\r\n// screenData can be null if no screen is available\r\nexport function set( screenData, options ) {\r\n\r\n\t// Loop through all the options\r\n\tfor( const optionName in options ) {\r\n\r\n\t\t// Skip blanks\r\n\t\tif( options[ optionName ] === null ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// If the option is a valid setting\r\n\t\tif( m_settings[ optionName ] ) {\r\n\r\n\t\t\t// Get the setting data\r\n\t\t\tconst setting = m_settings[ optionName ];\r\n\t\t\tconst optionValues = options[ optionName ];\r\n\r\n\t\t\t// Parse the options from the setting\r\n\t\t\t// Wrap optionValues in array if not already an array\r\n\t\t\t//const argsArray = Array.isArray( optionValues ) ? optionValues : [ optionValues ];\r\n\t\t\tconst argsArray = [ optionValues ];\r\n\t\t\tconst parsedOptions = g_utils.parseOptions( argsArray, setting.parameterNames );\r\n\r\n\t\t\t// TODO: Need to handle when setting multiple commands that trigger api rebuilds so that\r\n\t\t\t// we can defer the api rebuilds until after settings are done. This will allow the \r\n\t\t\t// user to do things like set both a pen and a blend and the api will only rebuild one\r\n\t\t\t// time. But since the rebuild will have to be completed before any new graphics \r\n\t\t\t// commands get called this will be tricky. It would be nice to implement in the\r\n\t\t\t// build functions themselves but probably best to handle it here.\r\n\r\n\t\t\t// Call the setting function\r\n\t\t\tif( setting.isScreen ) {\r\n\t\t\t\tsetting.fn( screenData, parsedOptions );\r\n\t\t\t} else {\r\n\t\t\t\tsetting.fn( parsedOptions );\r\n\t\t\t}\r\n\r\n\t\t\t// If we just set the screen then refresh the active screen\r\n\t\t\t// This allows for setting of multiple different screens in one call\r\n\t\t\tif( optionName === \"screen\" ) {\r\n\t\t\t\tscreenData = g_screenManager.getActiveScreen();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Internal Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Called when document is ready\r\nfunction onDocumentReady() {\r\n\tm_isDocumentReady = true;\r\n\r\n\t// Check if we can trigger ready callbacks\r\n\tscheduleReadyCheck();\r\n}\r\n\r\n// Schedule a ready check on next tick (allows more load calls in same thread)\r\nfunction scheduleReadyCheck() {\r\n\r\n\t// Clear any existing timeout\r\n\tif( m_checkReadyTimeout !== null ) {\r\n\t\tclearTimeout( m_checkReadyTimeout );\r\n\t}\r\n\r\n\t// Schedule check for next tick\r\n\tm_checkReadyTimeout = setTimeout( checkReady, 0 );\r\n}\r\n\r\n// Check if all conditions are met to trigger ready callbacks\r\nfunction checkReady() {\r\n\tm_checkReadyTimeout = null;\r\n\r\n\t// Don't check if document not ready\r\n\tif( !m_isDocumentReady ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Don't trigger if resources are still loading\r\n\tif( m_waitCount !== 0 ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Trigger all pending ready callbacks together\r\n\t// Note: All ready() calls registered before this point will trigger at once\r\n\t// This allows loads in the same thread to be captured before triggering\r\n\tconst callbacks = m_readyCallbacks.slice();\r\n\tm_readyCallbacks = [];\r\n\r\n\tfor( const item of callbacks ) {\r\n\r\n\t\t// Skip if already triggered (shouldn't happen, but safety check)\r\n\t\tif( item.triggered ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// Mark as triggered (ensures each callback only runs once)\r\n\t\titem.triggered = true;\r\n\r\n\t\t// Execute callback and resolve promise\r\n\t\tif( item.callback ) {\r\n\t\t\titem.callback();\r\n\t\t}\r\n\t\titem.resolve();\r\n\t}\r\n}\r\n", "/**\r\n * Pi.js - Screen Manager Core Module\r\n * \r\n * Screen creation and management for Pi.js.\r\n * Creates canvas elements, manages multiple screens, handles aspect ratios.\r\n * \r\n * @module core/screen-manager\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_utils from \"./utils.js\";\r\nimport * as g_webgl2Renderer from \"../graphics/renderer-webgl2.js\";\r\nimport * as g_canvas2dRenderer from \"../graphics/renderer-canvas2d.js\";\r\nimport * as g_state from \"./state-settings.js\";\r\nimport * as g_pens from \"../graphics/pens.js\";\r\n\r\nconst WEBGL2_RENDER_MODE = \"webgl2\";\r\nconst CANVAS2D_RENDER_MODE = \"canvas2d\";\r\nconst MAX_CANVAS_DIMENSION = 8192;\r\n\r\nconst SCREEN_API_PROTO = { \"screen\": true };\r\nconst m_screens = {};\r\nconst m_screenDataItems = {};\r\nconst m_screenDataItemGetters = [];\r\nconst m_screenDataInitFunctions = [];\r\nconst m_screenDataResizeFunctions = [];\r\nconst m_screenDataCleanupFunctions = [];\r\n\r\n\r\nlet m_nextScreenId = 0;\r\nlet m_activeScreenData = null;\r\nlet m_resizeObserver = null;\r\nconst m_observedContainers = new Set();\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\nexport { m_activeScreenData as activeScreenData };\r\nexport { WEBGL2_RENDER_MODE, CANVAS2D_RENDER_MODE };\r\n\r\n/**\r\n * Get all active screens\r\n * \r\n * @returns {Array<Object>} Array of all screen data objects\r\n */\r\nexport function getAllScreens() {\r\n\tconst screens = [];\r\n\tfor( const id in m_screens ) {\r\n\t\tscreens.push( m_screens[ id ] );\r\n\t}\r\n\treturn screens;\r\n}\r\n\r\nexport function init( api ) {\r\n\r\n\t// TODO: Add matchMedia to watch for DPR changes - if a user moves a browser to a new monitor\r\n\t// it could cause the canvas image to become blury, even if the actual CSS size of the canvas.\r\n\t// doesn't change.\r\n\t// matchMedia( `(resolution: ${dpr}dppx)` ).addEventListener( \"change\", resizeCanvases );\r\n\r\n\t// Create a single ResizeObserver for all screen containers\r\n\tm_resizeObserver = new ResizeObserver( ( entries ) => {\r\n\t\tfor( const entry of entries ) {\r\n\t\t\tconst container = entry.target;\r\n\t\t\t\r\n\t\t\t// Find all canvas elements in this container\r\n\t\t\tconst canvases = container.querySelectorAll( \"canvas[data-screen-id]\" );\r\n\t\t\tif( canvases.length === 0 ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Resize all screens in this container\r\n\t\t\tfor( const canvas of canvases ) {\r\n\t\t\t\tconst screenId = parseInt( canvas.dataset.screenId, 10 );\r\n\t\t\t\tconst screenData = m_screens[ screenId ];\r\n\t\t\t\t\r\n\t\t\t\tif( screenData ) {\r\n\t\t\t\t\tresizeScreen( screenData, false );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n\tregisterCommands();\r\n}\r\n\r\nfunction registerCommands() {\r\n\r\n\t// Global commands\r\n\tg_state.addCommand(\r\n\t\t\"screen\",\r\n\t\tscreen,\r\n\t\tfalse,\r\n\t\t[ \"aspect\", \"container\", \"isOffscreen\", \"isNoStyles\", \"resizeCallback\", \"useCanvas2d\" ]\r\n\t);\r\n\tg_state.addCommand( \"setScreen\", setScreen, false, [ \"screen\" ] );\r\n\tg_state.addCommand( \"getScreen\", getScreen, false, [ \"screenId\" ] );\r\n\tg_state.addCommand( \"removeScreen\", removeScreen, false, [ \"screenId\" ] );\r\n\r\n\t// Screen-scoped info commands\r\n\tg_state.addCommand( \"width\", widthCmd, true, [] );\r\n\tg_state.addCommand( \"height\", heightCmd, true, [] );\r\n\tg_state.addCommand( \"canvas\", canvasCmd, true, [] );\r\n}\r\n\r\nexport function addScreenDataItem( name, val ) {\r\n\tm_screenDataItems[ name ] = val;\r\n}\r\n\r\nexport function addScreenDataItemGetter( name, fn ) {\r\n\tm_screenDataItemGetters.push( { name, fn } );\r\n}\r\n\r\nexport function addScreenInitFunction( fn ) {\r\n\tm_screenDataInitFunctions.push( fn );\r\n}\r\n\r\nexport function addScreenResizeFunction( fn ) {\r\n\tm_screenDataResizeFunctions.push( fn );\r\n}\r\n\r\nexport function addScreenCleanupFunction( fn ) {\r\n\tm_screenDataCleanupFunctions.push( fn );\r\n}\r\n\r\nexport function getActiveScreen( fnName, isScreenOptional ) {\r\n\tif( m_activeScreenData === null && !isScreenOptional ) {\r\n\t\tconst error = new Error(\r\n\t\t\tfnName + \": You are attempting to call a method that requires a screen but there \" +\r\n\t\t\t\"there is currently no active screen. Call $.screen() before calling any graphics \" +\r\n\t\t\t\"commands.\"\r\n\t\t);\r\n\t\terror.code = \"NO_ACTIVE_SCREEN\";\r\n\t\tthrow error;\r\n\t}\r\n\treturn m_activeScreenData;\r\n}\r\n\r\n/***************************************************************************************************\r\n * Screen Command\r\n **************************************************************************************************/\r\n\r\n\r\nfunction screen( options ) {\r\n\r\n\t// Validate resize callback\r\n\tif( options.resizeCallback != null && !g_utils.isFunction( options.resizeCallback ) ) {\r\n\t\tconst error = new TypeError( \"screen: Parameter resizeCallback must be a function.\" );\r\n\t\terror.code = \"INVALID_CALLBACK\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tconst screenData = {\r\n\t\t\"id\": m_nextScreenId,\r\n\t\t\"useCanvas2d\": !!options.useCanvas2d,\r\n\t\t\"isOffscreen\": !!options.isOffscreen,\r\n\t\t\"isNoStyles\": !!options.isNoStyles,\r\n\t\t\"resizeCallback\": options.resizeCallback,\r\n\t\t\"api\":  Object.create( SCREEN_API_PROTO ),\r\n\t\t\"canvas\": null,\r\n\t\t\"width\": null,\r\n\t\t\"height\": null,\r\n\t\t\"container\": null,\r\n\t\t\"aspectData\": null,\r\n\t\t\"clientRect\": null,\r\n\t\t\"previousOffsetSize\": null\r\n\t};\r\n\r\n\t// Force canvas2d use if not webgl2Capable\r\n\tif( !g_webgl2Renderer.isWebgl2Capable ) {\r\n\t\tscreenData.useCanvas2d = true;\r\n\t}\r\n\r\n\t// Append additional items onto the screendata\r\n\tObject.assign( screenData, structuredClone( m_screenDataItems ) );\r\n\r\n\t// Append dynamic screendata items\r\n\tfor( const itemGetter of m_screenDataItemGetters ) {\r\n\t\tscreenData[ itemGetter.name ] = structuredClone( itemGetter.fn() );\r\n\t}\r\n\r\n\t// Increment to the next screen id\r\n\tm_nextScreenId += 1;\r\n\r\n\tif( !options.aspect ) {\r\n\t\tscreenData.aspectData = {\r\n\t\t\t\"width\": null,\r\n\t\t\t\"height\": null,\r\n\t\t\t\"splitter\": \"\",\r\n\t\t\t\"isFixedSize\": false\r\n\t\t};\r\n\t}\r\n\t// Parse aspect ratio\r\n\tif( typeof options.aspect === \"string\" && options.aspect !== \"\" ) {\r\n\t\tscreenData.aspectData = parseAspect( options.aspect.toLowerCase() );\r\n\t\tif( !screenData.aspectData ) {\r\n\t\t\tconst error = new Error( \"screen: Parameter aspect is not valid.\" );\r\n\t\t\terror.code = \"INVALID_ASPECT\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\t// If it's not a ratio validate the dimensions\r\n\t\tif( screenData.aspectData.splitter !== \":\" ) {\r\n\t\t\tvalidateDimensions( screenData.aspectData.width, screenData.aspectData.height );\r\n\t\t}\r\n\t}\r\n\r\n\t// Force canvas2d if not capable of webgl2\r\n\tif( !g_webgl2Renderer.isWebgl2Capable ) {\r\n\t\tscreenData.useCanvas2d = true;\r\n\t}\r\n\r\n\t// Create the canvas\r\n\tscreenData.canvas = document.createElement( \"canvas\" );\r\n\r\n\t// Setup options for offscreen canvas\r\n\tif( screenData.isOffscreen ) {\r\n\t\tif( !screenData.aspectData ) {\r\n\t\t\tconst error = new Error(\r\n\t\t\t\t\"screen: You must supply an aspect ratio with exact dimensions \" +\r\n\t\t\t\t\"for offscreen screens.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"NO_ASPECT_OFFSCREEN\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tif( screenData.aspectData.splitter !== \"x\" ) {\r\n\t\t\tconst error = new Error(\r\n\t\t\t\t\"screen: You must use aspect ratio with e(x)act pixel dimensions for offscreen \" +\r\n\t\t\t\t\"screens. For example: 320x200 for width of 320 and height of 200 pixels.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_OFFSCREEN_ASPECT\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tsetupOffscreenCanvasOptions( screenData );\r\n\t} else {\r\n\r\n\t\t// Setup options for onscreen canvas\r\n\t\tscreenData.canvas.tabIndex = 0;\r\n\r\n\t\t// Get the container element from the dom if it's available\r\n\t\tif( typeof options.container === \"string\" ) {\r\n\t\t\tscreenData.container = document.getElementById( options.container );\r\n\t\t} else if( !options.container ) {\r\n\t\t\tscreenData.container = document.body;\r\n\t\t} else {\r\n\t\t\tscreenData.container = options.container;\r\n\t\t}\r\n\r\n\t\tif( !g_utils.isDomElement( screenData.container ) ) {\r\n\t\t\tconst error = new TypeError(\r\n\t\t\t\t\"screen: Invalid argument container. Container must be a DOM element or a string \" +\r\n\t\t\t\t\"id of a DOM element.\"\r\n\t\t\t);\r\n\t\t\terror.code = \"INVALID_CONTAINER\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\t// Create a no style canvas or default canvas\r\n\t\tif( !screenData.isNoStyles ) {\r\n\t\t\tsetDefaultCanvasOptions( screenData );\r\n\t\t}\r\n\r\n\t\t// Append the canvas to the container\r\n\t\tscreenData.container.appendChild( screenData.canvas );\r\n\r\n\t\t// Add container to the global resize observer (only if not already observed)\r\n\t\tif(\r\n\t\t\tm_resizeObserver && screenData.container &&\r\n\t\t\t!m_observedContainers.has( screenData.container )\r\n\t\t) {\r\n\t\t\tm_resizeObserver.observe( screenData.container );\r\n\t\t\tm_observedContainers.add( screenData.container );\r\n\t\t}\r\n\t}\r\n\t\r\n\tif( !screenData.isOffscreen ) {\r\n\t\tresizeScreen( screenData, true );\r\n\t}\r\n\r\n\t// Assign screen to active screen\r\n\tm_activeScreenData = screenData;\r\n\tm_screens[ screenData.id ] = screenData;\r\n\r\n\tsetupScreenRenderer( screenData );\r\n\r\n\t// Call init functions for all modules that need initialization\r\n\tfor( const fn of m_screenDataInitFunctions ) {\r\n\t\tfn( screenData );\r\n\t}\r\n\r\n\t// Setup the initial font for the screen\r\n\t//screenData.api.setFont( screenData.font.id );\r\n\r\n\t// Now call it to set the default pen\r\n\t// This will also trigger buildPenFn and buildGraphicsApi that are needed when a screen\r\n\t// is created.\r\n\tscreenData.api.setPen( g_pens.PEN_PIXEL );\r\n\r\n\treturn screenData.api;\r\n}\r\n\r\nfunction parseAspect( aspect ) {\r\n\r\n\tconst match = aspect.replaceAll( \" \", \"\" ).match( /^(\\d+(?:\\.\\d+)?)(:|x|e|m)(\\d+(?:\\.\\d+)?)$/ );\r\n\tif( !match ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst width = Number( match[ 1 ] );\r\n\tconst splitter = match[ 2 ];\r\n\tconst height = Number( match[ 3 ] );\r\n\r\n\tif( isNaN( width ) || width === 0 || isNaN( height ) || height === 0 ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn {\r\n\t\t\"width\": width,\r\n\t\t\"height\": height,\r\n\t\t\"splitter\": splitter,\r\n\t\t\"isFixedSize\": splitter === \"m\" || splitter === \"x\"\r\n\t};\r\n}\r\n\r\nfunction setupOffscreenCanvasOptions( screenData ) {\r\n\tscreenData.canvas.width = screenData.aspectData.width;\r\n\tscreenData.canvas.height = screenData.aspectData.height;\r\n\tscreenData.container = null;\r\n\tscreenData.isOffscreen = true;\r\n\tscreenData.isNoStyles = false;\r\n\tscreenData.resizeCallback = null;\r\n\tscreenData.previousOffsetSize = null;\r\n}\r\n\r\nfunction setDefaultCanvasOptions( screenData ) {\r\n\tscreenData.canvas.style.outline = \"none\";\r\n\tscreenData.canvas.style.backgroundColor = \"black\";\r\n\tscreenData.canvas.style.position = \"absolute\";\r\n\r\n\t// Apply image rendering value\r\n\tscreenData.canvas.style.imageRendering = \"pixelated\";\r\n\tconst imageRenderingValues = [ \"pixelated\", \"crisp-edges\", \"-webkit-crisp-edges\" ];\r\n\tfor( let i = 1; i < imageRenderingValues; i += 1 ) {\r\n\t\tif( screenData.canvas.styles.imageRendering === imageRenderingValues[ i - 1 ] ) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tscreenData.canvas.style.imageRendering = imageRenderingValues[ i ];\r\n\t}\r\n\r\n\t// Check if the container is document.body\r\n\tif( screenData.container === document.body ) {\r\n\t\tdocument.documentElement.style.height = \"100%\";\r\n\t\tdocument.documentElement.style.margin = \"0\";\r\n\t\tdocument.body.style.height = \"100%\";\r\n\t\tdocument.body.style.margin = \"0\";\r\n\t\tdocument.body.style.overflow = \"hidden\";\r\n\t\tscreenData.canvas.style.left = \"0\";\r\n\t\tscreenData.canvas.style.top = \"0\";\r\n\t}\r\n}\r\n\r\nfunction setupScreenRenderer( screenData ) {\r\n\r\n\tlet webgl2Status = null;\r\n\tif( !screenData.useCanvas2d ) {\r\n\t\twebgl2Status = g_webgl2Renderer.initWebGL( screenData );\r\n\t\t\r\n\t\t// If webgl2 failed\r\n\t\tif( !webgl2Status ) {\r\n\t\t\tconsole.error( \"Failed to create WebGL 2 canvas, falling back to canvas2d renderer\" );\r\n\t\t\t\r\n\t\t\tscreenData.useCanvas2d = true;\r\n\t\t\t\r\n\t\t\t// Need to resize screen because we webgl2canvas uses different canvas dimensions\r\n\t\t\tif( screenData.aspect !== \":\" ) {\r\n\r\n\t\t\t\t// Set init to true because initialization is not completed\r\n\t\t\t\tresizeScreen( screenData, true );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If webgl2 is not working or disabled then use canvas\r\n\tif( webgl2Status !== null ) {\r\n\t\tscreenData.renderMode = WEBGL2_RENDER_MODE;\r\n\t\tscreenData.renderer = g_webgl2Renderer;\r\n\t} else {\r\n\r\n\t\t// Canvas2D renderer (fallback)\r\n\t\tconst canvas2dStatus = g_canvas2dRenderer.initCanvas2D( screenData );\r\n\t\tif( !canvas2dStatus ) {\r\n\t\t\tconst error = new Error( \"screen: Failed to create rendering context.\" );\r\n\t\t\terror.code = \"NO_RENDERING_CONTEXT\";\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\tscreenData.renderMode = CANVAS2D_RENDER_MODE;\r\n\t\tscreenData.renderer = g_canvas2dRenderer;\r\n\t}\r\n}\r\n\r\nfunction validateDimensions( width, height ) {\r\n\tif( width <= 0 || height <= 0 ) {\r\n\t\tconst error = new Error( \"screen: Canvas dimensions must be positive.\" );\r\n\t\terror.code = \"INVALID_DIMENSIONS\";\r\n\t\tthrow error;\r\n\t}\r\n\tif( width > MAX_CANVAS_DIMENSION || height > MAX_CANVAS_DIMENSION ) {\r\n\t\tconst error = new Error(\r\n\t\t\t`screen: Canvas dimensions exceed maximum of ${MAX_CANVAS_DIMENSION}px.`\r\n\t\t);\r\n\t\terror.code = \"DIMENSION_TOO_LARGE\";\r\n\t\tthrow error;\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Other External API Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Remove the screen from the page and memory -- even though this is a screen command it only needs\r\nfunction removeScreen( options ) {\r\n\r\n\tlet screenId = options.id;\r\n\r\n\t// Fail silently - user may want redundancy without try/catch block\r\n\tif( !m_screens[ screenId ] ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst screenData = m_screens [ screenId ];\r\n\r\n\t// Cancel any inputs\r\n\tscreenData.api.cancelInput();\r\n\r\n\t// Clear all events\r\n\tscreenData.api.clearEvents();\r\n\r\n\t// Cleanup renderer\r\n\tscreenData.renderer.cleanup( screenData );\r\n\r\n\t// Call cleanup functions for all modules that need cleanup\r\n\tfor( const fn of m_screenDataCleanupFunctions ) {\r\n\t\tfn( screenData );\r\n\t}\r\n\r\n\t// Store the screen ID before we start nullifying properties\r\n\tconst createdDeletedMethodErrorFn = ( key, screenId ) => {\r\n\t\tscreenData.api[ key ] = () => {\r\n\t\t\tconst errorMessage = `Cannot call ${key}() on removed screen (id: ${screenId}). ` +\r\n\t\t\t\t`The screen has been removed from the page.`;\r\n\t\t\tconst error = new TypeError( errorMessage );\r\n\t\t\terror.code = \"DELETED_METHOD\";\r\n\t\t\tthrow error;\r\n\t\t};\r\n\t};\r\n\r\n\t// Replace all commands from screen object - prevents outside reference to screen from calling\r\n\t// screen functions on screen that doesn't exist\r\n\tfor( const key in screenData.api ) {\r\n\t\tif( typeof screenData.api[ key ] === \"function\" ) {\r\n\t\t\t\r\n\t\t\t// Set the api method to a method that throws an error\r\n\t\t\tcreatedDeletedMethodErrorFn( key, screenId );\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove the canvas from the page\r\n\tif( screenData.canvas && screenData.canvas.parentElement ) {\r\n\t\tscreenData.canvas.parentElement.removeChild( screenData.canvas );\r\n\t}\r\n\r\n\t// Unobserve the container from the global resize observer if no other screens use it\r\n\tif( screenData.container && m_observedContainers.has( screenData.container ) ) {\r\n\t\t\r\n\t\t// Check if any other screens are using this container\r\n\t\tlet hasOtherScreens = false;\r\n\t\tfor( const id in m_screens ) {\r\n\t\t\tconst otherScreen = m_screens[ id ];\r\n\t\t\tif( otherScreen !== screenData && otherScreen.container === screenData.container ) {\r\n\t\t\t\thasOtherScreens = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Only unobserve if no other screens are using this container\r\n\t\tif( !hasOtherScreens ) {\r\n\t\t\tm_resizeObserver.unobserve( screenData.container );\r\n\t\t\tm_observedContainers.delete( screenData.container );\r\n\t\t}\r\n\t}\r\n\r\n\t// Clean up all references to prevent memory leaks\r\n\tscreenData.canvas = null;\r\n\tscreenData.commands = null;\r\n\tscreenData.resizeCallback = null;\r\n\tscreenData.container = null;\r\n\tscreenData.aspectData = null;\r\n\tscreenData.clientRect = null;\r\n\tscreenData.previousOffsetSize = null;\r\n\r\n\t// Remove additional screenData items\r\n\tfor( const i in m_screenDataItems ) {\r\n\t\tscreenData[ i ] = null;\r\n\t}\r\n\tfor( const getter of m_screenDataItemGetters ) {\r\n\t\tscreenData[ getter.name ] = null;\r\n\t}\r\n\r\n\t// If the current screen is the active screen then we should set the active screen to the next\r\n\t// screen available, or null if no screens remain.\r\n\tif( screenData === m_activeScreenData ) {\r\n\t\tm_activeScreenData = null;\r\n\t\tfor( const i in m_screens ) {\r\n\t\t\tif( m_screens[ i ] !== screenData ) {\r\n\t\t\t\tm_activeScreenData = m_screens[ i ];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Delete the screen from the screens container\r\n\tdelete m_screens[ screenId ];\r\n}\r\n\r\n// Set the active screen on pi\r\nfunction setScreen( options ) {\r\n\tconst screenObj = options.screen;\r\n\tlet screenId;\r\n\r\n\tif( Number.isInteger( screenObj ) ) {\r\n\t\tscreenId = screenObj;\r\n\t} else if( screenObj && Number.isInteger( screenObj.id ) ) {\r\n\t\tscreenId = screenObj.id;\r\n\t}\r\n\tif( ! m_screens[ screenId ] ) {\r\n\t\tconst error = new Error( \"screen: Invalid screen.\" );\r\n\t\terror.code = \"INVALID_SCREEN\";\r\n\t\tthrow error;\r\n\t}\r\n\tm_activeScreenData = m_screens[ screenId ];\r\n}\r\n\r\n// Get screen\r\nfunction getScreen( options ) {\r\n\tconst screenId = g_utils.getInt( options.screenId, null );\r\n\tif( screenId === null || screenId < 0 ) {\r\n\t\tconst error = new Error( \"screen: Invalid screen id.\" );\r\n\t\terror.code = \"INVALID_SCREEN_ID\";\r\n\t\tthrow error;\r\n\t}\r\n\tconst screen = m_screens[ screenId ];\r\n\tif( !screen ) {\r\n\t\tconst error = new Error( `screen: Screen \"${screenId}\" not found.` );\r\n\t\terror.code = \"SCREEN_NOT_FOUND\";\r\n\t\tthrow error;\r\n\t}\r\n\treturn screen.api;\r\n}\r\n\r\nfunction widthCmd( screenData ) {\r\n\treturn screenData.width;\r\n}\r\n\r\nfunction heightCmd( screenData ) {\r\n\treturn screenData.height;\r\n}\r\n\r\nfunction canvasCmd( screenData ) {\r\n\treturn screenData.canvas;\r\n}\r\n\r\n/***************************************************************************************************\r\n * Resize Screen\r\n **************************************************************************************************/\r\n\r\n\r\nfunction resizeScreen( screenData, isInit ) {\r\n\r\n\t// Skip if screen is not visible or should not be resized\r\n\tif(\r\n\t\tscreenData.isOffscreen ||\r\n\t\tscreenData.isNoStyles ||\r\n\t\tscreenData.canvas.offsetParent === null\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Get the previous size (if stored from last time)\r\n\tlet fromSize = screenData.previousOffsetSize\r\n\r\n\t// Let the renderer adjust to the new size\r\n\tif( !isInit && screenData.renderMode === CANVAS2D_RENDER_MODE ) {\r\n\t\tg_canvas2dRenderer.beforeResize( screenData, fromSize );\r\n\t}\r\n\r\n\t// If Not 100% canvas size mode\r\n\tif( screenData.aspectData.splitter !== \"\" ) {\r\n\r\n\t\t// Update the canvas to the new size\r\n\t\tconst size = getSize( screenData.container );\r\n\t\tsetCanvasSize( screenData, size.width, size.height );\r\n\r\n\t} else {\r\n\r\n\t\tif( screenData.container === document.body ) {\r\n\t\t\tscreenData.canvas.style.position = \"static\";\r\n\t\t}\r\n\r\n\t\t// Update canvas to fullscreen absolute pixels\r\n\t\tscreenData.canvas.style.width = \"100%\";\r\n\t\tscreenData.canvas.style.height = \"100%\";\r\n\t\tconst size = getSize( screenData.canvas );\r\n\t\tscreenData.canvas.width = Math.min( size.width, MAX_CANVAS_DIMENSION );\r\n\t\tscreenData.canvas.height = Math.min( size.height, MAX_CANVAS_DIMENSION );\r\n\t}\r\n\r\n\t// Resize the client rectangle\r\n\tscreenData.clientRect = screenData.canvas.getBoundingClientRect();\r\n\r\n\t// Set the new screen data size\r\n\tif( screenData.aspectData.isFixedSize ) {\r\n\t\tscreenData.width = screenData.aspectData.width;\r\n\t\tscreenData.height = screenData.aspectData.height;\r\n\t} else {\r\n\r\n\t\t// If using ratios or full 100% size then set screenData to css size\r\n\t\tif( screenData.splitter === \"\" || screenData.splitter === \":\" ) {\r\n\t\t\tscreenData.width = newCssWidth;\r\n\t\t\tscreenData.height = newCssHeight;\r\n\t\t} else {\r\n\r\n\t\t\t// Extend mode -- only mode left\r\n\t\t\t// TODO: Figure out what to put here if anything\r\n\t\t}\r\n\t}\r\n\r\n\t// Get the new size after resize\r\n\tconst toSize = {\r\n\t\t\"width\": screenData.canvas.offsetWidth,\r\n\t\t\"height\": screenData.canvas.offsetHeight\r\n\t};\r\n\r\n\tif( !isInit ) {\r\n\r\n\t\t// Let the renderer adjust to the new size\r\n\t\tif( screenData.renderMode === CANVAS2D_RENDER_MODE ) {\r\n\t\t\tg_canvas2dRenderer.afterResize( screenData, fromSize, toSize );\r\n\t\t}\r\n\r\n\t\t// Call resize functions for all modules that need special handling on resize\r\n\t\tfor( const fn of m_screenDataResizeFunctions ) {\r\n\t\t\tfn( screenData );\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Send the resize data to the client\r\n\tif( screenData.resizeCallback ) {\r\n\t\tif(\r\n\t\t\tfromSize !== null &&\r\n\t\t\t( fromSize.width !== toSize.width || fromSize.height !== toSize.height )\r\n\t\t) {\r\n\t\t\tscreenData.resizeCallback( screenData.api, fromSize, toSize );\r\n\t\t}\r\n\t}\r\n\r\n\t// Store the new size for next time\r\n\tscreenData.previousOffsetSize = toSize;\r\n}\r\n\r\n// Set canvas size based on aspect ratio\r\nfunction setCanvasSize( screenData, maxWidth, maxHeight ) {\r\n\r\n\tconst aspectData = screenData.aspectData;\r\n\tconst canvas = screenData.canvas;\r\n\tlet width = aspectData.width;\r\n\tlet height = aspectData.height;\r\n\tconst splitter = aspectData.splitter;\r\n\tlet newCssWidth, newCssHeight;\r\n\r\n\t// If set size to multiple or extend\r\n\tif( splitter === \"m\" || splitter === \"e\" ) {\r\n\t\tconst factorX = Math.floor( maxWidth / width );\r\n\t\tconst factorY = Math.floor( maxHeight / height );\r\n\t\tlet factor = factorX > factorY ? factorY : factorX;\r\n\t\tif( factor < 1 ) {\r\n\t\t\tfactor = 1;\r\n\t\t}\r\n\t\tnewCssWidth = width * factor;\r\n\t\tnewCssHeight = height * factor;\r\n\r\n\t\t// Extending the canvas to match container size\r\n\t\tif( splitter === \"e\" ) {\r\n\t\t\twidth = Math.floor( maxWidth / factor );\r\n\t\t\theight = Math.floor( maxHeight / factor );\r\n\t\t\tnewCssWidth = width * factor;\r\n\t\t\tnewCssHeight = height * factor;\r\n\r\n\t\t\t// Set screen data width/height here\r\n\t\t\tscreenData.width = width;\r\n\t\t\tscreenData.height = height;\r\n\t\t}\r\n\t} else {\r\n\r\n\t\t// Calculate the screen ratios\r\n\t\tconst ratio1 = height / width;\r\n\t\tconst ratio2 = width / height;\r\n\t\tnewCssWidth = maxHeight * ratio2;\r\n\t\tnewCssHeight = maxWidth * ratio1;\r\n\r\n\t\t// Calculate the best fit\r\n\t\tif( newCssWidth > maxWidth ) {\r\n\t\t\tnewCssWidth = maxWidth;\r\n\t\t\tnewCssHeight = newCssWidth * ratio1;\r\n\t\t} else {\r\n\t\t\tnewCssHeight = maxHeight;\r\n\t\t}\r\n\t}\r\n\r\n\t// Set the size\r\n\tcanvas.style.width = Math.floor( newCssWidth ) + \"px\";\r\n\tcanvas.style.height = Math.floor( newCssHeight ) + \"px\";\r\n\r\n\t// Set the margins\r\n\tcanvas.style.marginLeft = Math.floor( ( maxWidth - newCssWidth ) / 2 ) + \"px\";\r\n\tcanvas.style.marginTop = Math.floor( ( maxHeight - newCssHeight ) / 2 ) + \"px\";\r\n\r\n\t// Set the actual canvas pixel dimensions\r\n\t// Note: If using webgl2 and desynchronized is set then only apply native size for canvas2d as\r\n\t// it will produce blurry results. Currently I'm setting desynchronized to false so we can\r\n\t// use the native resolution on the canvas for both canvas2d and webgl2. This means when we \r\n\t// copy the image from the browser right click menu, it will produce the actual size image and\r\n\t// not the upscaled one.\r\n\t//if( screenData.useCanvas2d && splitter !== \":\" ) {\r\n\tif( splitter !== \":\" ) {\r\n\t\tcanvas.width = Math.min( width, MAX_CANVAS_DIMENSION );\r\n\t\tcanvas.height = Math.min( height, MAX_CANVAS_DIMENSION );\r\n\t} else {\r\n\r\n\t\t// For ratio mode, set to CSS size\r\n\t\tcanvas.width = Math.min( Math.floor( newCssWidth ), MAX_CANVAS_DIMENSION );\r\n\t\tcanvas.height = Math.min( Math.floor( newCssHeight ), MAX_CANVAS_DIMENSION );\r\n\t}\r\n}\r\n\r\n// Get size of container\r\nfunction getSize( element ) {\r\n\treturn {\r\n\t\t\"width\": element.offsetWidth || element.clientWidth || element.width,\r\n\t\t\"height\": element.offsetHeight || element.clientHeight || element.height\r\n\t};\r\n}\r\n", "/**\r\n * Pi.js - WebGL2 Renderer Core Module\r\n * \r\n * WebGL2 rendering with Framebuffer Object (FBO) for offscreen rendering\r\n * and automatic batch rendering system.\r\n * \r\n * @module graphics/renderer-webgl2\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_pens from \"./pens.js\";\r\nimport * as g_screenManager from \"../core/screen-manager.js\";\r\nimport * as g_utils from \"../core/utils.js\";\r\n\r\n// Shaders are imported from external files via esbuild text loader\r\nimport m_pointVertSrc from \"./shaders/point.vert\";\r\nimport m_pointFragSrc from \"./shaders/point.frag\";\r\nimport m_imageVertSrc from \"./shaders/image.vert\";\r\nimport m_imageFragSrc from \"./shaders/image.frag\";\r\nimport m_displayVertSrc from \"./shaders/display.vert\";\r\nimport m_displayFragSrc from \"./shaders/display.frag\";\r\n\r\nconst MAX_POINT_BATCH_SIZE = 1_000_000;\r\nconst DEFAULT_POINT_BATCH_SIZE = 5000;\r\nconst MAX_IMAGE_BATCH_SIZE = 10_000;\r\nconst DEFAULT_IMAGE_BATCH_SIZE = 50;\r\nconst BATCH_CAPACITY_SHRINK_INTERVAL = 5000;\r\n\r\n// TODO: Need to keep an eye on memory usage and memory caps. Maybe make max_batch_size a variable\r\n// maybe let user update max batch sizes.  Need to handle out of memory issues or prevent them\r\n// from happening.  Needs research.\r\n\r\n// Nested Map for WebGL2 texture storage\r\n// Outer Map: Image element -> Inner Map: GL context -> WebGL texture\r\n// This allows efficient lookup by image and cleanup when image is removed\r\nconst m_webgl2Textures = new Map();\r\n\r\n// Batch systems\r\nexport const POINTS_BATCH = 0;\r\nexport const IMAGE_BATCH = 1;\r\n\r\n// String constants to identify batch system names\r\nconst BATCH_TYPES = [ \"POINTS\", \"IMAGE\" ];\r\n\r\nconst m_batchProto = {\r\n\t\r\n\t// Type of batch POINTS_BATCH, IMAGE_BATCH, etc...\r\n\t\"type\": null,\r\n\r\n\t\"program\": null,\r\n\t\"vertices\": null,\r\n\t\"colors\": null,\r\n\t\"count\": 0,\r\n\r\n\t// Capacity\r\n\t\"minCapacity\": 0,\r\n\t\"capacity\": 0,\r\n\t\"capacityChanged\": true,\r\n\t\"capacityLocalMax\": 0,\r\n\t\"capacityShrinkCheckTime\": 0,\r\n\r\n\t// Components\r\n\t\"vertexComps\": 2,\r\n\t\"colorComps\": 4,\r\n\t\"texCoordComps\": 2,\r\n\r\n\t// WebGL resources\r\n\t\"vertexVBO\": null,\r\n\t\"colorVBO\": null,\r\n\t\"texCoordVBO\": null,\r\n\t\"vao\": null,\r\n\r\n\t// Image Specific items\r\n\t\"texture\": null,\r\n\t\"image\": null,\r\n\r\n\t// Drawing mode, e.g., gl.POINTS or gl.TRIANGLES\r\n\t\"mode\": null,\r\n\r\n\t// Cached shader locations\r\n\t\"locations\": null\r\n};\r\n\r\nlet m_isWebgl2Capable = false;\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\nexport { m_isWebgl2Capable as isWebgl2Capable };\r\n\r\nexport function init() {\r\n\tg_screenManager.addScreenCleanupFunction( cleanup );\r\n\tm_isWebgl2Capable = testWebGL2Capability();\r\n}\r\n\r\nexport function cleanup( screenData ) {\r\n\r\n\tif( screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst gl = screenData.gl;\r\n\r\n\t// Cleanup batches\r\n\tfor( const batchType in screenData.batches ) {\r\n\r\n\t\t// Get the batch\r\n\t\tconst batch = screenData.batches[ batchType ];\r\n\r\n\t\t// Delete texCoord items\r\n\t\tif( batch.texCoordVBO ) {\r\n\t\t\tgl.deleteBuffer( batch.texCoordVBO );\r\n\t\t}\r\n\r\n\t\tgl.deleteBuffer( batch.vertexVBO );\r\n\t\tgl.deleteBuffer( batch.colorVBO );\r\n\t\tgl.deleteVertexArray( batch.vao );\r\n\t\tgl.deleteProgram( batch.program );\r\n\r\n\t\tif( batch.texture ) {\r\n\t\t\tgl.deleteTexture( batch.texture );\r\n\t\t}\r\n\t}\r\n\r\n\t// Clear batches array\r\n\tscreenData.batches = {};\r\n\tscreenData.batchInfo = {};\r\n\t\r\n\t// Cleanup display shader\r\n\tif( screenData.displayProgram ) {\r\n\t\tgl.deleteProgram( screenData.displayProgram );\r\n\t\tgl.deleteBuffer( screenData.displayPositionBuffer );\r\n\t}\r\n\t\r\n\t// Cleanup shaders and FBO\r\n\tif( screenData.FBO ) {\r\n\t\tgl.deleteFramebuffer( screenData.FBO );\r\n\t\tgl.deleteTexture( screenData.texture );\r\n\t}\r\n\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * WebGL Initialization\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Test if WebGL2 is available and working properly\r\n * \r\n * @returns {boolean} True if WebGL2 is available and functional\r\n */\r\nfunction testWebGL2Capability() {\r\n\t\r\n\t// Create a temporary offscreen canvas for testing\r\n\tconst testCanvas = document.createElement( \"canvas\" );\r\n\ttestCanvas.width = 1;\r\n\ttestCanvas.height = 1;\r\n\t\r\n\t// Create a minimal screen data object for testing\r\n\tconst testScreenData = {\r\n\t\t\"canvas\": testCanvas,\r\n\t\t\"width\": 1,\r\n\t\t\"height\": 1\r\n\t};\r\n\t\r\n\t// Use the existing initWebGL function to test capability\r\n\tconst result = initWebGL( testScreenData );\r\n\t\r\n\t// Cleanup test resources if WebGL2 was initialized\r\n\tif( result && testScreenData.gl ) {\r\n\t\tcleanup( testScreenData );\r\n\t}\r\n\t\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Initialize WebGL2 context for a canvas\r\n * \r\n * @param {Object} screenData - Screen Data Object\r\n * @returns {boolean} if successfull\r\n */\r\nexport function initWebGL( screenData ) {\r\n\r\n\t// Setup initial screen data items\r\n\tscreenData.contextLost = false;\r\n\tscreenData.isRenderScheduled = false;\r\n\tscreenData.isFirstRender = true;\r\n\tscreenData.batches = {};\r\n\tscreenData.batchInfo = {\r\n\t\t\"currentBatch\": null,\r\n\t\t\"drawOrder\": []\r\n\t};\r\n\r\n\tconst canvas = screenData.canvas;\r\n\tconst width = screenData.width;\r\n\tconst height = screenData.height;\r\n\t\r\n\t// Try WebGL2 first\r\n\tscreenData.gl = canvas.getContext( \"webgl2\", { \r\n\t\t\"alpha\": true, \r\n\t\t\"premultipliedAlpha\": false,\r\n\t\t\"antialias\": false,\r\n\t\t\"preserveDrawingBuffer\": true,\r\n\t\t\"desynchronized\": false,\r\n\t\t\"colorType\": \"unorm8\"\r\n\t} );\r\n\t\r\n\tif( !screenData.gl ) {\r\n\r\n\t\t// WebGL2 not available\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Setup viewport\r\n\tscreenData.gl.viewport( 0, 0, width, height );\r\n\t\r\n\t// Create texture and FBO\r\n\tif( !createTextureAndFBO( screenData ) ) {\r\n\t\tscreenData.gl = null;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// Create the point batch\r\n\tscreenData.batches[ POINTS_BATCH ] = createBatchSystem( \r\n\t\tscreenData, m_pointVertSrc, m_pointFragSrc, POINTS_BATCH \r\n\t);\r\n\r\n\t// Create the images batch\r\n\tscreenData.batches[ IMAGE_BATCH ] = createBatchSystem( \r\n\t\tscreenData, m_imageVertSrc, m_imageFragSrc, IMAGE_BATCH \r\n\t);\r\n\t\r\n\t// Setup display shader\r\n\tsetupDisplayShader( screenData );\r\n\r\n\t// Enable WebGL debugging extensions\r\n\tif( typeof window !== \"undefined\" && window.location.search.includes( \"webgl-debug\" ) ) {\r\n\t\tconst debugExt = screenData.gl.getExtension( \"WEBGL_debug_renderer_info\" );\r\n\t\tif( debugExt ) {\r\n\t\t\tconsole.log( \"GPU:\", screenData.gl.getParameter( debugExt.UNMASKED_RENDERER_WEBGL ) );\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Track if webglcontext gets lost\r\n\tscreenData.canvas.addEventListener( \"webglcontextlost\", ( e ) => {\r\n\t\te.preventDefault();\r\n\t\tconsole.warn( \"WebGL context lost\" );\r\n\t\tscreenData.contextLost = true;\r\n\t} );\r\n\t\r\n\t// Reinit canvas when webglcontext gets restored\r\n\tscreenData.canvas.addEventListener( \"webglcontextrestored\", () => {\r\n\t\tconsole.log( \"WebGL context restored\" );\r\n\r\n\t\t// TODO: Screen gets lost but maybe we can restore it from the FBO?\r\n\r\n\t\t// Reinitialize WebGL resources\r\n\t\tinitWebGL( screenData );\r\n\t\tscreenData.contextLost = false;\r\n\r\n\t\t// Reset blend mode\r\n\t\tblendModeChanged( screenData );\r\n\t} );\r\n\r\n\t// Return successful\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Create Framebuffer Object for offscreen rendering\r\n * \r\n * @param {Object} screenData - Global screen data object container\r\n */\r\nfunction createTextureAndFBO( screenData ) {\r\n\r\n\tconst gl = screenData.gl;\r\n\tconst width = screenData.width;\r\n\tconst height = screenData.height;\r\n\t\r\n\t// Create texture\r\n\tscreenData.texture = gl.createTexture();\r\n\tif( !screenData.texture ) {\r\n\t\tconsole.error( \"Failed to create WebGL2 texture.\" );\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgl.bindTexture( gl.TEXTURE_2D, screenData.texture );\r\n\tgl.texImage2D( \r\n\t\tgl.TEXTURE_2D, 0, gl.RGBA8, \r\n\t\twidth, height, 0, \r\n\t\tgl.RGBA, gl.UNSIGNED_BYTE, null \r\n\t);\r\n\t\r\n\t// Set texture parameters for pixel-perfect rendering\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\r\n\t// Create FBO\r\n\tscreenData.FBO = gl.createFramebuffer();\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, screenData.FBO );\r\n\t\r\n\t// Attach texture to FBO\r\n\tgl.framebufferTexture2D(\r\n\t\tgl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, \r\n\t\tgl.TEXTURE_2D, screenData.texture, 0 \r\n\t);\r\n\t\r\n\t// Make sure that framebuffer is complete\r\n\tconst status = gl.checkFramebufferStatus( gl.FRAMEBUFFER );\r\n\tif( status !== gl.FRAMEBUFFER_COMPLETE ) {\r\n\t\tconsole.error( \"WebGL2 Framebuffer incomplete:\", status );\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Unbind\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\tgl.bindTexture( gl.TEXTURE_2D, null );\r\n\r\n\treturn true;\r\n}\r\n\r\n\r\n/**\r\n * Create a shader program from vertex and fragment sources\r\n * \r\n * @param {string} vertexSource - Vertex shader source\r\n * @param {string} fragmentSource - Fragment shader source\r\n * @returns {WebGLProgram|null} Shader program or null on error\r\n */\r\nfunction createShaderProgram( screenData, vertexSource, fragmentSource ) {\r\n\tconst gl = screenData.gl;\r\n\r\n\tconst vertexShader = compileShader( screenData, gl.VERTEX_SHADER, vertexSource );\r\n\tconst fragmentShader = compileShader( screenData, gl.FRAGMENT_SHADER, fragmentSource );\r\n\t\r\n\tif( !vertexShader || !fragmentShader ) {\r\n\t\tconst error = new Error( \"screen: Unable to compile shaders.\" );\r\n\t\terror.code = \"INVALID_SHADERS\";\r\n\t\tthrow error;\r\n\t}\r\n\t\r\n\tconst program = gl.createProgram();\r\n\tgl.attachShader( program, vertexShader );\r\n\tgl.attachShader( program, fragmentShader );\r\n\tgl.linkProgram( program );\r\n\r\n\t// Cleanup shader programs\r\n\tgl.deleteShader( vertexShader );\r\n\tgl.deleteShader( fragmentShader );\r\n\t\r\n\tif( !gl.getProgramParameter( program, gl.LINK_STATUS ) ) {\r\n\t\tconst errLog =  gl.getProgramInfoLog( program );\r\n\t\tgl.deleteProgram( program );\r\n\t\tconst error = new Error( `screen: Shader program error:, ${errLog}.` );\r\n\t\terror.code = \"SHADER_PROGRAM_ERROR\";\r\n\t\tthrow error;\r\n\t}\r\n\t\r\n\treturn program;\r\n}\r\n\r\n/**\r\n * Compile a single shader\r\n * \r\n * @param {number} type - Shader type (VERTEX_SHADER or FRAGMENT_SHADER)\r\n * @param {string} source - Shader source code\r\n * @returns {WebGLShader|null} Compiled shader or null on error\r\n */\r\nfunction compileShader( screenData, type, source ) {\r\n\r\n\tconst gl = screenData.gl;\r\n\r\n\tconst shader = gl.createShader( type );\r\n\tgl.shaderSource( shader, source );\r\n\tgl.compileShader( shader );\r\n\t\r\n\tif( !gl.getShaderParameter( shader, gl.COMPILE_STATUS ) ) {\r\n\t\tconsole.error( \"Shader compile error:\", gl.getShaderInfoLog( shader ) );\r\n\t\tgl.deleteShader( shader );\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\treturn shader;\r\n}\r\n\r\n/**\r\n * Setup display shader for rendering FBO to screen\r\n * \r\n * @param {Object} screenData - Screen data object\r\n */\r\nfunction setupDisplayShader( screenData ) {\r\n\t\r\n\tconst gl = screenData.gl;\r\n\t\r\n\t// Create shader program\r\n\tconst program = createShaderProgram( screenData, m_displayVertSrc, m_displayFragSrc );\r\n\t\r\n\t// Create fullscreen quad vertices (NDC: -1 to 1)\r\n\tconst positions = new Float32Array( [\r\n\t\t-1, -1, // Bottom left\r\n\t\t 1, -1, // Bottom right\r\n\t\t-1,  1, // Top left\r\n\t\t-1,  1, // Top left\r\n\t\t 1, -1, // Bottom right\r\n\t\t 1,  1  // Top right\r\n\t] );\r\n\t\r\n\t// Create vertex buffer\r\n\tconst positionBuffer = gl.createBuffer();\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, positionBuffer );\r\n\tgl.bufferData( gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW );\r\n\t\r\n\t// Get attribute/uniform locations\r\n\tconst positionLoc = gl.getAttribLocation( program, \"a_position\" );\r\n\tconst textureLoc = gl.getUniformLocation( program, \"u_texture\" );\r\n\t\r\n\t// Store in screen data\r\n\tscreenData.displayProgram = program;\r\n\tscreenData.displayPositionBuffer = positionBuffer;\r\n\tscreenData.displayLocations = {\r\n\t\t\"position\": positionLoc,\r\n\t\t\"texture\": textureLoc\r\n\t};\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Render Management\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Sets the image dirty / Queue automatic render\r\n * @param {Object} screenData - Global screen data object container\r\n */\r\nexport function setImageDirty( screenData ) {\r\n\tif( !screenData.isRenderScheduled ) {\r\n\t\tscreenData.isRenderScheduled = true;\r\n\t\tg_utils.queueMicrotask( () => {\r\n\t\t\tflushBatches( screenData );\r\n\t\t\tdisplayToCanvas( screenData );\r\n\t\t\tscreenData.isRenderScheduled = false;\r\n\t\t} );\r\n\t}\r\n}\r\n\r\nexport function cls( screenData, x, y, width, height ) {\r\n\t\r\n\t// TODO: Implement clear screen command\r\n\t// How to implement this?\r\n\t// For a full screen clear need to clear the screen and clear out all the batches too.\r\n\t// No need to render anything that happens before this because the user would never see it.\r\n\t// But if it's a partial screen clear then maybe just draw a transparent rectangle over the\r\n\t// clear area.\r\n}\r\n\r\nexport function blendModeChanged( screenData, previousBlend ) {\r\n\r\n\t// Flush existing batch with old blend mode\r\n\tflushBatches( screenData, previousBlend );\r\n\tdisplayToCanvas( screenData );\r\n\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Batch Operations\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Create batch shader program and buffers\r\n * \r\n * @param {Object} screenData - Global screen data object container\r\n * @param {string} vertSrc - Vertex shader program source code\r\n * @param {string} fragSrc - Fragment shader program source code\r\n * @param {number} type - Index number indicating type IE POINTS_BATCH, IMAGE_BATCH, etc.\r\n * \r\n * @returns {Object} The batch system object\r\n */\r\nfunction createBatchSystem( screenData, vertSrc, fragSrc, type ) {\r\n\tconst gl = screenData.gl;\r\n\tconst batch = Object.create( m_batchProto );\r\n\r\n\t// Create the batch shader program\r\n\tbatch.program = createShaderProgram( screenData, vertSrc, fragSrc );\r\n\r\n\t// Cache shader locations for efficiency\r\n\tbatch.locations = {\r\n\t\t\"position\": gl.getAttribLocation( batch.program, \"a_position\" ),\r\n\t\t\"color\": gl.getAttribLocation( batch.program, \"a_color\" ),\r\n\t\t\"resolution\": gl.getUniformLocation( batch.program, \"u_resolution\" )\r\n\t};\r\n\r\n\t// Setup batch type and capacity\r\n\tbatch.type = type;\r\n\tif( batch.type === POINTS_BATCH ) {\r\n\t\tbatch.capacity = DEFAULT_POINT_BATCH_SIZE;\r\n\t\tbatch.minCapacity = DEFAULT_POINT_BATCH_SIZE;\r\n\t\tbatch.maxCapacity = MAX_POINT_BATCH_SIZE;\r\n\t\tbatch.mode = gl.POINTS;\r\n\t} else if( batch.type === IMAGE_BATCH ) {\r\n\t\tbatch.capacity = DEFAULT_IMAGE_BATCH_SIZE;\r\n\t\tbatch.minCapacity = DEFAULT_IMAGE_BATCH_SIZE;\r\n\t\tbatch.maxCapacity = MAX_IMAGE_BATCH_SIZE;\r\n\t\tbatch.mode = gl.TRIANGLES;\r\n\r\n\t\t// Image-specific shader locations\r\n\t\tbatch.locations.texCoord = gl.getAttribLocation( batch.program, \"a_texCoord\" );\r\n\t\tbatch.locations.texture = gl.getUniformLocation( batch.program, \"u_texture\" );\r\n\r\n\t\t// Image-specific data array\r\n\t\tbatch.texCoords = new Float32Array( batch.capacity * batch.texCoordComps );\r\n\r\n\t\t// Image-specific VBO\r\n\t\tbatch.texCoordVBO = gl.createBuffer();\r\n\r\n\t\t// Setup texCoord attribute\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.texCoordVBO );\r\n\t\tgl.enableVertexAttribArray( batch.locations.texCoord );\r\n\t\tgl.vertexAttribPointer(\r\n\t\t\tbatch.locations.texCoord, batch.texCoordComps, gl.FLOAT, false, 0, 0\r\n\t\t);\r\n\t} else {\r\n\t\tthrow new Error( \"Invalid batch type.\" );\r\n\t}\r\n\r\n\t// These are created for all batches\r\n\tbatch.vertices = new Float32Array( batch.capacity * batch.vertexComps );\r\n\tbatch.colors = new Uint8Array( batch.capacity * batch.colorComps );\r\n\tbatch.vertexVBO = gl.createBuffer();\r\n\tbatch.colorVBO = gl.createBuffer();\r\n\r\n\t// Create VAO (WebGL2 only)\r\n\tbatch.vao = gl.createVertexArray();\r\n\tgl.bindVertexArray( batch.vao );\r\n\r\n\t// Setup position attibute\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.vertexVBO );\r\n\tgl.enableVertexAttribArray( batch.locations.position );\r\n\tgl.vertexAttribPointer(\r\n\t\tbatch.locations.position, batch.vertexComps, gl.FLOAT, false, 0, 0\r\n\t);\r\n\r\n\t// Setup color attribute\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.colorVBO );\r\n\tgl.enableVertexAttribArray( batch.locations.color );\r\n\tgl.vertexAttribPointer(\r\n\t\tbatch.locations.color, batch.colorComps, gl.UNSIGNED_BYTE, true, 0, 0\r\n\t);\r\n\t\r\n\tgl.bindVertexArray( null );\r\n\r\n\t// Set the next shrink check time\r\n\tbatch.capacityShrinkCheckTime = Date.now() + BATCH_CAPACITY_SHRINK_INTERVAL;\r\n\r\n\treturn batch;\r\n}\r\n\r\n/**\r\n * Prepare batch and make sure has enough capacity\r\n * \r\n * @param {number} batchType - Batch batch type identifier\r\n * @param {string} newItemCount - Number of new items that will be added\r\n */\r\nexport function prepareBatch( screenData, batchType, newItemCount ) {\r\n\r\n\t// Get the batch\r\n\tconst batch = screenData.batches[ batchType ];\r\n\r\n\t// Track if the batch type is changing\r\n\tconst batchInfo = screenData.batchInfo;\r\n\tif( batchInfo.currentBatch !== batch ) {\r\n\t\t\r\n\t\t// Set the end index for the last drawOrderItem to it's current count\r\n\t\tif( batchInfo.drawOrder.length > 0 ) {\r\n\t\t\tconst lastDrawOrderItem = batchInfo.drawOrder[ batchInfo.drawOrder.length - 1 ];\r\n\t\t\tlastDrawOrderItem.endIndex = lastDrawOrderItem.batch.count;\r\n\t\t}\r\n\r\n\t\t// Add the new batch to the drawOrder array\r\n\t\t// For IMAGE_BATCH, track the current image/texture for this segment\r\n\t\tconst drawOrderItem = { batch, \"startIndex\": batch.count, \"endIndex\": null };\r\n\t\tif( batch.type === IMAGE_BATCH ) {\r\n\t\t\tdrawOrderItem.image = batch.image;\r\n\t\t\tdrawOrderItem.texture = batch.texture;\r\n\t\t}\r\n\t\tbatchInfo.drawOrder.push( drawOrderItem );\r\n\t\tbatchInfo.currentBatch = batch;\r\n\t}\r\n\r\n\t// Check if need to increase\r\n\tconst requiredCount = batch.count + newItemCount;\r\n\tif( requiredCount >= batch.capacity ) {\r\n\r\n\t\t// Make sure we don't exceed max batch size\r\n\t\tif( requiredCount > batch.maxCapacity ) {\r\n\t\t\tflushBatches( screenData );\r\n\t\t\treturn prepareBatch( screenData, batchType, newItemCount );\r\n\t\t}\r\n\r\n\t\t// Resize to new capacity by doubling current capacity\r\n\t\tconst newCapacity = Math.max( requiredCount, batch.capacity * 2 );\r\n\t\tresizeBatch( batch, newCapacity );\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nfunction resizeBatch( batch, newCapacity ) {\r\n\r\n\t// Resize arrays\r\n\tconst newVertices = new Float32Array( newCapacity * batch.vertexComps );\r\n\tconst newColors = new Uint8Array( newCapacity * batch.colorComps );\r\n\t\r\n\t// Copy existing data\r\n\tnewVertices.set( batch.vertices );\r\n\tbatch.vertices = newVertices;\r\n\tnewColors.set( batch.colors );\r\n\tbatch.colors = newColors;\r\n\t\r\n\tif( batch.type === IMAGE_BATCH ) {\r\n\t\tconst newTexCoords = new Float32Array( newCapacity * batch.texCoordComps );\r\n\t\tnewTexCoords.set( batch.texCoords );\r\n\t\tbatch.texCoords = newTexCoords;\r\n\t}\r\n\r\n\tconsole.log(\r\n\t\t`Batch ${BATCH_TYPES[ batch.type]} resized from ${batch.capacity} to ${newCapacity}`\r\n\t);\r\n\r\n\t// Update batch\r\n\tbatch.capacity = newCapacity;\r\n\tbatch.capacityChanged = true;\r\n\r\n\t// Set the time capacity last changed\r\n\tbatch.capacityShrinkCheckTime = Date.now() + BATCH_CAPACITY_SHRINK_INTERVAL;\r\n}\r\n\r\n\r\n/**\r\n * Flush all batches to FBO\r\n * \r\n * @param {Object} screenData - Screen data object\r\n */\r\nfunction flushBatches( screenData, blend = null ) {\r\n\tif( blend === null ) {\r\n\t\tblend = screenData.blends.blend;\r\n\t}\r\n\t\r\n\tconst gl = screenData.gl;\r\n\r\n\tif( screenData.contextLost ) {\r\n\r\n\t\t// TODO: Maybe add warning here?\r\n\t\t// console.warn( \"WebGL context lost unable to render screen.\" );\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Bind FBO\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, screenData.FBO );\r\n\t\r\n\t// Set viewport\r\n\tgl.viewport( 0, 0, screenData.width, screenData.height );\r\n\t\r\n\t// Clear FBO on first render only\r\n\tif( screenData.isFirstRender ) {\r\n\t\tgl.clearColor( 0, 0, 0, 0 );\r\n\t\tgl.clear( gl.COLOR_BUFFER_BIT );\r\n\t\tscreenData.isFirstRender = false;\r\n\t}\r\n\r\n\t// TODO: Images should not share the same blend mode as other drawItems.\r\n\t// Update the blend mode\r\n\tif( blend === g_pens.BLEND_REPLACE ) {\r\n\t\tgl.disable( gl.BLEND );\r\n\t} else {\r\n\t\tgl.enable( gl.BLEND );\r\n\t\tgl.blendFuncSeparate(\r\n\t\t\tgl.SRC_ALPHA,           // srcRGBFactor\r\n\t\t\tgl.ONE_MINUS_SRC_ALPHA, // dstRGBFactor\r\n\t\t\tgl.ONE,                 // srcAlphaFactor  <--- Make src alpha factor 1.0 (no scaling)\r\n\t\t\tgl.ONE_MINUS_SRC_ALPHA  // dstAlphaFactor  <--- Make dst alpha factor (1-src.a)\r\n\t\t);\r\n\t}\r\n\r\n\t// Upload batch buffers\r\n\tfor( const batchType in screenData.batches ) {\r\n\t\tconst batch = screenData.batches[ batchType ];\r\n\t\tif( batch.count > 0 ) {\r\n\t\t\tuploadBatch( gl, batch, screenData.width, screenData.height );\r\n\t\t}\r\n\t}\r\n\r\n\t// Draw items\r\n\tfor( const drawOrderItem of screenData.batchInfo.drawOrder ) {\r\n\t\tif( drawOrderItem.endIndex === null ) {\r\n\t\t\tdrawOrderItem.endIndex = drawOrderItem.batch.count;\r\n\t\t}\r\n\r\n\t\t// Only draw the batch if there is something to draw\r\n\t\tif( drawOrderItem.endIndex - drawOrderItem.startIndex > 0 ) {\r\n\t\t\tconst texture = ( drawOrderItem.batch.type === IMAGE_BATCH ) ? drawOrderItem.texture : null;\r\n\t\t\tdrawBatch( gl, drawOrderItem.batch, drawOrderItem.startIndex, drawOrderItem.endIndex, texture );\r\n\t\t}\r\n\t}\r\n\r\n\t// Reset Batches\r\n\tfor( const batchType in screenData.batches ) {\r\n\t\tconst batch = screenData.batches[ batchType ];\r\n\t\tresetBatch( batch );\r\n\t}\r\n\r\n\t// Reset drawOrder object\r\n\tscreenData.batchInfo.drawOrder = [];\r\n\tscreenData.batchInfo.currentBatch = null;\r\n\r\n\t// Unbind VAO\r\n\tgl.bindVertexArray( null );\r\n\r\n\t// Unbind FBO\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\r\n}\r\n\r\nfunction uploadBatch( gl, batch, width, height ) {\r\n\tgl.useProgram( batch.program );\r\n\tgl.uniform2f( batch.locations.resolution, width, height );\r\n\tgl.bindVertexArray( batch.vao );\r\n\t\r\n\t// Allocate or resize buffers on capacity change\r\n\tif( batch.capacityChanged ) {\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.vertexVBO );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, batch.vertices.byteLength, gl.STREAM_DRAW );\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.colorVBO );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, batch.colors.byteLength, gl.STREAM_DRAW );\r\n\r\n\t\tif( batch.type === IMAGE_BATCH ) {\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.texCoordVBO );\r\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, batch.texCoords.byteLength, gl.STREAM_DRAW );\r\n\t\t}\r\n\r\n\t\tbatch.capacityChanged = false;\r\n\t}\r\n\r\n\t// Upload positions\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.vertexVBO );\r\n\tgl.bufferSubData( \r\n\t\tgl.ARRAY_BUFFER, 0, batch.vertices.subarray( 0, batch.count * batch.vertexComps )\r\n\t);\r\n\t\r\n\t// Upload colors\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.colorVBO );\r\n\tgl.bufferSubData(\r\n\t\tgl.ARRAY_BUFFER, 0, batch.colors.subarray( 0, batch.count * batch.colorComps )\r\n\t);\r\n\r\n\t// Upload texture coordinates\r\n\tif( batch.type === IMAGE_BATCH ) {\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, batch.texCoordVBO );\r\n\t\tgl.bufferSubData(\r\n\t\t\tgl.ARRAY_BUFFER, 0, batch.texCoords.subarray( 0, batch.count * batch.texCoordComps )\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction drawBatch( gl, batch, startIndex, endIndex, texture = null ) {\r\n\tgl.useProgram( batch.program );\r\n\tgl.bindVertexArray( batch.vao );\r\n\r\n\t// For IMAGE_BATCH, bind the texture and set uniform\r\n\tif( batch.type === IMAGE_BATCH && texture ) {\r\n\t\tgl.activeTexture( gl.TEXTURE0 );\r\n\t\tgl.bindTexture( gl.TEXTURE_2D, texture );\r\n\t\tgl.uniform1i( batch.locations.texture, 0 );\r\n\t}\r\n\r\n\t// Draw based on batch mode\r\n\tgl.drawArrays( batch.mode, startIndex, endIndex - startIndex );\r\n}\r\n\r\nfunction resetBatch( batch ) {\r\n\r\n\t// Update the batch local max\r\n\tbatch.capacityLocalMax = Math.max( batch.count, batch.capacityLocalMax );\r\n\r\n\t// Reset batch count\r\n\tbatch.count = 0;\r\n\r\n\tif( batch.type === IMAGE_BATCH ) {\r\n\t\tbatch.image = null;\r\n\t}\r\n\r\n\t// Check if should shrink capacity\r\n\tif( Date.now() > batch.capacityShrinkCheckTime ) {\r\n\r\n\t\t// This will resize the batch slowly over time - cutting in half every 5 seconds\r\n\t\tif( batch.capacity > batch.minCapacity && batch.capacityLocalMax < batch.capacity * 0.5 ) {\r\n\r\n\t\t\t// Resize the batch\r\n\t\t\tresizeBatch( batch, Math.max( batch.capacity * 0.5, batch.minCapacity ) );\r\n\t\t}\r\n\r\n\t\tbatch.capacityShrinkCheckTime = Date.now() + BATCH_CAPACITY_SHRINK_INTERVAL;\r\n\t\tbatch.capacityLocalMax = 0;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Display FBO texture to visible canvas\r\n * \r\n * @param {Object} screenData - Screen data object\r\n */\r\nfunction displayToCanvas( screenData ) {\r\n\t\r\n\tconst gl = screenData.gl;\r\n\tconst program = screenData.displayProgram;\r\n\tconst locations = screenData.displayLocations;\r\n\r\n\t// Bind default framebuffer (screen)\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\t\r\n\t// Set viewport to full canvas\r\n\tgl.viewport( 0, 0, screenData.canvas.width, screenData.canvas.height );\r\n\t\r\n\t// Clear the canvas before drawing the FBO texture\r\n\tgl.clearColor( 0, 0, 0, 0 );\r\n\tgl.clear( gl.COLOR_BUFFER_BIT );\r\n\t\r\n\t// Disable blend for render to display\r\n\tgl.disable( gl.BLEND );\r\n\r\n\t// Use display shader\r\n\tgl.useProgram( program );\r\n\t\r\n\t// Enable position attribute\r\n\tgl.enableVertexAttribArray( locations.position );\r\n\t\r\n\t// Bind position buffer\r\n\tgl.bindBuffer( gl.ARRAY_BUFFER, screenData.displayPositionBuffer );\r\n\tgl.vertexAttribPointer( locations.position, 2, gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t// Bind FBO texture\r\n\tgl.activeTexture( gl.TEXTURE0 );\r\n\tgl.bindTexture( gl.TEXTURE_2D, screenData.texture );\r\n\tgl.uniform1i( locations.texture, 0 );\r\n\t\r\n\t// Draw fullscreen quad\r\n\tgl.drawArrays( gl.TRIANGLES, 0, 6 );\r\n\t\r\n\t// Cleanup\r\n\tgl.disableVertexAttribArray( locations.position );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Drawing Operations\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Fast path for direct pixel writes (no bounds check, no blending)\r\n * \r\n * @param {Object} screenData - Screen data object\r\n * @param {number} x - X coordinate\r\n * @param {number} y - Y coordinate\r\n * @param {Object} color - Color object includes r/g/b/a components (0-255)\r\n */\r\nexport function drawPixelUnsafe( screenData, x, y, color ) {\r\n\t\r\n\t// Add directly to point batch\r\n\tconst batch = screenData.batches[ POINTS_BATCH ];\r\n\tconst idx = batch.count * batch.vertexComps;\r\n\tconst cidx = batch.count * batch.colorComps;\r\n\t\r\n\tbatch.vertices[ idx     ] = x;\r\n\tbatch.vertices[ idx + 1 ] = y;\r\n\tbatch.colors[ cidx     ] = color.r;\r\n\tbatch.colors[ cidx + 1 ] = color.g;\r\n\tbatch.colors[ cidx + 2 ] = color.b;\r\n\tbatch.colors[ cidx + 3 ] = color.a;\r\n\r\n\tbatch.count++;\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Readback Operations\r\n **************************************************************************************************/\r\n\r\nexport function readPixel( screenData, x, y ) {\r\n\r\n\t// Ensure latest contents are in the FBO\r\n\tflushBatches( screenData );\r\n\r\n\tconst gl = screenData.gl;\r\n\tconst screenWidth = screenData.width;\r\n\tconst screenHeight = screenData.height;\r\n\r\n\t// Bounds check\r\n\tif( x < 0 || y < 0 || x >= screenWidth || y >= screenHeight ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// WebGL uses bottom-left origin; flip Y\r\n\tconst glY = ( screenHeight - 1 ) - y;\r\n\tconst buf = new Uint8Array( 4 );\r\n\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, screenData.FBO );\r\n\tgl.readPixels( x, glY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buf );\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\r\n\treturn g_utils.rgbToColor( buf[ 0 ], buf[ 1 ], buf[ 2 ], buf[ 3 ] );\r\n}\r\n\r\nexport function readPixelAsync( screenData, x, y ) {\r\n\treturn new Promise( ( resolve ) => {\r\n\t\tg_utils.queueMicrotask( () => {\r\n\t\t\tresolve( readPixel( screenData, x, y ) );\r\n\t\t} );\r\n\t} );\r\n}\r\n\r\n\r\nexport function readPixels( screenData, x, y, width, height ) {\r\n\tconst gl = screenData.gl;\r\n\tconst screenWidth = screenData.width;\r\n\tconst screenHeight = screenData.height;\r\n\r\n\t// Clamp to screen bounds for robustness if not fully clipped by pixels.js\r\n\tconst clampedX = Math.max( 0, x );\r\n\tconst clampedY = Math.max( 0, y );\r\n\tconst clampedWidth = Math.min( width, screenWidth - clampedX );\r\n\tconst clampedHeight = Math.min( height, screenHeight - clampedY );\r\n\r\n\t// If after clamping, nothing left to read\r\n\tif( clampedWidth <= 0 || clampedHeight <= 0 ) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\t// Flush batches before reading\r\n\tflushBatches( screenData );\r\n\r\n\t// Allocate buffer for the exact rectangle to read\r\n\tconst buf = new Uint8Array( clampedWidth * clampedHeight * 4 );\r\n\r\n\t// WebGL origin is bottom-left; convert to top-left for `gl.readPixels`\r\n\t// The Y coordinate for `gl.readPixels` is the bottom edge of the rectangle.\r\n\t// Bottom-left corner Y of the rectangle\r\n\tconst glReadY = ( screenHeight - ( clampedY + clampedHeight ) );\r\n\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, screenData.FBO );\r\n\tgl.readPixels( clampedX, glReadY, clampedWidth, clampedHeight, gl.RGBA, gl.UNSIGNED_BYTE, buf );\r\n\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\r\n\t// Map back to output structure expected by graphics/pixels.js\r\n\t// This function will return a flat array of color objects\r\n\tconst resultColors = new Array( clampedHeight );\r\n\tfor( let row = 0; row < clampedHeight; row++ ) {\r\n\r\n\t\tconst resultsRow = new Array( clampedWidth );\r\n\t\tfor( let col = 0; col < clampedWidth; col++ ) {\r\n\r\n\t\t\t// Convert gl.readPixels' bottom-origin Y to top-origin Y for the buffer index\r\n\t\t\t// `buf` itself is ordered from glReadY up to glReadY + clampedHeight - 1\r\n\t\t\t// Flip row index\r\n\t\t\tconst bufRow = ( clampedHeight - 1 ) - row;\r\n\t\t\tconst i = ( ( clampedWidth * bufRow ) + col ) * 4;\r\n\t\t\tresultsRow[ col ] = g_utils.rgbToColor(\r\n\t\t\t\tbuf[ i ], buf[ i + 1 ], buf[ i + 2 ], buf[ i + 3 ]\r\n\t\t\t);\r\n\t\t}\r\n\t\tresultColors[ row ] = resultsRow;\r\n\t}\r\n\r\n\treturn resultColors;\r\n}\r\n\r\nexport function readPixelsAsync( screenData, x, y, width, height ) {\r\n\treturn new Promise( ( resolve ) => {\r\n\t\tg_utils.queueMicrotask( () => {\r\n\t\t\tresolve( readPixels( screenData, x, y, width, height ) );\r\n\t\t} );\r\n\t} );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Image Texture Management\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Get or create WebGL2 texture for an image\r\n * \r\n * @param {Object} screenData - Screen data object\r\n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\r\n * @returns {WebGLTexture|null} WebGL texture or null on error\r\n */\r\nexport function getWebGL2Texture( screenData, img ) {\r\n\r\n\tif( !screenData.gl ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Get or create inner Map for this image\r\n\tlet contextMap = m_webgl2Textures.get( img );\r\n\tif( !contextMap ) {\r\n\t\tcontextMap = new Map();\r\n\t\tm_webgl2Textures.set( img, contextMap );\r\n\t}\r\n\r\n\t// Check if texture already exists for this screen's context\r\n\tconst gl = screenData.gl;\r\n\tlet texture = contextMap.get( gl );\r\n\tif( texture ) {\r\n\t\treturn texture;\r\n\t}\r\n\r\n\t// Create new texture\r\n\ttexture = gl.createTexture();\r\n\tif( !texture ) {\r\n\t\tconsole.error( \"Failed to create WebGL2 texture for image.\" );\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgl.bindTexture( gl.TEXTURE_2D, texture );\r\n\r\n\t// Upload image data to texture\r\n\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img );\r\n\r\n\t// Set texture parameters for pixel-perfect rendering\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\r\n\tgl.bindTexture( gl.TEXTURE_2D, null );\r\n\r\n\t// Store texture in nested Map\r\n\tcontextMap.set( gl, texture );\r\n\r\n\treturn texture;\r\n}\r\n\r\n/**\r\n * Delete WebGL2 texture for an image on all screens\r\n * Must be called explicitly to free GPU memory - textures are not automatically\r\n * garbage collected by the browser.\r\n * \r\n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\r\n */\r\nexport function deleteWebGL2Texture( img ) {\r\n\r\n\t// Get the context Map for this image\r\n\tconst contextMap = m_webgl2Textures.get( img );\r\n\tif( !contextMap ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Get all active screens\r\n\tconst allScreens = g_screenManager.getAllScreens();\r\n\r\n\t// Iterate through all screens and delete textures for this image\r\n\tfor( const screenData of allScreens ) {\r\n\t\tif( !screenData.gl || screenData.renderMode !== \"webgl2\" ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst texture = contextMap.get( screenData.gl );\r\n\t\tif( texture ) {\r\n\t\t\tscreenData.gl.deleteTexture( texture );\r\n\t\t\tcontextMap.delete( screenData.gl );\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove the context Map if empty\r\n\tif( contextMap.size === 0 ) {\r\n\t\tm_webgl2Textures.delete( img );\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Image Drawing Operations\r\n **************************************************************************************************/\r\n\r\n\r\n/**\r\n * Draw an image on the screen\r\n * \r\n * @param {Object} screenData - Screen data object\r\n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\r\n * @param {number} x - X coordinate\r\n * @param {number} y - Y coordinate\r\n * @param {number} angleRad - Rotation angle in radians\r\n * @param {number} anchorX - Anchor point X (0-1)\r\n * @param {number} anchorY - Anchor point Y (0-1)\r\n * @param {number} alpha - Alpha value (0-255)\r\n * @param {number} scaleX - Scale X\r\n * @param {number} scaleY - Scale Y\r\n */\r\nexport function drawImage(\r\n\tscreenData, img, x, y, angleRad, anchorX, anchorY, alpha, scaleX, scaleY\r\n) {\r\n\r\n\t// Get or create texture\r\n\tconst texture = getWebGL2Texture( screenData, img );\r\n\tif( !texture ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Calculate image dimensions\r\n\tconst imgWidth = img.width;\r\n\tconst imgHeight = img.height;\r\n\r\n\t// Calculate anchor position in pixels\r\n\tconst anchorXPx = Math.round( imgWidth * anchorX );\r\n\tconst anchorYPx = Math.round( imgHeight * anchorY );\r\n\r\n\t// Calculate scaled dimensions\r\n\tconst scaledWidth = imgWidth * scaleX;\r\n\tconst scaledHeight = imgHeight * scaleY;\r\n\r\n\t// Calculate corner positions relative to anchor point (top-left at -anchor, bottom-right at size-anchor)\r\n\tconst corners = [\r\n\t\t{ \"x\": -anchorXPx, \"y\": -anchorYPx },                    // Top-left\r\n\t\t{ \"x\": scaledWidth - anchorXPx, \"y\": -anchorYPx },      // Top-right\r\n\t\t{ \"x\": -anchorXPx, \"y\": scaledHeight - anchorYPx },     // Bottom-left\r\n\t\t{ \"x\": scaledWidth - anchorXPx, \"y\": scaledHeight - anchorYPx } // Bottom-right\r\n\t];\r\n\r\n\t// Rotate corners around (0,0) then translate to (x,y)\r\n\tconst cos = Math.cos( angleRad );\r\n\tconst sin = Math.sin( angleRad );\r\n\tfor( let i = 0; i < corners.length; i++ ) {\r\n\t\tconst corner = corners[ i ];\r\n\t\tconst rx = corner.x * cos - corner.y * sin;\r\n\t\tconst ry = corner.x * sin + corner.y * cos;\r\n\t\tcorner.x = rx + x;\r\n\t\tcorner.y = ry + y;\r\n\t}\r\n\r\n\t// Texture coordinates (full image)\r\n\tconst texCoords = [\r\n\t\t0, 0,  // Top-left\r\n\t\t1, 0,  // Top-right\r\n\t\t0, 1,  // Bottom-left\r\n\t\t1, 0,  // Top-right (repeat for second triangle)\r\n\t\t1, 1,  // Bottom-right\r\n\t\t0, 1   // Bottom-left (repeat for second triangle)\r\n\t];\r\n\r\n\t// Prepare batch for 6 vertices (2 triangles)\r\n\tconst batch = screenData.batches[ IMAGE_BATCH ];\r\n\r\n\t// Check if we need a new batch segment due to texture change\r\n\tconst batchInfo = screenData.batchInfo;\r\n\tif(\r\n\t\tbatchInfo.currentBatch === batch &&\r\n\t\t( batch.image !== img || batch.texture !== texture )\r\n\t) {\r\n\r\n\t\t// Texture changed - finalize current segment and start new one\r\n\t\tif( batchInfo.drawOrder.length > 0 ) {\r\n\t\t\tconst lastDrawOrderItem = batchInfo.drawOrder[ batchInfo.drawOrder.length - 1 ];\r\n\t\t\tlastDrawOrderItem.endIndex = batch.count;\r\n\t\t}\r\n\r\n\t\t// Create new drawOrder item for this texture\r\n\t\tconst drawOrderItem = {\r\n\t\t\tbatch,\r\n\t\t\t\"startIndex\": batch.count,\r\n\t\t\t\"endIndex\": null,\r\n\t\t\timage: img,\r\n\t\t\ttexture: texture\r\n\t\t};\r\n\t\tbatchInfo.drawOrder.push( drawOrderItem );\r\n\t}\r\n\r\n\t// Prepare batch (will create new segment if batch type changed)\r\n\tprepareBatch( screenData, IMAGE_BATCH, 6 );\r\n\r\n\t// Update current image and texture\r\n\tbatch.image = img;\r\n\tbatch.texture = texture;\r\n\r\n\t// Update drawOrder item texture if this is a new segment\r\n\tif( batchInfo.drawOrder.length > 0 ) {\r\n\t\tconst lastDrawOrderItem = batchInfo.drawOrder[ batchInfo.drawOrder.length - 1 ];\r\n\t\tif( lastDrawOrderItem.endIndex === null ) {\r\n\t\t\tlastDrawOrderItem.image = img;\r\n\t\t\tlastDrawOrderItem.texture = texture;\r\n\t\t}\r\n\t}\r\n\r\n\t// Color with alpha\r\n\tconst r = Math.round( 255 );\r\n\tconst g = Math.round( 255 );\r\n\tconst b = Math.round( 255 );\r\n\tconst a = Math.round( alpha );\r\n\r\n\t// Add two triangles (6 vertices)\r\n\tconst baseIdx = batch.count;\r\n\tconst vertexBase = baseIdx * batch.vertexComps;\r\n\tconst colorBase = baseIdx * batch.colorComps;\r\n\tconst texBase = baseIdx * batch.texCoordComps;\r\n\r\n\t// Triangle 1: Top-left, Top-right, Bottom-left\r\n\tlet vIdx = vertexBase;\r\n\tlet cIdx = colorBase;\r\n\tlet tIdx = texBase;\r\n\r\n\t// Vertex 0: Top-left\r\n\tbatch.vertices[ vIdx++ ] = corners[ 0 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 0 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 0 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 1 ];\r\n\r\n\t// Vertex 1: Top-right\r\n\tbatch.vertices[ vIdx++ ] = corners[ 1 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 1 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 2 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 3 ];\r\n\r\n\t// Vertex 2: Bottom-left\r\n\tbatch.vertices[ vIdx++ ] = corners[ 2 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 2 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 4 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 5 ];\r\n\r\n\t// Triangle 2: Top-right, Bottom-right, Bottom-left\r\n\t// Vertex 3: Top-right\r\n\tbatch.vertices[ vIdx++ ] = corners[ 1 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 1 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 6 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 7 ];\r\n\r\n\t// Vertex 4: Bottom-right\r\n\tbatch.vertices[ vIdx++ ] = corners[ 3 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 3 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 8 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 9 ];\r\n\r\n\t// Vertex 5: Bottom-left\r\n\tbatch.vertices[ vIdx++ ] = corners[ 2 ].x;\r\n\tbatch.vertices[ vIdx++ ] = corners[ 2 ].y;\r\n\tbatch.colors[ cIdx++ ] = r;\r\n\tbatch.colors[ cIdx++ ] = g;\r\n\tbatch.colors[ cIdx++ ] = b;\r\n\tbatch.colors[ cIdx++ ] = a;\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 10 ];\r\n\tbatch.texCoords[ tIdx++ ] = texCoords[ 11 ];\r\n\r\n\t// Update batch count\r\n\tbatch.count += 6;\r\n\r\n\t// Mark screen as dirty\r\n\tsetImageDirty( screenData );\r\n}\r\n", "/**\r\n * Pi.js - Pens Module\r\n * \r\n * Manages pens and blends\r\n * \r\n * @module graphics/pens\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_screenManager from \"../core/screen-manager.js\";\r\nimport * as g_state from \"../core/state-settings.js\";\r\nimport * as g_utils from \"../core/utils.js\";\r\nimport * as g_graphicsApi from \"./graphics-api.js\";\r\n\r\n// Pens\r\nexport const PEN_PIXEL = \"pixel\";\r\nexport const PEN_SQUARE = \"square\";\r\nexport const PEN_CIRCLE = \"circle\";\r\nexport const PENS = new Set( [ PEN_PIXEL, PEN_SQUARE, PEN_CIRCLE ] );\r\n\r\n// Blends\r\nexport const BLEND_REPLACE = \"replace\";\r\nexport const BLEND_ALPHA = \"alpha\";\r\nexport const BLENDS = new Set( [ BLEND_REPLACE, BLEND_ALPHA ] );\r\n\r\nconst m_noiseColor = { \"r\": 0, \"g\": 0, \"b\": 0, \"a\": 0 };\r\n\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Initialize the pens\r\nexport async function init( api ) {\r\n\taddScreenDataItems();\r\n\tregisterCommands();\r\n}\r\n\r\nfunction addScreenDataItems() {\r\n\r\n\t// Add Render Screen Data\r\n\tg_screenManager.addScreenDataItem( \"blends\", {\r\n\t\t\"blend\": BLEND_REPLACE, \"blendFn\": null, \"noise\": null, \"noiseData\": []\r\n\t} );\r\n\tg_screenManager.addScreenDataItem( \"pens\", {\r\n\t\t\"pen\": PEN_PIXEL, \"penFn\": null, \"size\": 1, \"pixelsPerPen\": 1\r\n\t} );\r\n\r\n\t// Need to rebuild Pen Fn on screen resize\r\n\tg_screenManager.addScreenResizeFunction( ( screenData ) => {\r\n\t\tbuildPenFn( screenData );\r\n\t} );\r\n}\r\n\r\nfunction registerCommands() {\r\n\r\n\tg_state.addCommand( \"setPen\", setPen, true, [ \"pen\", \"size\", \"blend\", \"noise\" ] );\r\n}\r\n\r\n// Function to dynamically build the optimal penFn and blendFn for the current screen, renderer,\r\n// pen type, and blend mode. This eliminates all runtime 'if' statements and dynamic lookups in the\r\n// pixel-drawing hot path by pre-specializing the functions at configuration change time, \r\n// maximizing V8 JIT compiler's inlining opportunities.\r\n// Note that this gets called anytime a blend or pen get changed on the active screen.\r\n// Also this gets called when the screen resizes in order to reset the s_width and s_height \r\n// variables.\r\nfunction buildPenFn( s_screenData ) {\r\n\r\n\tconst s_drawPixelunsafe = s_screenData.renderer.drawPixelUnsafe;\r\n\tconst s_blendPixelUnsafe = s_screenData.renderer.blendPixelUnsafe;\r\n\tconst s_width = s_screenData.width;\r\n\tconst s_height = s_screenData.height;\r\n\tconst s_noise = s_screenData.blends.noise;\r\n\tconst s_clamp = g_utils.clamp;\r\n\r\n\t// Special fast path for blending we can skip the blend function and just call drawPixelUnsafe\r\n\t// WebGl2 can handle blending in the GPU so we can just use drawPixelUnsafe\r\n\t// BLEND_REPLACE also doesn't do any blending if there is no noise\r\n\t// Pens should handle bounds checking so we can call drawPixelUnsafe\r\n\tlet s_blendFn;\r\n\tif(\r\n\t\ts_screenData.blends.noise === null && (\r\n\t\t\ts_screenData.renderMode === g_screenManager.WEBGL2_RENDER_MODE ||\r\n\t\t\ts_screenData.blends.blend === BLEND_REPLACE\r\n\t\t)\r\n\t) {\r\n\t\ts_blendFn = s_drawPixelunsafe;\r\n\r\n\t// BLEND_REPLACE with noise\r\n\t} else if( s_screenData.blends.blend === BLEND_REPLACE ) {\r\n\r\n\t\t// Draw pixel direct with some random noise data\r\n\t\ts_blendFn = ( screenData, x, y, color ) => {\r\n\t\t\ts_drawPixelunsafe( screenData, x, y, getColorNoise( s_noise, color, s_clamp ) );\r\n\t\t};\r\n\t\r\n\t// BLEND_ALPHA without noise\r\n\t} else if( s_screenData.blends.blend === BLEND_ALPHA && s_screenData.blends.noise === null ) {\r\n\t\tif( s_screenData.renderMode === g_screenManager.WEBGL2_RENDER_MODE ) {\r\n\t\t\ts_blendFn = s_drawPixelunsafe;\r\n\t\t} else {\r\n\t\t\ts_blendFn = s_blendPixelUnsafe;\r\n\t\t}\r\n\t\r\n\t// BLEND_ALPHA with noise\r\n\t} else {\r\n\r\n\t\tif( s_screenData.renderMode === g_screenManager.WEBGL2_RENDER_MODE ) {\r\n\t\t\ts_blendFn = ( screenData, x, y, color ) => {\r\n\t\t\t\ts_drawPixelunsafe(screenData, x, y, getColorNoise( s_noise, color, s_clamp ) );\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\ts_blendFn = ( screenData, x, y, color ) => {\r\n\t\t\t\ts_blendPixelUnsafe( screenData, x, y, getColorNoise( s_noise, color, s_clamp ) );\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t// PEN_PIXEL\r\n\tif( s_screenData.pens.pen === PEN_PIXEL ) {\r\n\r\n\t\t// For a single pixel check the bounds and call blendFn\r\n\t\ts_screenData.pens.penFn = ( screenData, x, y, color ) => {\r\n\t\t\tif( x < 0 || x >= s_width || y < 0 || y >= s_height ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\ts_blendFn( screenData, x, y, color );\r\n\t\t};\r\n\t\r\n\t// PEN_SQUARE\r\n\t} else if( s_screenData.pens.pen === PEN_SQUARE ) {\r\n\r\n\t\t// Size must always be an odd integer\r\n\t\tconst squareSize = s_screenData.pens.size | 1;\r\n\r\n\t\t// Compute the center offset of the square\r\n\t\tconst offset = Math.round( squareSize / 2 ) - 1;\r\n\r\n\t\ts_screenData.pens.penFn = ( screenData, x, y, color ) => {\r\n\r\n\t\t\t// Calculate bounds and clip to screen\r\n\t\t\tconst x1 = s_clamp( x - offset, 0, s_width );\r\n\t\t\tconst x2 = s_clamp( x - offset + squareSize, 0, s_width );\r\n\t\t\tconst y1 = s_clamp( y - offset, 0, s_height );\r\n\t\t\tconst y2 = s_clamp( y - offset + squareSize, 0, s_height );\r\n\r\n\t\t\tdrawPenSquare( screenData, x1, y1, x2, y2, color, s_blendFn );\r\n\t\t};\r\n\t\r\n\t// PEN_CIRCLE\r\n\t} else if( s_screenData.pens.pen === PEN_CIRCLE ) {\r\n\r\n\t\t// Special case for size two draw a 5 pixel cross\r\n\t\tif( s_screenData.pens.size === 2 ) {\r\n\t\t\ts_screenData.pens.penFn = ( screenData, x, y, color ) => {\r\n\t\t\t\tdrawPenCross( screenData, x, y, color, s_width, s_height, s_blendFn );\r\n\t\t\t};\r\n\t\t} else {\r\n\r\n\t\t\t// Double size to get the size of the outer box\r\n\t\t\tconst diameter = s_screenData.pens.size * 2;\r\n\r\n\t\t\t// Half is size of radius\r\n\t\t\tconst half = s_screenData.pens.size;\r\n\r\n\t\t\t// Calculate the center of circle\r\n\t\t\tconst offset = half - 1;\r\n\r\n\t\t\t// Pre-calculate squared radius threshold\r\n\t\t\t// We compare squared distance to (half - 0.5)^2\r\n\t\t\tconst radiusThresholdSq = ( half - 0.5 ) * ( half - 0.5 );\r\n\r\n\t\t\ts_screenData.pens.penFn = ( screenData, x, y, color ) => {\r\n\t\t\t\r\n\t\t\t\t// Calculate bounds and clip to screen\r\n\t\t\t\tconst x1 = s_clamp( x - offset, 0, s_width );\r\n\t\t\t\tconst x2 = s_clamp( x - offset + diameter, 0, s_width );\r\n\t\t\t\tconst y1 = s_clamp( y - offset, 0, s_height );\r\n\t\t\t\tconst y2 = s_clamp( y - offset + diameter, 0, s_height );\r\n\t\r\n\t\t\t\t// Draw circle pen\r\n\t\t\t\tdrawPenCircle(\r\n\t\t\t\t\tscreenData, x, y, x1, y1, x2, y2, radiusThresholdSq, color, s_blendFn\r\n\t\t\t\t);\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Set the blendFn - used in filled shapes and paint\r\n\ts_screenData.blends.blendFn = s_blendFn;\r\n\r\n\t// Rebuild graphics api to get the new pen functions\r\n\tg_graphicsApi.buildGraphicsApi( s_screenData );\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * External API Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Set Pen Command\r\nfunction setPen( screenData, options ) {\r\n\tlet pen = options.pen;\r\n\tlet size = g_utils.getInt( options.size, 1 );\r\n\tlet blend = options.blend;\r\n\tlet noise = options.noise;\r\n\r\n\t// Validate pen option\r\n\tif( !pen ) {\r\n\t\tpen = screenData.pens.pen;\r\n\t}\r\n\tif( !PENS.has( pen ) ) {\r\n\t\tconst error = new TypeError(\r\n\t\t\t\"setPen: Parameter pen is not a valid pen. Valid pens are (\" +\r\n\t\t\t`${Array.from( PENS ).join( \", \" )}).`\r\n\t\t);\r\n\t\terror.code = \"INVALID_PEN\";\r\n\t\tthrow error;\r\n\t}\r\n\tif( pen === PEN_PIXEL ) {\r\n\t\tsize = 1;\r\n\t}\r\n\r\n\t// Set the minimum pen size to 1\r\n\tif( size < 1 ) {\r\n\t\tsize = 1;\r\n\t}\r\n\r\n\t// Size one is always just a pixel\r\n\tif( size === 1 ) {\r\n\t\tpen = PEN_PIXEL;\r\n\t}\r\n\r\n\t// Validate the blend option\r\n\tif( !blend ) {\r\n\t\tblend = screenData.blends.blend;\r\n\t}\r\n\tif( !BLENDS.has( blend ) ) {\r\n\t\tconst error = new TypeError(\r\n\t\t\t`setBlend: Parameter blend is not a valid blend. Valid blends are (` +\r\n\t\t\t`${Array.from( BLENDS ).join( \", \" )}).`\r\n\t\t);\r\n\t\terror.code = \"INVALID_BLEND_MODE\";\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Validate the noise option\r\n\tif( Array.isArray( noise ) ) {\r\n\t\tfor( let i = 0; i < noise.length; i++ ) {\r\n\t\t\tif( isNaN( noise[ i ] ) ) {\r\n\t\t\t\tconst error = new TypeError(\r\n\t\t\t\t\t\"setBlend: Parameter noise array contains an invalid value.\"\r\n\t\t\t\t);\r\n\t\t\t\terror.code = \"INVALID_NOISE_VALUE\";\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tnoise = g_utils.getInt( noise, null );\r\n\t\tif( noise !== null ) {\r\n\t\t\tnoise = [ noise, noise, noise, 0 ];\r\n\t\t}\r\n\t}\r\n\r\n\t// Set the pen on screen data\r\n\tscreenData.pens.pen = pen;\r\n\tscreenData.pens.size = size;\r\n\r\n\t// Set the amount of points that will be drawn by the pen\r\n\tif( pen === PEN_SQUARE ) {\r\n\t\tscreenData.pens.pixelsPerPen = size * size;\r\n\t} else if( pen === PEN_CIRCLE ) {\r\n\t\tif( size === 2 ) {\r\n\t\t\tscreenData.pens.pixelsPerPen = 5;\r\n\t\t} else {\r\n\t\t\tscreenData.pens.pixelsPerPen = Math.round( Math.PI * ( size + 1 ) * ( size + 1 ) ) + 1;\r\n\t\t}\r\n\t} else {\r\n\t\tscreenData.pens.pixelsPerPen = 1;\r\n\t}\r\n\r\n\t// Set blend data on screen\r\n\tconst previousBlend = screenData.blends.blend;\r\n\tscreenData.blends.blend = blend;\r\n\tscreenData.blends.noise = noise;\r\n\r\n\tbuildPenFn( screenData );\r\n\r\n\t// Notify renderer that blend mode has changed for webgl2 renderer\r\n\tif( previousBlend !== blend && screenData.renderMode === g_screenManager.WEBGL2_RENDER_MODE ) {\r\n\t\tscreenData.renderer.blendModeChanged( screenData, previousBlend );\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Pen Functions\r\n **************************************************************************************************/\r\n\r\n\r\n// TODO: These pen functions are obviously flawed for use in lines and shapes as they will write\r\n// over the same pixel multiple times.  Find a better way to draw shapes with a pen might be \r\n// complicated so it's not a high priority, this will get the job done for now. This is especially\r\n// problematic when combined with alpha blends because it will perform blends multiple times.\r\n// One solution could be to have a Set with all the pixel values and use a key lookup to make sure\r\n// the pixel hasn't already been set. It would use a lot of memory and be slower but it wouldn't \r\n// cause issues with alpha blend mode.  Of course it would add branching to my \"hot path\" so maybe\r\n// only use it in alpha mode.\r\n// Use this function to generate a key that is safe for a 8192x8192 max screen size.\r\n// export function getPixelKey( x, y ) {\r\n// \treturn ( y << 13 ) | x; \r\n// }\r\n// The ideal solution is to implement the pen shape in the draw commands as vector shapes\r\n// but kind of a challenge. When moving to using shaders to draw shapes in webgl2 this should be\r\n// managable but for canvas2d probably best to use the \"Set\" solution.\r\n\r\n\r\nfunction drawPenSquare( screenData, x1, y1, x2, y2, color, blendFn ) {\r\n\tfor( let py = y1; py < y2; py++ ) {\r\n\t\tfor( let px = x1; px < x2; px++ ) {\r\n\t\t\tblendFn( screenData, px, py, color );\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction drawPenCross( screenData, x, y, color, width, height, blendFn ) {\r\n\tif( x >= 0 && x < width && y >= 0 && y < height ) {\r\n\t\tblendFn( screenData, x, y, color );\r\n\t}\r\n\tif( x + 1 >= 0 && x + 1 < width && y >= 0 && y < height ) {\r\n\t\tblendFn( screenData, x + 1, y, color );\r\n\t}\r\n\tif( x - 1 >= 0 && x - 1 < width && y >= 0 && y < height ) {\r\n\t\tblendFn( screenData, x - 1, y, color );\r\n\t}\r\n\tif( x >= 0 && x < width && y + 1 >= 0 && y + 1 < height ) {\r\n\t\tblendFn( screenData, x, y + 1, color );\r\n\t}\r\n\tif( x >= 0 && x < width && y - 1 >= 0 && y - 1 < height ) {\r\n\t\tblendFn( screenData, x, y - 1, color );\r\n\t}\r\n}\r\n\r\nfunction drawPenCircle( screenData, x, y, x1, y1, x2, y2, radiusThresholdSq, color, blendFn ) {\r\n\r\n\t// Loop through the clipped square boundary\r\n\tfor( let py = y1; py < y2; py++ ) {\r\n\t\tconst dy = py - y;\r\n\r\n\t\tfor( let px = x1; px < x2; px++ ) {\r\n\t\t\tconst dx = px - x;\r\n\r\n\t\t\t// Compute the squared distance from the center\r\n\t\t\tconst distSq = dx * dx + dy * dy;\r\n\r\n\t\t\t// Only draw the pixel if its squared distance is less than the threshold\r\n\t\t\tif( distSq < radiusThresholdSq ) {\r\n\t\t\t\tblendFn( screenData, px, py, color );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/***************************************************************************************************\r\n * Noise Functions\r\n **************************************************************************************************/\r\n\r\n\r\nfunction getColorNoise( noise, color, clamp ) {\r\n\tconst c2 = m_noiseColor;\r\n\tc2.r = color.r;\r\n\tc2.g = color.g;\r\n\tc2.b = color.b;\r\n\tc2.a = color.a;\r\n\tconst half = noise / 2;\r\n\r\n\t// Generate random noise\r\n\tc2.r = clamp( Math.round( c2.r + g_utils.rndRange( -noise[ 0 ], noise[ 0 ] ) ), 0, 255 );\r\n\tc2.g = clamp( Math.round( c2.g + g_utils.rndRange( -noise[ 1 ], noise[ 1 ] ) ), 0, 255 );\r\n\tc2.b = clamp( Math.round( c2.b + g_utils.rndRange( -noise[ 2 ], noise[ 2 ] ) ), 0, 255 );\r\n\tc2.a = clamp( Math.round( c2.a + g_utils.rndRange( -noise[ 3 ], noise[ 3 ] ) ), 0, 255 );\r\n\r\n\treturn c2;\r\n}\r\n", "/**\r\n * Pi.js - Graphics Module\r\n * \r\n * Basic Graphics Commands: pset, line, and more to come\r\n * \r\n * @module graphics/graphics-api\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Import modules directly\r\nimport * as g_utils from \"../core/utils.js\";\r\nimport * as g_colors from \"./colors.js\";\r\n\r\n// Graphics Modules\r\nimport * as g_webgl2Renderer from \"./renderer-webgl2.js\";\r\nimport * as g_primitives from \"./graphics-primitives.js\";\r\nimport * as g_shapes from \"./graphics-shapes.js\";\r\n\r\nlet m_api = null;\r\n\r\n/***************************************************************************************************\r\n * Module Commands\r\n **************************************************************************************************/\r\n\r\n\r\n// Initialize graphics module - only gets called on page load\r\nexport function init( api ) {\r\n\tm_api = api;\r\n\r\n\t// Build the null graphics commands - basically will throw an error since no screen is available\r\n\tbuildGraphicsApi( null );\r\n}\r\n\r\n// Function to dynamically build the external API drawing commands (e.g., pset, line, etc...)\r\n// for the current active screen, pen, and blend functions. This creates specialized API wrappers\r\n// that handle input parsing/validation, then call optimized internal drawing routines. By closing\r\n// over specific, already-optimized functions (like penFn), it provides highly performant, \r\n// monomorphic call sites in hot loops. Note that this gets from buildPenFn when a pen or blend\r\n// changes or when screen the screen resizes or there is a new screen. Also gets called when on\r\n// init but just to setup pre-screen calls with error returns.\r\nexport function buildGraphicsApi( s_screenData ) {\r\n\r\n\tif( s_screenData === null ) {\r\n\r\n\t\t// Set error fn for primitives\r\n\t\tfor( const commandName of g_primitives.commandNames ) {\r\n\t\t\tm_api[ commandName ] = () => g_utils.errFn( commandName );\r\n\t\t}\r\n\r\n\t\t// Set error fn for primitives\r\n\t\tfor( const commandName of g_shapes.commandNames ) {\r\n\t\t\tm_api[ commandName ] = () => g_utils.errFn( commandName );\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst s_penFn = s_screenData.pens.penFn;\r\n\tconst s_penSize = s_screenData.pens.size;\r\n\tconst s_penHalfSize = Math.round( s_penSize / 2 );\r\n\tconst s_screenWidth = s_screenData.width;\r\n\tconst s_screenHeight = s_screenData.height;\r\n\tconst s_blendFn = s_screenData.blends.blendFn;\r\n\tconst s_setImageDirty = s_screenData.renderer.setImageDirty;\r\n\tconst s_getImageData = s_screenData.renderer.getImageData;\r\n\tconst s_batchType = g_webgl2Renderer.POINTS_BATCH;\r\n\tconst s_pixelsPerPen = s_screenData.pens.pixelsPerPen;\r\n\tconst s_prepareBatch = s_screenData.renderer.prepareBatch;\r\n\tconst s_isObjectLiteral = g_utils.isObjectLiteral;\r\n\tconst s_getInt = g_utils.getInt;\r\n\tconst s_color = s_screenData.color;\r\n\tconst s_getColorValueByRawInput = g_colors.getColorValueByRawInput;\r\n\r\n\t// Build primitives api\r\n\tg_primitives.buildApi(\r\n\t\tm_api, s_screenData, s_penFn, s_isObjectLiteral, s_getInt, s_getImageData, s_color,\r\n\t\ts_setImageDirty, s_prepareBatch, s_batchType, s_pixelsPerPen\r\n\t);\r\n\r\n\t// build shapes api\r\n\tg_shapes.buildApi(\r\n\t\tm_api, s_screenData, s_penFn, s_blendFn, s_isObjectLiteral, s_getInt, s_getImageData,\r\n\t\ts_color, s_setImageDirty, s_prepareBatch, s_batchType, s_pixelsPerPen, s_screenWidth,\r\n\t\ts_screenHeight, s_penSize, s_penHalfSize, s_getColorValueByRawInput\r\n\t);\r\n}\r\n", "/**\n * Pi.js - Colors Module\n * \n * Manages the color palettes and color values for Alpha 2.\n * Simplified version focused on WebGL2 rendering.\n * \n * @module graphics/colors\n */\n\n\"use strict\";\n\n// Import modules directly\nimport * as g_state from \"../core/state-settings.js\";\nimport * as g_utils from \"../core/utils.js\";\nimport * as g_screenManager from \"../core/screen-manager.js\";\n\nlet m_defaultPal = [];\nlet m_defaultPalMap = new Map();\nlet m_defaultColor = -1;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\n// Initialize color defaults\nexport function init( api ) {\n\n\t// Default 256-color palette (CGA + extended colors) - raw hex strings\n\tconst defaultPaletteHex = [\n\t\t\"#0000AA\", \"#00AA00\", \"#00AAAA\", \"#AA0000\", \"#AA00AA\", \"#AA5500\", \"#AAAAAA\", \"#555555\",\n\t\t\"#5555FF\", \"#55FF55\", \"#55FFFF\", \"#FF5555\", \"#FF55FF\", \"#FFFF55\", \"#FFFFFF\", \"#000000\",\n\t\t\"#141414\", \"#202020\", \"#2D2D2D\", \"#393939\", \"#454545\", \"#515151\", \"#616161\", \"#717171\",\n\t\t\"#828282\", \"#929292\", \"#A2A2A2\", \"#B6B6B6\", \"#CACACA\", \"#E3E3E3\", \"#FFFFFF\", \"#0000FF\",\n\t\t\"#4100FF\", \"#7D00FF\", \"#BE00FF\", \"#FF00FF\", \"#FF00BE\", \"#FF007D\", \"#FF0041\", \"#FF0000\",\n\t\t\"#FF4100\", \"#FF7D00\", \"#FFBE00\", \"#FFFF00\", \"#BEFF00\", \"#7DFF00\", \"#41FF00\", \"#00FF00\",\n\t\t\"#00FF41\", \"#00FF7D\", \"#00FFBE\", \"#00FFFF\", \"#00BEFF\", \"#007DFF\", \"#0041FF\", \"#7D7DFF\",\n\t\t\"#9E7DFF\", \"#BE7DFF\", \"#DF7DFF\", \"#FF7DFF\", \"#FF7DDF\", \"#FF7DBE\", \"#FF7D9E\", \"#FF7D7D\",\n\t\t\"#FF9E7D\", \"#FFBE7D\", \"#FFDF7D\", \"#FFFF7D\", \"#DFFF7D\", \"#BEFF7D\", \"#9EFF7D\", \"#7DFF7D\",\n\t\t\"#7DFF9E\", \"#7DFFBE\", \"#7DFFDF\", \"#7DFFFF\", \"#7DDFFF\", \"#7DBEFF\", \"#7D9EFF\", \"#B6B6FF\",\n\t\t\"#C6B6FF\", \"#DBB6FF\", \"#EBB6FF\", \"#FFB6FF\", \"#FFB6EB\", \"#FFB6DB\", \"#FFB6C6\", \"#FFB6B6\",\n\t\t\"#FFC6B6\", \"#FFDBB6\", \"#FFEBB6\", \"#FFFFB6\", \"#EBFFB6\", \"#DBFFB6\", \"#C6FFB6\", \"#B6FFB6\",\n\t\t\"#B6FFC6\", \"#B6FFDB\", \"#B6FFEB\", \"#B6FFFF\", \"#B6EBFF\", \"#B6DBFF\", \"#B6C6FF\", \"#000071\",\n\t\t\"#1C0071\", \"#390071\", \"#550071\", \"#710071\", \"#710055\", \"#710039\", \"#71001C\", \"#710000\",\n\t\t\"#711C00\", \"#713900\", \"#715500\", \"#717100\", \"#557100\", \"#397100\", \"#1C7100\", \"#007100\",\n\t\t\"#00711C\", \"#007139\", \"#007155\", \"#007171\", \"#005571\", \"#003971\", \"#001C71\", \"#393971\",\n\t\t\"#453971\", \"#553971\", \"#613971\", \"#713971\", \"#713961\", \"#713955\", \"#713945\", \"#713939\",\n\t\t\"#714539\", \"#715539\", \"#716139\", \"#717139\", \"#617139\", \"#557139\", \"#457139\", \"#397139\",\n\t\t\"#397145\", \"#397155\", \"#397161\", \"#397171\", \"#396171\", \"#395571\", \"#394571\", \"#515171\",\n\t\t\"#595171\", \"#615171\", \"#695171\", \"#715171\", \"#715169\", \"#715161\", \"#715159\", \"#715151\",\n\t\t\"#715951\", \"#716151\", \"#716951\", \"#717151\", \"#697151\", \"#617151\", \"#597151\", \"#517151\",\n\t\t\"#517159\", \"#517161\", \"#517169\", \"#517171\", \"#516971\", \"#516171\", \"#515971\", \"#000041\",\n\t\t\"#100041\", \"#200041\", \"#310041\", \"#410041\", \"#410031\", \"#410020\", \"#410010\", \"#410000\",\n\t\t\"#411000\", \"#412000\", \"#413100\", \"#414100\", \"#314100\", \"#204100\", \"#104100\", \"#004100\",\n\t\t\"#004110\", \"#004120\", \"#004131\", \"#004141\", \"#003141\", \"#002041\", \"#001041\", \"#202041\",\n\t\t\"#282041\", \"#312041\", \"#392041\", \"#412041\", \"#412039\", \"#412031\", \"#412028\", \"#412020\",\n\t\t\"#412820\", \"#413120\", \"#413920\", \"#414120\", \"#394120\", \"#314120\", \"#284120\", \"#204120\",\n\t\t\"#204128\", \"#204131\", \"#204139\", \"#204141\", \"#203941\", \"#203141\", \"#202841\", \"#2D2D41\",\n\t\t\"#312D41\", \"#352D41\", \"#3D2D41\", \"#412D41\", \"#412D3D\", \"#412D35\", \"#412D31\", \"#412D2D\",\n\t\t\"#41312D\", \"#41352D\", \"#413D2D\", \"#41412D\", \"#3D412D\", \"#35412D\", \"#31412D\", \"#2D412D\",\n\t\t\"#2D4131\", \"#2D4135\", \"#2D413D\", \"#2D4141\", \"#2D3D41\", \"#2D3541\", \"#2D3141\", \"#000000\",\n\t\t\"#000000\", \"#000000\", \"#000000\", \"#000000\", \"#000000\", \"#000000\"\n\t];\n\n\t// Set the default pal and color\n\tsetDefaultPal( { \"pal\": defaultPaletteHex } );\n\tsetDefaultColor( { \"color\": 7 } );\n\n\t// Add getters for screen manager to get defaults for dynamic items\n\tg_screenManager.addScreenDataItemGetter( \"pal\", () => m_defaultPal );\n\tg_screenManager.addScreenDataItemGetter( \"color\", () => m_defaultColor );\n\tg_screenManager.addScreenDataItemGetter( \"palMap\", () => m_defaultPalMap );\n\n\t// Add external API commands\n\tregisterCommands( api );\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\nfunction registerCommands() {\n\n\t// Register non-screen commands\n\tg_state.addCommand( \"setDefaultPal\", setDefaultPal, false, [ \"pal\" ] );\n\tg_state.addCommand( \"setDefaultColor\", setDefaultColor, false, [ \"color\" ] );\n\n\t// Register screen commands\n\tg_state.addCommand( \"setColor\", setColor, true, [ \"color\", \"isAddToPalette\" ] );\n\tg_state.addCommand( \"getColor\", getColor, true, [ \"asIndex\" ] );\n\tg_state.addCommand( \"getPal\", getPal, true, [] );\n\tg_state.addCommand( \"setPal\", setPal, true, [ \"pal\" ] );\n\tg_state.addCommand( \"getPalIndex\", getPalIndex, true, [ \"color\", \"tolerance\" ] );\n\tg_state.addCommand( \"setBgColor\", setBgColor, true, [ \"color\" ] );\n\tg_state.addCommand( \"setContainerBgColor\", setContainerBgColor, true, [ \"color\" ] );\n\tg_state.addCommand( \"setPalColor\", setPalColor, true, [ \"index\", \"color\" ] );\n\tg_state.addCommand( \"getPalColor\", getPalColor, true, [ \"index\" ] );\n}\n\n// Set default pal\nfunction setDefaultPal( options ) {\n\tconst pal = options.pal;\n\n\tif( !Array.isArray( pal ) ) {\n\t\tconst error = new TypeError( \"setDefaultPal: Parameter pal must be an array.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( pal.length === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setDefaultPal: Parameter pal must have at least one color value.\"\n\t\t);\n\t\terror.code = \"EMPTY_PALETTE\";\n\t\tthrow error;\n\t}\n\n\t// Create default pal with the 0'th item set as a black transparent color\n\tm_defaultPal = [ g_utils.convertToColor( [ 0, 0, 0, 0 ] ) ];\n\n\t// Convert palette to color format\n\tfor( let i = 0; i < pal.length; i++ ) {\n\t\tconst c = g_utils.convertToColor( pal[ i ] );\n\t\tif( c === null ) {\n\t\t\tconsole.warn( `setDefaultPal: Invalid color value inside array pal at index: ${i}.` );\n\t\t\tm_defaultPal.push( g_utils.convertToColor( \"#000000\" ) );\n\t\t} else {\n\t\t\tm_defaultPal.push( c );\n\t\t}\n\t}\n\n\t// Set the default pal map\n\tm_defaultPalMap = new Map();\n\tfor( let i = 0; i < m_defaultPal.length; i++ ) {\n\t\tm_defaultPalMap.set( m_defaultPal[ i ].key, i );\n\t}\n\n\t// Make sure default color is in the new palette\n\tif( !m_defaultPalMap.has( m_defaultColor.key ) ) {\n\t\tm_defaultColor = m_defaultPal[ 1 ];\n\t}\n}\n\n// Set default color\nfunction setDefaultColor( options ) {\n\tlet c = options.color;\n\n\tif( !isNaN( Number( c ) ) && m_defaultPal.length > c ) {\n\t\tm_defaultColor = m_defaultPal[ c ];\n\t} else {\n\t\tc = g_utils.convertToColor( c );\n\t\tif( c === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"setDefaultColor: Parameter color is not a valid color format.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tm_defaultColor = c;\n\t}\n}\n\n// Set color\nfunction setColor( screenData, options ) {\n\tconst colorInput = options.color;\n\tconst isAddToPalette = !!options.isAddToPalette;\n\n\tlet colorValue;\n\n\t// If colorInput is an number then get colorValue for pal\n\tif( typeof colorInput === \"number\" ) {\n\t\tif( colorInput >= screenData.pal.length ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t`setColor: Parameter color index is not in pal.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\tcolorValue = screenData.pal[ colorInput ];\n\t} else {\n\n\t\t// Convert the color to a colorValue\n\t\tcolorValue = g_utils.convertToColor( colorInput );\n\n\t\t// If we were unable to convert this color than it is not a valid color format\n\t\tif( colorValue === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t`setColor: Parameter color is not a valid color format.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// If we are adding to palette then we need to do an additional check to see if the color\n\t\t// is already in the palette or not\n\t\tif( isAddToPalette && findColorIndexByColorValue( screenData, colorValue ) === null ) {\n\t\t\tscreenData.pal.push( colorValue );\n\t\t\tscreenData.palMap.set( colorValue.key, screenData.pal.length - 1 );\n\t\t}\n\t}\n\n\t// Update the color values\n\tg_utils.setColor( colorValue, screenData.color );\n\n\treturn true;\n}\n\nfunction getColor( screenData, options ) {\n\tconst asIndex = !!options.asIndex;\n\tif( asIndex ) {\n\t\treturn findColorIndexByColorValue( screenData, screenData.color );\n\t}\n\treturn g_utils.rgbToColor(\n\t\tscreenData.color.r, screenData.color.g, screenData.color.b, screenData.color.a\n\t);\n}\n\n// TODO: Add parameter (include0) to return the 0 item from the pal.\n// Get palette\nfunction getPal( screenData ) {\n\tconst filteredPal = [];\n\n\t// Need to explicitly convert each color because they need to have the \n\tfor( let i = 1; i < screenData.pal.length; i += 1 ) {\n\t\tfilteredPal.push( { ...screenData.pal[ i ] } );\n\t}\n\treturn filteredPal;\n}\n\n// Set entire palette\nfunction setPal( screenData, options ) {\n\tconst pal = options.pal;\n\n\tif( !Array.isArray( pal ) ) {\n\t\tconst error = new TypeError( \"setPal: Parameter pal is must be an array.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( pal.length === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPal: Parameter pal must have at least one color value.\"\n\t\t);\n\t\terror.code = \"EMPTY_PALETTE\";\n\t\tthrow error;\n\t}\n\n\t// Create a new pal with 0'th color set to black transparent\n\tconst newPal = [ g_utils.convertToColor( [ 0, 0, 0, 0 ] ) ];\n\n\t// Convert all colors and validate\n\tfor( let i = 0; i < pal.length; i++ ) {\n\t\tconst c = g_utils.convertToColor( pal[ i ] );\n\t\tif( c === null ) {\n\t\t\tconsole.warn( `setPal: Invalid color value inside array pal at index: ${i}.` );\n\t\t\tnewPal.push( g_utils.convertToColor( \"#000000\" ) );\n\t\t} else {\n\t\t\tnewPal.push( c );\n\t\t}\n\t}\n\n\t// Set the new palette\n\tscreenData.pal = newPal;\n\n\t// Clear the palMap since we've replaced the entire palette\n\tscreenData.palMap = new Map();\n\n\t// Rebuild palMap for new palette colors\n\tfor( let i = 0; i < newPal.length; i++ ) {\n\t\tscreenData.palMap.set( newPal[ i ].key, i );\n\t}\n\n\t// Check if current drawing color needs to be updated\n\t// Find the new palette index that best matches the current color\n\tconst currentColor = screenData.color;\n\tconst newIndex = findColorIndexByColorValue( screenData, currentColor );\n\tif( newIndex !== null ) {\n\t\tscreenData.color = newPal[ newIndex ];\n\t} else {\n\n\t\t// If current color not found, default to palette index 1\n\t\tscreenData.color = newPal[ 1 ];\n\t}\n}\n\n// Get palette index for a color\nfunction getPalIndex( screenData, options ) {\n\tlet color = options.color;\n\tlet tolerance = g_utils.getFloat( options.tolerance, 1 );\n\n\t// Validate tolerance variable\n\tif( tolerance < 0 || tolerance > 1 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"getPalIndex: Parameter tolerance must be a number between 0 and 1.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Convert to color value\n\tconst colorValue = g_utils.convertToColor( color );\n\tif( colorValue === null ) {\n\t\tconst error = new TypeError(\n\t\t\t`getPalIndex: Parameter color is not a valid color format.`\n\t\t);\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n\n\tconst index = findColorIndexByColorValue( screenData, colorValue, tolerance );\n\tif( index === null ) {\n\t\treturn false;\n\t}\n\treturn index;\n}\n\n// Set the background color of the canvas\nfunction setBgColor( screenData, options ) {\n\tconst color = options.color;\n\tlet bc;\n\n\tif( Number.isInteger( color ) ) {\n\t\tbc = screenData.pal[ color ];\n\t} else {\n\t\tbc = g_utils.convertToColor( color );\n\t}\n\tif( bc && typeof bc.hex === \"string\" ) {\n\t\tscreenData.canvas.style.backgroundColor = bc.hex;\n\t} else {\n\t\tconst error = new TypeError( \"setBgColor: invalid color value for parameter color.\" );\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n}\n\n// Set the background color of the container\nfunction setContainerBgColor( screenData, options ) {\n\tconst color = options.color;\n\tlet bc;\n\tif( screenData.container ) {\n\t\tif( Number.isInteger( color ) ) {\n\t\t\tbc = screenData.pal[ color ];\n\t\t} else {\n\t\t\tbc = g_utils.convertToColor( color );\n\t\t}\n\t\tif( bc && typeof bc.hex === \"string\" ) {\n\t\t\tscreenData.container.style.backgroundColor = bc.hex;\n\t\t\treturn;\n\t\t} else {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"setContainerBgColor: invalid color value for parameter color.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COLOR\";\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\n// Set palette color\nfunction setPalColor( screenData, options ) {\n\tconst index = options.index;\n\tconst color = options.color;\n\n\t// index must be an integer\n\tif(\n\t\t!Number.isInteger( index ) ||\n\t\tindex < 0 ||\n\t\tindex >= screenData.pal.length\n\t) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPalColor: Parameter index must be an integer value.\"\n\t\t);\n\t\terror.code = \"INVALID_INDEX\";\n\t\tthrow error;\n\t}\n\n\t// index cannot be 0\n\tif( index === 0 ) {\n\t\tconst error = new RangeError(\n\t\t\t\"setPalColor: Parameter index cannot be 0, this is reserved for transparency. To set \" +\n\t\t\t\"background color of the screen use the setBgColor command.\"\n\t\t);\n\t\terror.code = \"INVALID_INDEX\";\n\t\tthrow error;\n\t}\n\n\t// Get the color value\n\tconst colorValue = g_utils.convertToColor( color );\n\tif( colorValue === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"setPalColor: Parameter color is not a valid color format.\"\n\t\t);\n\t\terror.code = \"INVALID_COLOR\";\n\t\tthrow error;\n\t}\n\n\t// Store the old color before replacing\n\tconst oldColor = screenData.pal[ index ];\n\n\t// Check if we are changing the current selected fore color\n\tif( screenData.color.key === oldColor.key ) {\n\t\tscreenData.color = colorValue;\n\t}\n\n\t// Set the new palette color\n\tscreenData.pal[ index ] = colorValue;\n\n\t// Update the palMap - remove old color entry and add new one\n\tscreenData.palMap.delete( oldColor.key );\n\tscreenData.palMap.set( colorValue.key, index );\n}\n\nfunction getPalColor( screenData, options ) {\n\tconst index = options.index;\n\n\tif( screenData.pal[ index ] ) {\n\t\tconst color = screenData.pal[ index ];\n\t\treturn g_utils.rgbToColor( color.r, color.g, color.b, color.a );\n\t}\n\treturn null;\n}\n\n// TODO: Implement replaceColors and replacePalColors commands\n// These require special planning for WebGL2 implementation\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\nexport function getColorValueByRawInput( screenData, rawInput ) {\n\tlet colorValue;\n\n\t// If it is an integer than get from pal array\n\tif( Number.isInteger( rawInput ) ) {\n\t\tif( rawInput >= screenData.pal.length ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn screenData.pal[ rawInput ];\n\t}\n\t\n\t// Convert to a color value\n\tcolorValue = g_utils.convertToColor( rawInput );\n\n\treturn colorValue;\n}\n\n// Finds a color index without adding it to palette\nexport function findColorIndexByColorValue( screenData, color, tolerance = 1 ) {\n\n\t// First check by key - fastest lookup\n\tif( screenData.palMap.has( color.key ) ) {\n\t\treturn screenData.palMap.get( color.key );\n\t}\n\n\t// Max color difference constant\n\tconst maxDifference = ( 255 * 255 ) * 3.25;\n\tconst minSimularity = tolerance * ( 2 - tolerance ) * maxDifference;\n\n\t// Collect all matches meeting the target similarity, then return the most similar\n\tlet bestMatchIndex = null;\n\tlet bestMatchSimularity = 0;\n\tfor( let i = 0; i < screenData.pal.length; i++ ) {\n\t\tconst palColor = screenData.pal[ i ];\n\t\tif( palColor.key === color.key ) {\n\n\t\t\t// Exact match found; this is the best possible\n\t\t\treturn i;\n\t\t}\n\n\t\tlet difference;\n\n\t\t// Special case for color 0: weight alpha higher for transparent color\n\t\tif( i === 0 ) {\n\t\t\tdifference = g_utils.calcColorDifference( palColor, color, [ 0.2, 0.2, 0.2, 0.4 ] );\n\t\t} else {\n\t\t\tdifference = g_utils.calcColorDifference( palColor, color );\n\t\t}\n\n\t\tconst similarity = maxDifference - difference;\n\t\tif( similarity >= minSimularity ) {\n\t\t\tif( similarity > bestMatchSimularity ) {\n\t\t\t\tbestMatchIndex = i;\n\t\t\t\tbestMatchSimularity = similarity;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bestMatchIndex;\n}\n\nexport function getColorValueByIndex( screenData, palIndex ) {\n\tif( palIndex >= screenData.pal.length ) {\n\t\treturn null;\n\t}\n\treturn screenData.pal[ palIndex ];\n}\n", "/**\n * Pi.js - Primitives Graphics Module\n * \n * Primitive Graphics Commands: pset, line, arc, bezier.\n * \n * @important NO INIT REQUIRED, DO NOT INCLUDE IN index.js.\n * @module graphics/primitives\n */\n\n\"use strict\";\n\n// Module Imports\nimport * as g_screenManager from \"../core/screen-manager.js\";\n\n// List of commands\nexport const commandNames = [ \"pset\", \"lines\", \"arc\", \"bezier\" ];\n\n// Build the Primitives API\nexport function buildApi(\n\ts_api, s_screenData, s_penFn, s_isObjectLiteral, s_getInt, s_getImageData, s_color,\n\ts_setImageDirty, s_prepareBatch, s_batchType, s_pixelsPerPen\n) {\n\n\n\t/**********************************************************\n\t * PSET\n\t **********************************************************/\n\n\n\t// Set the preprocess method\n\tlet s_preprocessPset;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessPset = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessPset = ( screenData ) => s_prepareBatch(\n\t\t\tscreenData, s_batchType, s_pixelsPerPen\n\t\t);\n\t}\n\n\tconst psetFn = ( x, y ) => {\n\t\tlet pX, pY;\n\n\t\t// Parse object if needed\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t}\n\n\t\t// Make sure x and y are integers\n\t\tif( pX === null || pY === null ) {\n\t\t\tconst error = new TypeError( \"pset: Parameters x and y must be integers.\" );\n\t\t\terror.code = \"INVALID_PARAMETER\";\n\t\t\tthrow error;\n\t\t}\n\t\ts_preprocessPset( s_screenData );\n\t\ts_penFn( s_screenData, pX, pY, s_color );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.pset = psetFn\n\ts_screenData.api.pset = psetFn;\n\n\n\t/**********************************************************\n\t * LINE\n\t **********************************************************/\n\t\n\tlet s_preprocessLine;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessLine = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessLine = ( screenData, x1, y1, x2, y2 ) => {\n\t\t\tconst dx = x2 - x1;\n\t\t\tconst dy = y2 - y1;\n\t\t\tconst lineLen = Math.round( Math.sqrt( dx * dx + dy * dy ) ) + 1;\n\t\t\ts_prepareBatch( screenData, s_batchType, lineLen * s_pixelsPerPen );\n\t\t};\n\t}\n\t\n\tconst lineFn = ( x1, y1, x2, y2 ) => {\n\t\tlet px1, py1, px2, py2;\n\n\t\tif( s_isObjectLiteral( x1 ) ) {\n\t\t\tpx1 = s_getInt( x1.x1, null );\n\t\t\tpy1 = s_getInt( x1.y1, null );\n\t\t\tpx2 = s_getInt( x1.x2, null );\n\t\t\tpy2 = s_getInt( x1.y2, null );\n\t\t} else {\n\t\t\tpx1 = s_getInt( x1, null );\n\t\t\tpy1 = s_getInt( y1, null );\n\t\t\tpx2 = s_getInt( x2, null );\n\t\t\tpy2 = s_getInt( y2, null );\n\t\t}\n\n\t\t// Make sure x and y are integers\n\t\tif( px1 === null || py1 === null || px2 === null || py2 === null ) {\n\t\t\tconst error = new TypeError( \"line: Parameters x1, y1, x2, and y2 must be integers.\" );\n\t\t\terror.code = \"INVALID_COORDINATES\";\n\t\t\tthrow error;\n\t\t}\n\n\t\ts_preprocessLine( s_screenData, px1, py1, px2, py2 );\n\t\tm_line( s_screenData, px1, py1, px2, py2, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.line = lineFn;\n\ts_screenData.api.line = lineFn;\n\n\n\t/**********************************************************\n\t * ARC (outline only)\n\t **********************************************************/\n\n\tlet s_preprocessArcOutline;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessArcOutline = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessArcOutline = ( screenData, radius, spanDeg ) => {\n\t\t\t\n\t\t\t// Estimate number of pixels as portion of circumference\n\t\t\tconst span = Math.max( 0, Math.min( 360, spanDeg ) );\n\t\t\tconst perimeterPixels = Math.max(\n\t\t\t\t1,\n\t\t\t\tMath.round( 2 * Math.PI * radius * ( span / 360 ) )\n\t\t\t);\n\t\t\ts_prepareBatch( screenData, s_batchType, perimeterPixels * s_pixelsPerPen );\n\t\t};\n\t}\n\n\tconst arcFn = ( x, y, radius, angle1, angle2 ) => {\n\t\tlet pX, pY, pRadius, pAngle1, pAngle2;\n\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t\tpRadius = s_getInt( x.radius, null );\n\t\t\tpAngle1 = s_getInt( x.angle1, null );\n\t\t\tpAngle2 = s_getInt( x.angle2, null );\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t\tpRadius = s_getInt( radius, null );\n\t\t\tpAngle1 = s_getInt( angle1, null );\n\t\t\tpAngle2 = s_getInt( angle2, null );\n\t\t}\n\n\t\tif(\n\t\t\tpX === null || pY === null || pRadius === null ||\n\t\t\tpAngle1 === null || pAngle2 === null\n\t\t) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"arc: Parameters x1, y1, radius, angle1, and angle2 must be integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETERS\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Normalize angles to 0..360\n\t\tpAngle1 = ( pAngle1 + 360 ) % 360;\n\t\tpAngle2 = ( pAngle2 + 360 ) % 360;\n\t\tconst winding = pAngle1 > pAngle2;\n\n\t\t// Nothing to draw\n\t\tif( pRadius < 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Single point\n\t\tif( pRadius === 0 ) {\n\t\t\ts_preprocessArcOutline( s_screenData, 1, 0 );\n\t\t\ts_penFn( s_screenData, pX, pY, s_color );\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\t// Compute angle span for batching (approximate)\n\t\tlet spanDeg;\n\t\tif( winding ) {\n\t\t\tspanDeg = ( 360 - pAngle1 ) + pAngle2;\n\t\t} else {\n\t\t\tspanDeg = pAngle2 - pAngle1;\n\t\t}\n\n\t\ts_preprocessArcOutline( s_screenData, pRadius, spanDeg );\n\t\tm_arcOutline( s_screenData, pX, pY, pRadius, pAngle1, pAngle2, winding, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.arc = arcFn;\n\ts_screenData.api.arc = arcFn;\n\n\n\t/**********************************************************\n\t * BEZIER (cubic, outline)\n\t **********************************************************/\n\n\tlet s_preprocessBezierOutline;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessBezierOutline = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessBezierOutline = ( screenData, p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y ) => {\n\n\t\t\t// Approximate curve length by control polygon length\n\t\t\tconst d01 = Math.hypot( p1x - p0x, p1y - p0y );\n\t\t\tconst d12 = Math.hypot( p2x - p1x, p2y - p1y );\n\t\t\tconst d23 = Math.hypot( p3x - p2x, p3y - p2y );\n\t\t\tconst approxLen = Math.max( 1, Math.round( d01 + d12 + d23 ) );\n\t\t\ts_prepareBatch( screenData, s_batchType, approxLen * s_pixelsPerPen );\n\t\t};\n\t}\n\n\tconst bezierFn = ( xStart, yStart, x1, y1, x2, y2, xEnd, yEnd ) => {\n\t\tlet p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y;\n\n\t\tif( s_isObjectLiteral( xStart ) ) {\n\t\t\tp0x = s_getInt( xStart.xStart, null );\n\t\t\tp0y = s_getInt( xStart.yStart, null );\n\t\t\tp1x = s_getInt( xStart.x1, null );\n\t\t\tp1y = s_getInt( xStart.y1, null );\n\t\t\tp2x = s_getInt( xStart.x2, null );\n\t\t\tp2y = s_getInt( xStart.y2, null );\n\t\t\tp3x = s_getInt( xStart.xEnd, null );\n\t\t\tp3y = s_getInt( xStart.yEnd, null );\n\t\t} else {\n\t\t\tp0x = s_getInt( xStart, null );\n\t\t\tp0y = s_getInt( yStart, null );\n\t\t\tp1x = s_getInt( x1, null );\n\t\t\tp1y = s_getInt( y1, null );\n\t\t\tp2x = s_getInt( x2, null );\n\t\t\tp2y = s_getInt( y2, null );\n\t\t\tp3x = s_getInt( xEnd, null );\n\t\t\tp3y = s_getInt( yEnd, null );\n\t\t}\n\n\t\tif(\n\t\t\tp0x === null || p0y === null || p1x === null || p1y === null ||\n\t\t\tp2x === null || p2y === null || p3x === null || p3y === null\n\t\t) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"bezier: Parameters xStart, yStart, x1, y1, x2, y2, xEnd, and yEnd must be \" +\n\t\t\t\t\"integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_PARAMETERS\";\n\t\t\tthrow error;\n\t\t}\n\n\t\ts_preprocessBezierOutline(\n\t\t\ts_screenData, p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y\n\t\t);\n\t\tm_bezierOutline( s_screenData, p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.bezier = bezierFn;\n\ts_screenData.api.bezier = bezierFn;\n}\n\n\n/***************************************************************************************************\n * Hot Paths\n **************************************************************************************************/\n\n/**********************************************************\n * LINE\n **********************************************************/\n\nfunction m_line( screenData, x1, y1, x2, y2, color, penFn ) {\n\t\n\tconst dx = Math.abs( x2 - x1 );\n\tconst dy = Math.abs( y2 - y1 );\n\n\t// Set the slopes\n\tlet sx = x1 < x2 ? 1 : -1;\n\tlet sy = y1 < y2 ? 1 : -1;\n\t\n\t// Set the err\n\tlet err = dx - dy;\n\n\t// Draw the first pixel\n\tpenFn( screenData, x1, y1, color );\n\n\t// Loop until the end of the line\n\twhile( !( ( x1 === x2 ) && ( y1 === y2 ) ) ) {\n\t\tconst e2 = err << 1;\n\n\t\tif( e2 > -dy ) {\n\t\t\terr -= dy;\n\t\t\tx1 += sx;\n\t\t}\n\n\t\tif( e2 < dx ) {\n\t\t\terr += dx;\n\t\t\ty1 += sy;\n\t\t}\n\n\t\t// Set the next pixel\n\t\tpenFn( screenData, x1, y1, color );\n\t}\n}\n\n/**********************************************************\n * ARC\n **********************************************************/\n\nfunction m_arcOutline(\n\tscreenData, cx, cy, radius, angle1, angle2, winding, color, penFn\n) {\n\n\t// Helper to test angle gate and set pixel\n\tfunction setPixel( px, py ) {\n\t\tlet a = Math.atan2( py - cy, px - cx ) * ( 180 / Math.PI );\n\t\ta = ( a + 360 ) % 360;\n\t\tif( winding ) {\n\t\t\tif( a >= angle1 || a <= angle2 ) {\n\t\t\t\tpenFn( screenData, px, py, color );\n\t\t\t}\n\t\t} else if( a >= angle1 && a <= angle2 ) {\n\t\t\tpenFn( screenData, px, py, color );\n\t\t}\n\t}\n\n\t// Midpoint circle algorithm drawing only points within arc angles\n\tlet x = radius;\n\tlet y = 0;\n\tlet err = 1 - x;\n\n\t// Draw initial symmetrical points\n\tsetPixel( cx + x, cy + y );\n\tsetPixel( cx - x, cy + y );\n\tsetPixel( cx + y, cy + x );\n\tsetPixel( cx + y, cy - x );\n\n\twhile( x >= y ) {\n\t\ty++;\n\t\tif( err < 0 ) {\n\t\t\terr += 2 * y + 1;\n\t\t} else {\n\t\t\tx--;\n\t\t\terr += 2 * ( y - x ) + 1;\n\t\t}\n\n\t\tsetPixel( cx + x, cy + y );\n\t\tsetPixel( cx + y, cy + x );\n\t\tsetPixel( cx - y, cy + x );\n\t\tsetPixel( cx - x, cy + y );\n\t\tsetPixel( cx - x, cy - y );\n\t\tsetPixel( cx - y, cy - x );\n\t\tsetPixel( cx + y, cy - x );\n\t\tsetPixel( cx + x, cy - y );\n\t}\n}\n\n/**********************************************************\n * BEZIER (cubic, outline)\n **********************************************************/\n\nfunction m_bezierOutline(\n\tscreenData, p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y, color, penFn\n) {\n\n\tfunction bezierPoint( t ) {\n\t\tconst u = 1 - t;\n\t\tconst uu = u * u;\n\t\tconst uuu = uu * u;\n\t\tconst tt = t * t;\n\t\tconst ttt = tt * t;\n\n\t\tconst x = Math.round(\n\t\t\tuuu * p0x + 3 * uu * t * p1x + 3 * u * tt * p2x + ttt * p3x\n\t\t);\n\t\tconst y = Math.round(\n\t\t\tuuu * p0y + 3 * uu * t * p1y + 3 * u * tt * p2y + ttt * p3y\n\t\t);\n\t\treturn { \"x\": x, \"y\": y };\n\t}\n\n\tfunction distance( a, b ) {\n\t\tconst dx = a.x - b.x;\n\t\tconst dy = a.y - b.y;\n\t\treturn Math.sqrt( dx * dx + dy * dy );\n\t}\n\n\tlet lastPoint = bezierPoint( 0 );\n\tpenFn( screenData, lastPoint.x, lastPoint.y, color );\n\n\tlet t = 0.1;\n\tlet dt = 0.1;\n\tconst minDistance = 1;\n\n\twhile( t < 1 ) {\n\t\tconst point = bezierPoint( t );\n\t\tconst d = distance( point, lastPoint );\n\n\t\tif( d > minDistance && dt > 0.00001 ) {\n\t\t\tt -= dt;\n\t\t\tdt = dt * 0.75;\n\t\t} else {\n\t\t\tpenFn( screenData, point.x, point.y, color );\n\t\t\tlastPoint = point;\n\t\t}\n\t\tt += dt;\n\t}\n\n\tconst endPoint = bezierPoint( 1 );\n\tpenFn( screenData, endPoint.x, endPoint.y, color );\n}\n", "/**\n * Pi.js - Shapes Graphics Module\n * \n * Shapes Graphics Commands: rect, circle, ellipse.\n * \n * @important NO INIT REQUIRED, DO NOT INCLUDE IN index.js.\n * @module graphics/shapes\n */\n\n\"use strict\";\n\n// Module Imports\nimport * as g_screenManager from \"../core/screen-manager.js\";\nexport const commandNames = [ \"rect\", \"circle\", \"ellipse\" ];\n\n// Build the Shapes API\nexport function buildApi(\n\ts_api, s_screenData, s_penFn, s_blendFn, s_isObjectLiteral, s_getInt, s_getImageData, s_color,\n\ts_setImageDirty, s_prepareBatch, s_batchType, s_pixelsPerPen, s_screenWidth, s_screenHeight,\n\ts_penSize, s_penHalfSize, s_getColorValueByRawInput\n) {\n\n\n\t/**********************************************************\n\t * RECT\n\t **********************************************************/\n\n\n\tlet s_preprocessRectOutline;\n\tlet s_preprocessRectFilled;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessRectOutline = s_getImageData;\n\t\ts_preprocessRectFilled = s_getImageData;\n\t} else {\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessRectOutline = ( screenData, width, height ) => {\n\t\t\tlet perimeterPixels = width * 2 + height * 2;\n\t\t\ts_prepareBatch( screenData, s_batchType, perimeterPixels * s_pixelsPerPen );\n\t\t};\n\n\t\t// screenData passed in for consistency\n\t\ts_preprocessRectFilled = ( screenData, width, height ) => {\n\t\t\tconst areaPixels = width * height;\n\t\t\ts_prepareBatch( screenData, s_batchType, areaPixels * s_pixelsPerPen );\n\t\t};\n\t}\n\n\tconst rectFn = ( x, y, width, height, fillColor ) => {\n\t\tlet pX, pY, pFillColor, pWidth, pHeight;\n\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t\tpWidth = s_getInt( x.width, null );\n\t\t\tpHeight = s_getInt( x.height, null );\n\t\t\tpFillColor = x.pFillColor;\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t\tpWidth = s_getInt( width, null );\n\t\t\tpHeight = s_getInt( height, null );\n\t\t\tpFillColor = fillColor;\n\t\t}\n\n\t\tif( pX === null || pY === null || pWidth === null || pHeight === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"rect: Parameters x1, y1, width, and height must be integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COORDINATES\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Return if nothing to draw\n\t\tif( pWidth < 1 || pHeight < 1 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst x2 = pX + pWidth;\n\t\tconst y2 = pY + pHeight;\n\t\tconst fillColorValue = s_getColorValueByRawInput( s_screenData, pFillColor );\n\n\t\tif( fillColorValue !== null && pWidth > s_penSize && pHeight > s_penSize ) {\n\t\t\ts_preprocessRectFilled( s_screenData, pWidth, pHeight );\n\t\t\tm_rectFilled(\n\t\t\t\ts_screenData,\n\t\t\t\tMath.max( pX + s_penHalfSize, 0 ),\n\t\t\t\tMath.max( pY + s_penHalfSize, 0 ),\n\t\t\t\tMath.min( x2 - s_penHalfSize, s_screenWidth - 1 ),\n\t\t\t\tMath.min( y2 - s_penHalfSize, s_screenHeight - 1 ),\n\t\t\t\tfillColorValue,\n\t\t\t\ts_blendFn\n\t\t\t);\n\t\t}\n\t\ts_preprocessRectOutline( s_screenData, pWidth, pHeight );\n\t\tm_rectOutline( s_screenData, pX, pY, x2, y2, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.rect = rectFn;\n\ts_screenData.api.rect = rectFn;\n\n\n\t/**********************************************************\n\t * CIRCLE\n\t **********************************************************/\n\n\n\tlet s_preprocessCircleOutline;\n\tlet s_preprocessCircleFilled;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessCircleOutline = s_getImageData;\n\t\ts_preprocessCircleFilled = s_getImageData;\n\t} else {\n\n\t\t// Keep signature parity with canvas2d path\n\t\ts_preprocessCircleOutline = ( screenData, radius ) => {\n\t\t\tconst perimeterPixels = Math.round( 2 * Math.PI * radius );\n\t\t\ts_prepareBatch(\n\t\t\t\tscreenData, s_batchType, perimeterPixels * s_pixelsPerPen\n\t\t\t);\n\t\t};\n\t\ts_preprocessCircleFilled = ( screenData, radius ) => {\n\t\t\tconst areaPixels = Math.round( Math.PI * radius * radius );\n\t\t\ts_prepareBatch(\n\t\t\t\tscreenData, s_batchType, areaPixels * s_pixelsPerPen\n\t\t\t);\n\t\t};\n\t}\n\n\tconst circleFn = ( x, y, radius, fillColor ) => {\n\t\tlet pX, pY, pRadius, pFillColor;\n\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t\tpRadius = s_getInt( x.radius, null );\n\t\t\tpFillColor = x.pFillColor;\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t\tpRadius = s_getInt( radius, null );\n\t\t\tpFillColor = fillColor;\n\t\t}\n\n\t\tif( pX === null || pY === null || pRadius === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"circle: Parameters x1, y1, and radius must be integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COORDINATES\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Nothing to draw\n\t\tif( pRadius < 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Single point\n\t\tif( pRadius === 0 ) {\n\t\t\t\n\t\t\t// Reusing this for a single pixel\n\t\t\ts_preprocessRectFilled( s_screenData, 1, 1 );\n\t\t\ts_penFn( s_screenData, pX, pY, s_color );\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\tconst fillColorValue = s_getColorValueByRawInput( s_screenData, pFillColor );\n\n\t\tif( fillColorValue !== null && pRadius > s_penSize ) {\n\t\t\ts_preprocessCircleFilled( s_screenData, pRadius );\n\t\t\tm_circleFilled(\n\t\t\t\ts_screenData, pX, pY, pRadius, fillColorValue,\n\t\t\t\ts_blendFn, s_screenWidth - 1, s_screenHeight - 1\n\t\t\t);\n\t\t}\n\n\t\ts_preprocessCircleOutline( s_screenData, pRadius );\n\t\tm_circleOutline( s_screenData, pX, pY, pRadius, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.circle = circleFn;\n\ts_screenData.api.circle = circleFn;\n\n\n\t/**********************************************************\n\t * ELLIPSE\n\t **********************************************************/\n\n\n\tlet s_preprocessEllipseOutline;\n\tlet s_preprocessEllipseFilled;\n\tif( s_screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\t\ts_preprocessEllipseOutline = s_getImageData;\n\t\ts_preprocessEllipseFilled = s_getImageData;\n\t} else {\n\n\t\t// Keep signature parity with canvas2d path\n\t\ts_preprocessEllipseOutline = ( screenData, rx, ry ) => {\n\n\t\t\t// Ramanujan perimeter approximation P \u2248 2\u03C0 * sqrt( (rx^2 + ry^2) / 2 )\n\t\t\tconst perimeterPixels = Math.round(\n\t\t\t\t2 * Math.PI * Math.sqrt( ( rx * rx + ry * ry ) / 2 )\n\t\t\t);\n\t\t\ts_prepareBatch( screenData, s_batchType, perimeterPixels * s_pixelsPerPen );\n\t\t};\n\t\ts_preprocessEllipseFilled = ( screenData, rx, ry ) => {\n\t\t\tconst areaPixels = Math.round( Math.PI * rx * ry );\n\t\t\ts_prepareBatch( screenData, s_batchType, areaPixels * s_pixelsPerPen );\n\t\t};\n\t}\n\n\tconst ellipseFn = ( x, y, rx, ry, fillColor ) => {\n\t\tlet pX, pY, pRx, pRy, pFillColor;\n\n\t\tif( s_isObjectLiteral( x ) ) {\n\t\t\tpX = s_getInt( x.x1, null );\n\t\t\tpY = s_getInt( x.y1, null );\n\t\t\tpRx = s_getInt( x.rx, null );\n\t\t\tpRy = s_getInt( x.ry, null );\n\t\t\tpFillColor = x.pFillColor;\n\t\t} else {\n\t\t\tpX = s_getInt( x, null );\n\t\t\tpY = s_getInt( y, null );\n\t\t\tpRx = s_getInt( rx, null );\n\t\t\tpRy = s_getInt( ry, null );\n\t\t\tpFillColor = fillColor;\n\t\t}\n\n\t\tif( pX === null || pY === null || pRx === null || pRy === null ) {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"ellipse: Parameters x1, y1, rx, and ry must be integers.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_COORDINATES\";\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Nothing to draw\n\t\tif( pRx < 0 || pRy < 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Single point\n\t\tif( pRx === 0 && pRy === 0 ) {\n\t\t\ts_preprocessEllipseOutline( s_screenData, 1, 1 );\n\t\t\ts_penFn( s_screenData, pX, pY, s_color );\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\t// Degenerate into line when one radius is 0\n\t\tif( pRx === 0 ) {\n\t\t\ts_preprocessEllipseOutline( s_screenData, 1, pRy );\n\t\t\tlet y1 = pY - pRy;\n\t\t\tconst y2 = pY + pRy;\n\t\t\twhile( y1 <= y2 ) {\n\t\t\t\ts_penFn( s_screenData, pX, y1, s_color );\n\t\t\t\ty1++;\n\t\t\t}\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\tif( pRy === 0 ) {\n\t\t\ts_preprocessEllipseOutline( s_screenData, pRx, 1 );\n\t\t\tlet x1 = pX - pRx;\n\t\t\tconst x2 = pX + pRx;\n\t\t\twhile( x1 <= x2 ) {\n\t\t\t\ts_penFn( s_screenData, x1, pY, s_color );\n\t\t\t\tx1++;\n\t\t\t}\n\t\t\ts_setImageDirty( s_screenData );\n\t\t\treturn;\n\t\t}\n\n\t\tconst fillColorValue = s_getColorValueByRawInput( s_screenData, pFillColor );\n\n\t\tif( fillColorValue !== null && pRx > s_penSize && pRy > s_penSize ) {\n\t\t\ts_preprocessEllipseFilled( s_screenData, pRx, pRy );\n\t\t\tm_ellipseFilled(\n\t\t\t\ts_screenData, pX, pY, pRx, pRy, fillColorValue, s_blendFn,\n\t\t\t\ts_screenWidth - 1, s_screenHeight - 1\n\t\t\t);\n\t\t}\n\n\t\ts_preprocessEllipseOutline( s_screenData, pRx, pRy );\n\t\tm_ellipseOutline( s_screenData, pX, pY, pRx, pRy, s_color, s_penFn );\n\t\ts_setImageDirty( s_screenData );\n\t};\n\ts_api.ellipse = ellipseFn;\n\ts_screenData.api.ellipse = ellipseFn;\n\n}\n\n\n/***************************************************************************************************\n * Hot Paths\n **************************************************************************************************/\n\n\n/**********************************************************\n * RECT\n **********************************************************/\n\n\nfunction m_rectOutline( screenData, x1, y1, x2, y2, color, penFn ) {\n\n\t// Single point\n\tif( x1 === x2 && y1 === y2 ) {\n\t\tpenFn( screenData, x1, y1, color );\n\t\treturn;\n\t}\n\n\t// Horizontal line\n\tif( y1 === y2 ) {\n\t\tlet x = x1;\n\t\twhile( x <= x2 ) {\n\t\t\tpenFn( screenData, x, y1, color );\n\t\t\tx++;\n\t\t}\n\t\treturn;\n\t}\n\n\t// Verticle line\n\tif( x1 === x2 ) {\n\t\tlet y = y1;\n\t\twhile( y <= y2 ) {\n\t\t\tpenFn( screenData, x1, y, color );\n\t\t\ty++;\n\t\t}\n\t\treturn;\n\t}\n\n\tlet x;\n\tlet y;\n\n\tx = x1;\n\twhile( x <= x2 ) {\n\t\tpenFn( screenData, x, y1, color );\n\t\tx++;\n\t}\n\n\tx = x1;\n\twhile( x <= x2 ) {\n\t\tpenFn( screenData, x, y2, color );\n\t\tx++;\n\t}\n\n\ty = y1 + 1;\n\twhile( y < y2 ) {\n\t\tpenFn( screenData, x1, y, color );\n\t\tpenFn( screenData, x2, y, color );\n\t\ty++;\n\t}\n}\n\nfunction m_rectFilled( screenData, x1, y1, x2, y2, color, blendFn ) {\n\tlet y = y1;\n\twhile( y <= y2 ) {\n\t\tlet x = x1;\n\t\twhile( x <= x2 ) {\n\t\t\tblendFn( screenData, x, y, color );\n\t\t\tx++;\n\t\t}\n\t\ty++;\n\t}\n}\n\n\n/**********************************************************\n * CIRCLE\n **********************************************************/\n\n\nfunction m_circleOutline( screenData, cx, cy, radius, color, penFn ) {\n\n\t// Midpoint circle algorithm (8-way symmetry)\n\tlet x = radius;\n\tlet y = 0;\n\tlet err = 1 - x;\n\n\twhile( x >= y ) {\n\t\tpenFn( screenData, cx + x, cy + y, color );\n\t\tpenFn( screenData, cx + y, cy + x, color );\n\t\tpenFn( screenData, cx - y, cy + x, color );\n\t\tpenFn( screenData, cx - x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy - y, color );\n\t\tpenFn( screenData, cx - y, cy - x, color );\n\t\tpenFn( screenData, cx + y, cy - x, color );\n\t\tpenFn( screenData, cx + x, cy - y, color );\n\n\t\ty++;\n\t\tif( err < 0 ) {\n\t\t\terr += 2 * y + 1;\n\t\t} else {\n\t\t\tx--;\n\t\t\terr += 2 * ( y - x ) + 1;\n\t\t}\n\t}\n}\n\nfunction m_circleFilled( screenData, cx, cy, radius, color, blendFn, maxX, maxY ) {\n\tfor( let dy = -radius; dy <= radius; dy++ ) {\n\t\tconst y = cy + dy;\n\t\tif( y < 0 || y > maxY ) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst dxMax = Math.floor( Math.sqrt( radius * radius - dy * dy ) );\n\t\tlet x = Math.max( cx - dxMax, 0 );\n\t\tconst xEnd = Math.min( cx + dxMax, maxX );\n\t\twhile( x <= xEnd ) {\n\t\t\tblendFn( screenData, x, y, color );\n\t\t\tx++;\n\t\t}\n\t}\n}\n\n\n/**\n * ELLIPSE\n */\n\n\nfunction m_ellipseOutline( screenData, cx, cy, rx, ry, color, penFn ) {\n\n\t// Midpoint ellipse algorithm\n\tlet x = 0;\n\tlet y = ry;\n\n\tconst rx2 = rx * rx;\n\tconst ry2 = ry * ry;\n\tlet dx = 2 * ry2 * x;\n\tlet dy = 2 * rx2 * y;\n\n\t// Region 1\n\tlet p1 = ry2 - rx2 * ry + 0.25 * rx2;\n\twhile( dx < dy ) {\n\n\t\t// 4-way symmetry\n\t\tpenFn( screenData, cx + x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy - y, color );\n\t\tpenFn( screenData, cx + x, cy - y, color );\n\n\t\tx++;\n\t\tdx += 2 * ry2;\n\t\tif( p1 < 0 ) {\n\t\t\tp1 += ry2 + dx;\n\t\t} else {\n\t\t\ty--;\n\t\t\tdy -= 2 * rx2;\n\t\t\tp1 += ry2 + dx - dy;\n\t\t}\n\t}\n\n\t// Region 2\n\tlet p2 = ry2 * ( x + 0.5 ) * ( x + 0.5 ) + rx2 * ( y - 1 ) * ( y - 1 ) - rx2 * ry2;\n\twhile( y >= 0 ) {\n\n\t\t// 4-way symmetry\n\t\tpenFn( screenData, cx + x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy + y, color );\n\t\tpenFn( screenData, cx - x, cy - y, color );\n\t\tpenFn( screenData, cx + x, cy - y, color );\n\n\t\ty--;\n\t\tdy -= 2 * rx2;\n\t\tif( p2 > 0 ) {\n\t\t\tp2 += rx2 - dy;\n\t\t} else {\n\t\t\tx++;\n\t\t\tdx += 2 * ry2;\n\t\t\tp2 += rx2 - dy + dx;\n\t\t}\n\t}\n}\n\nfunction m_ellipseFilled( screenData, cx, cy, rx, ry, color, blendFn, maxX, maxY ) {\n\tfor( let dy = -ry; dy <= ry; dy++ ) {\n\t\tconst y = cy + dy;\n\t\tif( y < 0 || y > maxY ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Compute x extent for this scanline\n\t\tconst t = 1 - ( dy * dy ) / ( ry * ry );\n\t\tconst dxMax = t <= 0 ? 0 : Math.floor( rx * Math.sqrt( t ) );\n\t\tlet x = Math.max( cx - dxMax, 0 );\n\t\tconst xEnd = Math.min( cx + dxMax, maxX );\n\t\twhile( x <= xEnd ) {\n\t\t\tblendFn( screenData, x, y, color );\n\t\t\tx++;\n\t\t}\n\t}\n}\n", "#version 300 es\nin vec2 a_position;\nin vec4 a_color;\nuniform vec2 u_resolution;\nout vec4 v_color;\n\nvoid main() {\n\n\t// Convert screen coords to NDC with pixel center adjustment\n\t// Add 0.5 to center the pixel, then convert to NDC\n\tvec2 pixelCenter = a_position + 0.5;\n\tvec2 ndc = ((pixelCenter / u_resolution) * 2.0 - 1.0) * vec2(1.0, -1.0);\n\tgl_Position = vec4(ndc, 0.0, 1.0);\n\tgl_PointSize = 1.0;\n\tv_color = a_color;\n}", "#version 300 es\nprecision mediump float;\nin vec4 v_color;\nout vec4 fragColor;\n\nvoid main() {\n\t\n\t// The fragColor will always be the straight alpha v_color.\n\t// The blend state (enabled/disabled) will determine how it's written.\n\tfragColor = v_color;\n}", "#version 300 es\nin vec4 a_position;\nin vec4 a_color;\nin vec2 a_texCoord;\n\nuniform vec2 u_resolution;\n\nout vec4 v_color;\nout vec2 v_texCoord;\n\nvoid main() {\n\t\n\t// Convert from pixel space (0 to u_resolution) to clip space (-1 to 1)\n\tvec2 zeroToOne = a_position.xy / u_resolution;\n\tvec2 zeroToTwo = zeroToOne * 2.0;\n\tvec2 clipSpace = zeroToTwo - 1.0;\n\n\t// Flip the Y-coordinate to match standard 2D graphics (top-left origin)\n\t// In WebGL, +Y is typically up, but for 2D, we want +Y down.\n\tgl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n\n\tv_color = a_color;\n\tv_texCoord = a_texCoord;\n}", "#version 300 es\nprecision highp float;\n\nin vec4 v_color;\nin vec2 v_texCoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n\n\t// Sample the color from the texture at the given texture coordinates\n\tvec4 texColor = texture(u_texture, v_texCoord);\n\n\t// Multiply the texture color by the vertex color (which can be used for tinting/alpha)\n\t// If v_color is white (1,1,1,1), it will just use the texColor.\n\toutColor = texColor * v_color;\n}", "#version 300 es\nin vec2 a_position;\nout vec2 v_texCoord;\n\nvoid main() {\n\tgl_Position = vec4(a_position, 0.0, 1.0);\n\n\t// Flip Y coordinate when sampling texture\n\tv_texCoord = (a_position + 1.0) * 0.5;\n}", "#version 300 es\nprecision mediump float;\nin vec2 v_texCoord;\nuniform sampler2D u_texture;\nout vec4 fragColor;\n\nvoid main() {\n\tvec4 texColor = texture(u_texture, v_texCoord);\n\t\n\t// The FBO already contains STRAIGHT ALPHA, so just output it directly.\n\tfragColor = texColor;\n}", "/**\n * Pi.js - Canvas2D Renderer Core Module\n * \n * 2D Canvas rendering with ImageData manipulation for pixel-perfect rendering.\n * Fallback renderer when WebGL2 is not available.\n * \n * @module graphics/renderer-canvas2d\n */\n\n\"use strict\";\n\nimport * as g_utils from \"../core/utils.js\";\n\n// Auto-render state\nlet m_autoRenderScheduled = false;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\t\n\t// Initialize will be called per screen\n}\n\nexport function cleanup( screenData ) {\n\tscreenData.context = null;\n\tscreenData.canvas = null;\n\tscreenData.imageData = null;\n\tscreenData.bufferCanvas = null;\n\tscreenData.bufferContext = null;\n}\n\n\n/***************************************************************************************************\n * Canvas2D Initialization\n **************************************************************************************************/\n\n\n/**\n * Initialize 2D Canvas context\n * \n * @param {Object} screenData - Screen data object\n */\nexport function initCanvas2D( screenData ) {\n\t\n\tconst context = screenData.canvas.getContext( \"2d\", { \"willReadFrequently\": true } );\n\t\n\tif( !context ) {\n\t\treturn null;\n\t}\n\t\n\t// Setup canvas for pixel-perfect rendering\n\tcontext.imageSmoothingEnabled = false;\n\t\n\t// Create ImageData for pixel manipulation\n\tscreenData.imageData = context.createImageData( screenData.width, screenData.height );\n\tscreenData.context = context;\n\tscreenData.bufferCanvas = null;\n\tscreenData.bufferContext = null;\n\n\treturn true;\n}\n\n\nexport function getImageData( screenData ) {\n\n\t// TODO: getImageData but only if image has been drawn to by context command such\n\t// as drawImage.  Otherwise we shouldn't need to getImageData as it should be up to\n\t// date\n}\n\n/**\n * Queue automatic render\n * \n * @param {Object} screenData - Screen data object\n */\nexport function setImageDirty( screenData ) {\n\tif( !m_autoRenderScheduled ) {\n\t\tm_autoRenderScheduled = true;\n\t\tg_utils.queueMicrotask( () => {\n\t\t\tscreenData.context.putImageData( screenData.imageData, 0, 0 );\n\t\t\tm_autoRenderScheduled = false;\n\t\t} );\n\t}\n}\n\n/**\n * Before screen size has changed\n * \n * @param {Object} screenData - Global screen data object container\n * @param {Object} fromSize - Original size width/height\n */\nexport function beforeResize( screenData, fromSize ) {\n\t\n\tif( screenData.bufferCanvas === null ) {\n\t\tscreenData.bufferCanvas = new OffscreenCanvas( fromSize.width, fromSize.height );\n\t\tscreenData.bufferContext = screenData.bufferCanvas.getContext( \"2d\" );\n\n\t\t// Set a timeout to remove the buffer from memory after 3 second -- saves memory usage\n\t\tsetTimeout( () => {\n\t\t\tscreenData.bufferCanvas = null;\n\t\t\tscreenData.bufferContext = null;\n\t\t}, 3000 );\n\t}\n\n\t// Draw the canvas to the buffer\n\tscreenData.bufferContext.clearRect( 0, 0, fromSize.width, fromSize.height );\n\tscreenData.bufferContext.drawImage( screenData.canvas, 0, 0 );\n\n}\n\n/**\n * After screen size has changed - bufferCanvas is guaranteed because beforeResize is called first\n * in the same thread.\n * \n * @param {Object} screenData - Global screen data object container\n * @param {Object} fromSize - Original size width/height\n * @param {Object} toSize - New size width/height\n */\nexport function afterResize( screenData, fromSize, toSize ) {\n\n\t// Draw the buffer back onto the canvas\n\tscreenData.context.drawImage(\n\t\tscreenData.bufferCanvas, 0, 0, fromSize.width, fromSize.height\n\t);\n\n\t// Clear up memory for buffer canvas\n\tscreenData.bufferCanvas.width = toSize.width;\n\tscreenData.bufferCanvas.height = toSize.height;\n}\n\n\n/***************************************************************************************************\n * Batch Operations\n **************************************************************************************************/\n\n\nexport function cls( screenData, x, y, width, height ) {\n\t\n\t// TODO: Implement clear screen command\n}\n\n\n/**\n * Fast path for direct pixel writes (no bounds check, no blending)\n * \n * @param {Object} screenData - Screen data object\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} r - Red component (0-255)\n * @param {number} g - Green component (0-255)\n * @param {number} b - Blue component (0-255)\n * @param {number} a - Alpha component (0-255)\n */\nexport function drawPixelUnsafe( screenData, x, y, color ) {\n\tconst data = screenData.imageData.data;\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\t\n\tdata[ i ] = color.r;\n\tdata[ i + 1 ] = color.g;\n\tdata[ i + 2 ] = color.b;\n\tdata[ i + 3 ] = color.a;\n}\n\n\nexport function blendPixelUnsafe( screenData, x, y, color ) {\n\tconst data = screenData.imageData.data;\n\n\t// Calculate the index\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\n\t// Normalize alpha to [ 0, 1 ]\n\tconst srcA = color.a / 255;\n\tconst dstA = data[ i + 3 ] / 255;\n\n\t// Apply the blend to the data\n\tdata[ i ]     = Math.round( color.r * srcA + data[ i ] * ( 1 - srcA ) );\n\tdata[ i + 1 ] = Math.round( color.g * srcA + data[ i + 1 ] * ( 1 - srcA ) );\n\tdata[ i + 2 ] = Math.round( color.b * srcA + data[ i + 2 ] * ( 1 - srcA ) );\n\tdata[ i + 3 ] = Math.round( ( srcA + dstA * ( 1 - srcA ) ) * 255 );\n}\n\n\n/***************************************************************************************************\n * Readback Operations\n **************************************************************************************************/\n\n\nexport function readPixel( screenData, x, y ) {\n\n\t// Bounds check\n\tif( x < 0 || y < 0 || x >= screenData.width || y >= screenData.height ) {\n\t\treturn null;\n\t}\n\n\t// For Canvas2D path, screenData.imageData is the source of truth.\n\tconst data = screenData.imageData.data;\n\tconst i = ( ( screenData.width * y ) + x ) * 4;\n\treturn g_utils.rgbToColor( data[ i ], data[ i + 1 ], data[ i + 2 ], data[ i + 3 ] );\n}\n\nexport function readPixelAsync( screenData, x, y ) {\n\treturn Promise.resolve( readPixel( screenData, x, y ) );\n}\n\n\nexport function readPixels( screenData, x, y, width, height ) {\n\n\t// Ensure imageData reflects latest CPU buffer (we render from imageData)\n\tgetImageData( screenData );\n\n\tconst screenWidth = screenData.width;\n\tconst screenHeight = screenData.height;\n\tconst data = screenData.imageData.data;\n\n\t// Build a 2D array [height][width], null for out-of-bounds\n\tconst results = new Array( height );\n\tfor( let row = 0; row < height; row++ ) {\n\t\tconst screenY = y + row;\n\t\tconst isRowOnScreen = ( screenY >= 0 && screenY < screenHeight );\n\t\tconst resultRow = new Array( width );\n\t\tfor( let col = 0; col < width; col++ ) {\n\t\t\tconst screenX = x + col;\n\t\t\tif( isRowOnScreen && screenX >= 0 && screenX < screenWidth ) {\n\t\t\t\tconst i = ( ( screenWidth * screenY ) + screenX ) * 4;\n\t\t\t\tresultRow[ col ] = g_utils.rgbToColor(\n\t\t\t\t\tdata[ i ], data[ i + 1 ], data[ i + 2 ], data[ i + 3 ]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresultRow[ col ] = null;\n\t\t\t}\n\t\t}\n\t\tresults[ row ] = resultRow;\n\t}\n\n\treturn results;\n}\n\nexport function readPixelsAsync( screenData, x, y, width, height ) {\n\treturn Promise.resolve( readPixels( screenData, x, y, width, height ) );\n}\n\n\n/***************************************************************************************************\n * Image Drawing Operations\n **************************************************************************************************/\n\n\n/**\n * Draw an image on the screen\n * \n * @param {Object} screenData - Screen data object\n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} angleRad - Rotation angle in radians\n * @param {number} anchorX - Anchor point X (0-1)\n * @param {number} anchorY - Anchor point Y (0-1)\n * @param {number} alpha - Alpha value (0-255)\n * @param {number} scaleX - Scale X\n * @param {number} scaleY - Scale Y\n */\nexport function drawImage(\n\tscreenData, img, x, y, angleRad, anchorX, anchorY, alpha, scaleX, scaleY\n) {\n\n\tconst context = screenData.context;\n\n\t// Calculate anchor position in pixels\n\tconst anchorXPx = Math.round( img.width * anchorX );\n\tconst anchorYPx = Math.round( img.height * anchorY );\n\n\t// Save current context state\n\tcontext.save();\n\n\t// Set alpha\n\tcontext.globalAlpha = alpha / 255;\n\n\t// Apply transformations\n\tcontext.translate( x, y );\n\tcontext.rotate( angleRad );\n\tcontext.scale( scaleX, scaleY );\n\n\t// Draw image\n\tcontext.drawImage( img, -anchorXPx, -anchorYPx );\n\n\t// Restore context state\n\tcontext.restore();\n\n\t// Mark screen as dirty\n\tsetImageDirty( screenData );\n}\n", "/**\n * Pi.js - Plugin System Core Module\n * \n * Plugin registration and management for extending Pi.js functionality.\n * \n * @module core/plugins\n */\n\n\"use strict\";\n\n// Import modules directly\nimport * as g_utils from \"./utils.js\";\nimport * as g_state from \"./state-settings.js\";\n\nconst m_plugins = [];\nlet m_api;\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\tm_api = api;\n\n\t// Register external API commands\n\tg_state.addCommand(\n\t\t\"registerPlugin\", registerPlugin, false, [ \"name\", \"version\", \"description\", \"init\"]\n\t);\n\tg_state.addCommand(\n\t\t\"getPlugins\", getPlugins, false, []\n\t);\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n/**\n * Register a plugin with Pi.js\n * \n * @param {Object} options - Plugin configuration\n * @param {string} options.name - Unique name for the plugin\n * @param {Function} options.init - Initialization function that receives pluginApi\n * @param {string} [options.version] - Optional version string\n * @param {string} [options.description] - Optional description\n * @returns {void}\n * \n * @example\n * pi.registerPlugin( {\n *   \"name\": \"my-plugin\",\n *   \"version\": \"1.0.0\",\n *   \"description\": \"My custom plugin\",\n *   \"init\": ( pluginApi ) => {\n *     pluginApi.addCommand( \"myCommand\", myFn, [ \"param1\" ] );\n *   }\n * } );\n */\nfunction registerPlugin( options ) {\n\n\t// Validate required parameters\n\tif( !options.name || typeof options.name !== \"string\" ) {\n\t\tconst error = new TypeError( \"registerPlugin: Plugin must have a 'name' property.\" );\n\t\terror.code = \"INVALID_PLUGIN_NAME\";\n\t\tthrow error;\n\t}\n\n\tif( !options.init || typeof options.init !== \"function\" ) {\n\t\tconst error = new TypeError(\n\t\t\t`registerPlugin: Plugin '${options.name}' must have an 'init' function.`\n\t\t);\n\t\terror.code = \"INVALID_PLUGIN_INIT\";\n\t\tthrow error;\n\t}\n\n\t// Check for duplicate\n\tif( m_plugins.find( p => p.name === options.name ) ) {\n\t\tconst error = new Error(\n\t\t\t`registerPlugin: Plugin '${options.name}' is already registered.`\n\t\t);\n\t\terror.code = \"DUPLICATE_PLUGIN\";\n\t\tthrow error;\n\t}\n\n\t// Store plugin info\n\tconst pluginInfo = {\n\t\t\"name\": options.name,\n\t\t\"version\": options.version || \"unknown\",\n\t\t\"description\": options.description || \"\",\n\t\t\"config\": options,\n\t\t\"initialized\": false\n\t};\n\n\tm_plugins.push( pluginInfo );\n\tinitializePlugin( pluginInfo );\n}\n\n/**\n * Get list of registered plugins\n * \n * @returns {Array<Object>} Array of plugin info objects with name, version, description\n * \n * @example\n * const plugins = pi.getPlugins();\n * console.log( plugins ); // [{ name: \"my-plugin\", version: \"1.0.0\", ... }]\n */\nfunction getPlugins() {\n\treturn m_plugins.map( p => ( {\n\t\t\"name\": p.name,\n\t\t\"version\": p.version,\n\t\t\"description\": p.description,\n\t\t\"initialized\": p.initialized\n\t} ) );\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n// Initialize a plugin\nfunction initializePlugin( pluginInfo ) {\n\tif( pluginInfo.initialized ) {\n\t\treturn;\n\t}\n\n\t// Initialize plugin\n\ttry {\n\t\tpluginInfo.config.init( m_api, m_mods );\n\t\tpluginInfo.initialized = true;\n\t} catch( error ) {\n\t\tconst pluginError = new Error(\n\t\t\t`registerPlugin: Failed to initialize plugin '${pluginInfo.name}': ${error.message}`\n\t\t);\n\t\tpluginError.code = \"PLUGIN_INIT_FAILED\";\n\t\tpluginError.originalError = error;\n\t\tthrow pluginError;\n\t}\n}\n", "/**\n * Pi.js - Graphics Pixels Module\n * \n * Commands to read and write pixels from the screen across renderers.\n * \n * @module graphics/pixels\n */\n\n\"use strict\";\n\n// Imports\nimport * as g_utils from \"../core/utils.js\";\nimport * as g_screenManager from \"../core/screen-manager.js\";\nimport * as g_colors from \"./colors.js\";\nimport * as g_state from \"../core/state-settings.js\";\nimport * as g_webgl2Renderer from \"./renderer-webgl2.js\";\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\tregisterCommands();\n\n\t// Stable API - do not route through addCommand for hot path put\n\tapi.put = ( data, x, y, include0 ) => {\n\t\treturn putWrapper( g_screenManager.getActiveScreen( \"put\" ), data, x, y, include0 );\n\t};\n\n\t// Also add to each screen's api for convenience\n\tg_screenManager.addScreenInitFunction( ( screenData ) => {\n\t\tscreenData.api.put = ( data, x, y, include0 ) => {\n\t\t\treturn putWrapper( screenData, data, x, y, include0 );\n\t\t};\n\t} );\n}\n\n\nfunction registerCommands() {\n\t\n\t// Register screen commands via state\n\tg_state.addCommand( \"getPixel\", getPixel, true, [ \"x\", \"y\", \"asIndex\" ] );\n\tg_state.addCommand( \"getPixelAsync\", getPixelAsync, true, [ \"x\", \"y\", \"asIndex\" ] );\n\tg_state.addCommand(\n\t\t\"get\", get, true, [ \"x\", \"y\", \"width\", \"height\", \"tolerance\", \"asIndex\" ]\n\t);\n}\n\n\n/***************************************************************************************************\n * External API\n **************************************************************************************************/\n\n\n// getPixel: Returns RGBA color object by default; if asIndex===true, returns palette index\nfunction getPixel( screenData, options ) {\n\tconst px = g_utils.getInt( options.x, null );\n\tconst py = g_utils.getInt( options.y, null );\n\tif( px === null || py === null ) {\n\t\tconst error = new TypeError( \"getPixel: Parameters x and y must be integers.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\tconst asIndex = options.asIndex === true ? true : false;\n\tconst colorValue = screenData.renderer.readPixel( screenData, px, py );\n\tif( asIndex ) {\n\t\treturn g_colors.findColorIndexByColorValue( screenData, colorValue );\n\t}\n\treturn colorValue;\n}\n\nfunction getPixelAsync( screenData, options ) {\n\tconst px = g_utils.getInt( options.x, null );\n\tconst py = g_utils.getInt( options.y, null );\n\tif( px === null || py === null ) {\n\t\tconst error = new TypeError( \"getPixelAsync: Parameters x and y must be integers.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\tconst asIndex = options.asIndex === true ? true : false;\n\treturn screenData.renderer.readPixelsAsync( screenData, px, py ).then( ( arr ) => {\n\t\tconst colorValue = arr[ 0 ];\n\t\tif( asIndex ) {\n\t\t\treturn g_colors.findColorIndexByColorValue( screenData, colorValue );\n\t\t}\n\t\treturn colorValue;\n\t} );\n}\n\n// get: Returns a 2D array [height][width] of palette indices by default.\n// Set asIndex=false to return colorValue objects instead.\n// Optional tolerance passed to findColorIndexByColorValue.\nfunction get( screenData, options ) {\n\tconst pX = g_utils.getInt( options.x, null );\n\tconst pY = g_utils.getInt( options.y, null );\n\tconst pWidth = g_utils.getInt( options.width, null );\n\tconst pHeight = g_utils.getInt( options.height, null );\n\tconst tolerance = options.tolerance;\n\tconst asIndex = ( options.asIndex === null ? true : !!options.asIndex );\n\n\tif( pX === null || pY === null || pWidth === null || pHeight === null ) {\n\t\tconst error = new TypeError(\n\t\t\t\"get: Parameters x, y, width and height must be integers.\"\n\t\t);\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\tif( pWidth <= 0 || pHeight <= 0 ) {\n\t\treturn [];\n\t}\n\n\tconst colors = screenData.renderer.readPixels( screenData, pX, pY, pWidth, pHeight );\n\tif( !asIndex ) {\n\t\treturn colors;\n\t}\n\tconst results = new Array( colors.length );\n\tfor( let row = 0; row < colors.length; row++ ) {\n\t\tconst resultsRow = new Array( colors[ row ].length );\n\t\tfor( let col = 0; col < pWidth; col++ ) {\n\t\t\tconst colorValue = colors[ row ][ col ];\n\t\t\tif( asIndex ) {\n\t\t\t\tconst idx = g_colors.findColorIndexByColorValue(\n\t\t\t\t\tscreenData, colorValue, tolerance\n\t\t\t\t);\n\t\t\t\tresultsRow[ col ] = ( idx === null ? 0 : idx );\n\t\t\t} else {\n\t\t\t\tresultsRow[ col ] = colorValue;\n\t\t\t}\n\t\t}\n\t\tresults[ row ] = resultsRow;\n\t}\n\n\treturn results;\n}\n\n\n// (no internal helper functions)\n\n\n/***************************************************************************************************\n * Write API\n **************************************************************************************************/\n\n// Wrapper for the put commands handles all parsing and data validation\nfunction putWrapper( screenData, data, x, y, include0 = false ) {\n\n\t// Accept either object-literal or positional params without using parseOptions\n\tlet pData, pX, pY, pInclude0;\n\tif( g_utils.isObjectLiteral( data ) ) {\n\t\tpData = data.data;\n\t\tpX = g_utils.getInt( data.x, null );\n\t\tpY = g_utils.getInt( data.y, null );\n\t\tpInclude0 = !!data.include0;\n\t} else {\n\t\tpData = data;\n\t\tpX = g_utils.getInt( x, null );\n\t\tpY = g_utils.getInt( y, null );\n\t\tpInclude0 = !!include0;\n\t}\n\n\t// Fast bail if no data\n\tif( !pData || pData.length < 1 ) {\n\t\treturn null;\n\t}\n\n\t// Validate coordinates\n\tif( pX === null || pY === null ) {\n\t\tconst error = new TypeError( \"put: Parameters x and y must be integers.\" );\n\t\terror.code = \"INVALID_PARAMETER\";\n\t\tthrow error;\n\t}\n\n\t// Validate and clip data\n\tconst screenW = screenData.width;\n\tconst screenH = screenData.height;\n\n\t// Clip starting offsets when x/y are negative\n\tlet startX = ( pX < 0 ? -pX : 0 );\n\tlet startY = ( pY < 0 ? -pY : 0 );\n\n\t// Calculate width/height available from data starting at the clipped offsets\n\tlet width = data[ 0 ] ? ( data[ 0 ].length - startX ) : 0;\n\tlet height = data.length - startY;\n\n\t// Clamp to screen bounds\n\tif( pX + startX + width > screenW ) {\n\t\twidth = screenW - pX - startX;\n\t}\n\tif( pY + startY + height > screenH ) {\n\t\theight = screenH - pY - startY;\n\t}\n\n\t// If nothing to draw after clipping, exit\n\tif( width <= 0 || height <= 0 ) {\n\t\treturn;\n\t}\n\n\tif( screenData.renderMode === g_screenManager.CANVAS2D_RENDER_MODE ) {\n\n\t\t// Call context getImageData only if out of sync\n\t\tscreenData.renderer.getImageData();\n\t} else {\n\n\t\t// Prepare the batch by making sure there are enough memory in the batch\n\t\tlet pixelCount = 0;\n\n\t\t// Use the already calculated loop bounds\n\t\tfor( let i = startY; i < startY + height; i++ ) {\n\t\t\tconst row = pData[ i ];\n\n\t\t\t// Check if row exists\n\t\t\tif( row ) {\n\n\t\t\t\t// The actual number of pixels drawn from this row will be `width`\n\t\t\t\tpixelCount += width;\n\t\t\t}\n\t\t}\n\n\t\tscreenData.renderer.prepareBatch( screenData, g_webgl2Renderer.POINTS_BATCH, pixelCount );\n\t}\n\n\tput( screenData, pData, pX, pY, pInclude0, startY, startX, width, height );\n\n\t// Mark image as dirty\n\tscreenData.renderer.setImageDirty( screenData );\n}\n\n// put: Hot path inner function. Assumes x/y are integers and data is a 2D array.\nfunction put( screenData, data, x, y, include0, startY, startX, width, height ) {\n\t\n\tconst endY = startY + height;\n\tconst endX = startX + width;\n\n\t// Draw\n\tfor( let dataY = startY; dataY < endY; dataY++ ) {\n\t\tconst row = data[ dataY ];\n\t\tif( !row ) {\n\t\t\tcontinue;\n\t\t}\n\t\tfor( let dataX = startX; dataX < endX; dataX++ ) {\n\n\t\t\t// Double bitwise NOT - fast convert to int function\n\t\t\tconst colorIndex = ~~row[ dataX ];\n\n\t\t\t// Skip transparent unless include0 is true\n\t\t\tif( colorIndex === 0 && include0 === false ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst colorValue = g_colors.getColorValueByIndex( screenData, colorIndex );\n\t\t\tconst sx = x + dataX;\n\t\t\tconst sy = y + dataY;\n\n\t\t\tscreenData.renderer.drawPixelUnsafe( screenData, sx, sy, colorValue );\n\t\t}\n\t}\n}\n", "/**\n * Pi.js - Images Module\n * \n * Image loading, storage, and management for both WebGL2 and Canvas2D renderers.\n * Uses WeakMaps for efficient image-to-texture mapping.\n * \n * @module graphics/images\n */\n\n\"use strict\";\n\n// Import modules directly\nimport * as g_utils from \"../core/utils.js\";\nimport * as g_state from \"../core/state-settings.js\";\nimport * as g_screenManager from \"../core/screen-manager.js\";\nimport * as g_webgl2Renderer from \"./renderer-webgl2.js\";\n\n// Image storage by name\nconst m_images = {};\nlet m_imageCount = 0;\n\n// WeakMap for Canvas2D image storage (for compatibility)\n// Maps Image/Canvas elements to themselves - allows unified access pattern\n// even though Canvas2D can use images directly\nconst m_canvas2dImages = new WeakMap();\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\tregisterCommands();\n}\n\nfunction registerCommands() {\n\n\t// Register non-screen commands\n\tg_state.addCommand(\n\t\t\"loadImage\", loadImage, false, [ \"src\", \"name\", \"onLoad\", \"onError\" ]\n\t);\n\n\t// Register screen commands\n\tg_state.addCommand(\n\t\t\"drawImage\", drawImage, true,\n\t\t[ \"name\", \"x\", \"y\", \"angle\", \"anchorX\", \"anchorY\", \"alpha\", \"scaleX\", \"scaleY\" ]\n\t);\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n\n/**\n * Load an image from URL or use provided Image/Canvas element\n * \n * @param {Object} options - Load options\n * @param {string|HTMLImageElement|HTMLCanvasElement} options.src - Image source\n * @param {string} [options.name] - Optional name for the image\n * @param {Function} [options.onLoad] - Callback when image loads\n * @param {Function} [options.onError] - Callback when image fails to load\n * @returns {string} Image name\n */\nfunction loadImage( options ) {\n\tconst src = options.src;\n\tlet name = options.name;\n\tconst onLoadCallback = options.onLoad;\n\tconst onErrorCallback = options.onError;\n\tconst srcErrMsg = \"loadImage: Parameter src must be a string URL, Image element, or Canvas \" +\n\t\t\"element.\";\n\n\t// Validate src parameter - can be string URL, Image element, or Canvas element\n\tif( typeof src === \"string\" ) {\n\t\tif( src === \"\" ) {\n\t\t\tconst error = new TypeError( srcErrMsg );\n\t\t\terror.code = \"INVALID_SRC\";\n\t\t\tthrow error;\n\t\t}\n\t} else if( src && typeof src === \"object\" ) {\n\t\tif( src.tagName !== \"IMG\" && src.tagName !== \"CANVAS\" ) {\n\t\t\tconst error = new TypeError( srcErrMsg );\n\t\t\terror.code = \"INVALID_SRC\";\n\t\t\tthrow error;\n\t\t}\n\t} else {\n\t\tconst error = new TypeError( srcErrMsg );\n\t\terror.code = \"INVALID_SRC\";\n\t\tthrow error;\n\t}\n\n\tif( name && typeof name !== \"string\" ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter name must be a string.\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\t// Generate a name if none is provided\n\tif( !name || name === \"\" ) {\n\t\tm_imageCount += 1;\n\t\tname = \"\" + m_imageCount;\n\t}\n\n\tif( m_images[ name ] ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter name must be unique.\" );\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\t// Validate callbacks if provided\n\tif( onLoadCallback != null && !g_utils.isFunction( onLoadCallback ) ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter onLoad must be a function.\" );\n\t\terror.code = \"INVALID_CALLBACK\";\n\t\tthrow error;\n\t}\n\n\tif( onErrorCallback != null && !g_utils.isFunction( onErrorCallback ) ) {\n\t\tconst error = new TypeError( \"loadImage: Parameter onError must be a function.\" );\n\t\terror.code = \"INVALID_CALLBACK\";\n\t\tthrow error;\n\t}\n\n\tlet img;\n\n\t// Handle Image or Canvas element passed directly\n\tif( typeof src !== \"string\" ) {\n\n\t\t// Use the element directly\n\t\timg = src;\n\n\t\t// Store immediately since element is already loaded\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"ready\",\n\t\t\t\"type\": \"image\",\n\t\t\t\"image\": img,\n\t\t\t\"width\": img.width,\n\t\t\t\"height\": img.height\n\t\t};\n\n\t\t// Register in WeakMaps (renderers will create textures when needed)\n\t\tregisterImageForRenderers( img );\n\n\t\t// Call user callback if provided\n\t\tif( onLoadCallback ) {\n\t\t\tonLoadCallback( img );\n\t\t}\n\n\t\treturn name;\n\t}\n\n\t// Handle string URL - requires async loading\n\tm_images[ name ] = { \"status\": \"loading\" };\n\n\timg = new Image();\n\n\t// Set up handlers before setting src\n\t// Increment wait count for ready() - will be decremented in onload/onerror\n\tg_state.wait();\n\n\timg.onload = function() {\n\n\t\t// Store the loaded image\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"ready\",\n\t\t\t\"type\": \"image\",\n\t\t\t\"image\": img,\n\t\t\t\"width\": img.width,\n\t\t\t\"height\": img.height\n\t\t};\n\n\t\t// Register in WeakMaps (renderers will create textures when needed)\n\t\tregisterImageForRenderers( img );\n\n\t\t// Call user callback if provided\n\t\tif( onLoadCallback ) {\n\t\t\tonLoadCallback( img );\n\t\t}\n\n\t\t// Decrement wait count\n\t\tg_state.done();\n\t};\n\n\timg.onerror = function( error ) {\n\n\t\t// Mark image as failed\n\t\tm_images[ name ] = {\n\t\t\t\"status\": \"error\",\n\t\t\t\"error\": error\n\t\t};\n\n\t\t// Call user error callback if provided\n\t\tif( onErrorCallback ) {\n\t\t\tonErrorCallback( error );\n\t\t}\n\n\t\t// Decrement wait count even on error\n\t\tg_state.done();\n\t};\n\n\t// Set source - may trigger onload synchronously if cached\n\timg.src = src;\n\n\treturn name;\n}\n\n/**\n * Draw an image on the screen\n * \n * @param {Object} screenData - Screen data object\n * @param {Object} options - Draw options\n * @param {string|Object} options.name - Image name, screen object, or Image/Canvas element\n * @param {number} options.x - X coordinate\n * @param {number} options.y - Y coordinate\n * @param {number} [options.angle] - Rotation angle in degrees\n * @param {number} [options.anchorX] - Anchor point X (0-1)\n * @param {number} [options.anchorY] - Anchor point Y (0-1)\n * @param {number} [options.alpha] - Alpha value (0-255)\n * @param {number} [options.scaleX] - Scale X\n * @param {number} [options.scaleY] - Scale Y\n */\nfunction drawImage( screenData, options ) {\n\tconst name = options.name;\n\tlet x = options.x || 0;\n\tlet y = options.y || 0;\n\tlet angle = options.angle;\n\tlet anchorX = options.anchorX;\n\tlet anchorY = options.anchorY;\n\tlet alpha = options.alpha;\n\tlet scaleX = options.scaleX;\n\tlet scaleY = options.scaleY;\n\n\tlet img;\n\n\t// Resolve image from name parameter\n\tif( typeof name === \"string\" ) {\n\n\t\t// Handle string image name\n\t\tconst imageData = getStoredImage( name );\n\t\tif( !imageData ) {\n\t\t\tconst error = new Error( `drawImage: Image \"${name}\" not found.` );\n\t\t\terror.code = \"IMAGE_NOT_FOUND\";\n\t\t\tthrow error;\n\t\t}\n\n\t\tif( imageData.status === \"loading\" ) {\n\t\t\tconst error = new Error(\n\t\t\t\t`drawImage: Image \"${name}\" is still loading. Use $.ready() to wait for it.`\n\t\t\t);\n\t\t\terror.code = \"IMAGE_NOT_READY\";\n\t\t\tthrow error;\n\t\t}\n\n\t\tif( imageData.status === \"error\" ) {\n\t\t\tconst error = new Error( `drawImage: Image \"${name}\" failed to load.` );\n\t\t\terror.code = \"IMAGE_LOAD_FAILED\";\n\t\t\tthrow error;\n\t\t}\n\n\t\timg = imageData.image;\n\t} else if( name && typeof name === \"object\" ) {\n\n\t\t// Handle screen API object\n\t\tif( name.screen === true ) {\n\t\t\tif( typeof name.canvas === \"function\" ) {\n\t\t\t\timg = name.canvas();\n\t\t\t} else {\n\t\t\t\timg = name.canvas;\n\t\t\t}\n\t\t\tif( !img ) {\n\t\t\t\tconst error = new Error( \"drawImage: Screen has no canvas.\" );\n\t\t\t\terror.code = \"INVALID_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t} else if( name.tagName === \"CANVAS\" || name.tagName === \"IMG\" ) {\n\n\t\t\t// Handle Canvas or Image element\n\t\t\timg = name;\n\t\t} else {\n\t\t\tconst error = new TypeError(\n\t\t\t\t\"drawImage: Parameter name must be a string, screen object, Canvas element, \" +\n\t\t\t\t\"or Image element.\"\n\t\t\t);\n\t\t\terror.code = \"INVALID_NAME\";\n\t\t\tthrow error;\n\t\t}\n\t} else {\n\t\tconst error = new TypeError(\n\t\t\t\"drawImage: Parameter name must be a string, screen object, Canvas element, \" +\n\t\t\t\"or Image element.\"\n\t\t);\n\t\terror.code = \"INVALID_NAME\";\n\t\tthrow error;\n\t}\n\n\t// Validate coordinates\n\tif( isNaN( x ) || isNaN( y ) ) {\n\t\tconst error = new TypeError( \"drawImage: Parameters x and y must be numbers.\" );\n\t\terror.code = \"INVALID_COORDINATES\";\n\t\tthrow error;\n\t}\n\n\t// Default values\n\tif( scaleX == null || isNaN( Number( scaleX ) ) ) {\n\t\tscaleX = 1;\n\t}\n\tif( scaleY == null || isNaN( Number( scaleY ) ) ) {\n\t\tscaleY = 1;\n\t}\n\tif( angle == null ) {\n\t\tangle = 0;\n\t}\n\tif( anchorX == null ) {\n\t\tanchorX = 0;\n\t}\n\tif( anchorY == null ) {\n\t\tanchorY = 0;\n\t}\n\tif( alpha == null && alpha !== 0 ) {\n\t\talpha = 255;\n\t}\n\n\t// Convert angle from degrees to radians\n\tconst angleRad = g_utils.degreesToRadian( angle );\n\n\t// Draw using renderer-specific implementation\n\tscreenData.renderer.drawImage(\n\t\tscreenData, img, x, y, angleRad, anchorX, anchorY, alpha, scaleX, scaleY\n\t);\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n\n/**\n * Register an image in WeakMap for Canvas2D renderer access\n * \n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\n */\nfunction registerImageForRenderers( img ) {\n\n\t// For Canvas2D, just store reference to image itself\n\t// Canvas2D can use Image/Canvas elements directly\n\tm_canvas2dImages.set( img, img );\n\n\t// For WebGL2, texture will be created on-demand by renderer-webgl2.getWebGL2Texture()\n\t// No need to create it here to avoid creating textures for images that may never be used\n}\n\n/**\n * Get Canvas2D image reference\n * \n * @param {HTMLImageElement|HTMLCanvasElement} img - Image or Canvas element\n * @returns {HTMLImageElement|HTMLCanvasElement|null} Image or Canvas element or null\n */\nexport function getCanvas2DImage( img ) {\n\treturn m_canvas2dImages.get( img ) || img;\n}\n\n/**\n * Get stored image by name\n * \n * @param {string} name - Image name\n * @returns {Object|null} Image data object or null if not found\n */\nexport function getStoredImage( name ) {\n\tif( typeof name !== \"string\" ) {\n\t\treturn null;\n\t}\n\treturn m_images[ name ] || null;\n}\n\n/**\n * Remove an image from storage\n * \n * @param {string} name - Image name\n */\nexport function removeImage( name ) {\n\tif( typeof name !== \"string\" ) {\n\t\treturn;\n\t}\n\n\tconst imageData = m_images[ name ];\n\tif( imageData && imageData.image ) {\n\n\t\tconst img = imageData.image;\n\n\t\t// Explicitly delete WebGL2 textures to free GPU memory\n\t\t// WebGLTextures hold GPU memory that is NOT automatically freed by JS garbage collection\n\t\t// Must call gl.deleteTexture() explicitly to prevent memory leaks\n\t\tg_webgl2Renderer.deleteWebGL2Texture( img );\n\n\t\t// Canvas2D doesn't need explicit cleanup - it just references the image element\n\n\t\tdelete m_images[ name ];\n\t}\n}\n\n\n/***************************************************************************************************\n * Internal Commands\n **************************************************************************************************/\n\n", "/**\n * Pi.js - Event Management Core Module\n * \n * Centralized event listener management for input events (mouse, touch, keyboard, etc.)\n * \n * @module input/events\n */\n\n\"use strict\";\n\n// Import modules directly\nimport * as g_utils from \"../core/utils.js\";\nimport * as g_screenManager from \"../core/screen-manager.js\";\nimport * as g_state from \"../core/state-settings.js\";\n\n\n// Import clear functions from input modules (TODO: Re-enable when input modules are reimplemented)\n// import { clearKeyboardEvents } from \"../modules/keyboard\";\n// import { clearMouseEvents } from \"../modules/mouse\";\n// import { clearTouchEvents } from \"../modules/touch\";\n// import { clearPressEvents, clearClickEvents } from \"../modules/press\";\n// import { clearGamepadEvents } from \"../modules/gamepad\";\n\n// Placeholder functions until modules are reimplemented\nfunction clearKeyboardEvents() {\n\t// TODO: Implement when keyboard module is reimplemented\n}\n\nfunction clearMouseEvents( screenData ) {\n\t// TODO: Implement when mouse module is reimplemented\n}\n\nfunction clearTouchEvents( screenData ) {\n\t// TODO: Implement when touch module is reimplemented\n}\n\nfunction clearPressEvents( screenData ) {\n\t// TODO: Implement when press module is reimplemented\n}\n\nfunction clearClickEvents( screenData ) {\n\t// TODO: Implement when press module is reimplemented\n}\n\nfunction clearGamepadEvents() {\n\t// TODO: Implement when gamepad module is reimplemented\n}\n\n\n/***************************************************************************************************\n * Module Commands\n **************************************************************************************************/\n\n\nexport function init( api ) {\n\tg_state.addCommand( \"clearEvents\", clearEvents, true, [ \"clearEvents\" ], true );\n}\n\n\n/***************************************************************************************************\n * External API Commands\n **************************************************************************************************/\n\n/**\n * Clear event handlers for specified input types\n * \n * @param {Object|null} screenData - Screen data object (null if no screen available)\n * @param {Object} options - Command options\n * @param {string|Array<string>} options.type - Type(s) to clear (keyboard, mouse, touch, press, click, gamepad)\n */\nfunction clearEvents( screenData, options ) {\n\tconst type = options.type;\n\tconst types = Array.isArray( type ) ? type : ( type ? [ type ] : null );\n\n\t// If no type specified, clear all\n\tif( !types ) {\n\t\tclearKeyboardEvents();\n\t\tclearGamepadEvents();\n\t\tif( screenData ) {\n\t\t\tclearMouseEvents( screenData );\n\t\t\tclearTouchEvents( screenData );\n\t\t\tclearPressEvents( screenData );\n\t\t\tclearClickEvents( screenData );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Clear specific types\n\tfor( const t of types ) {\n\t\tconst lowerType = t.toLowerCase();\n\t\tif( lowerType === \"keyboard\" ) {\n\t\t\tclearKeyboardEvents();\n\t\t} else if( lowerType === \"gamepad\" ) {\n\t\t\tclearGamepadEvents();\n\t\t} else if( lowerType === \"mouse\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear mouse events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearMouseEvents( screenData );\n\t\t} else if( lowerType === \"touch\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear touch events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearTouchEvents( screenData );\n\t\t} else if( lowerType === \"press\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear press events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearPressEvents( screenData );\n\t\t} else if( lowerType === \"click\" ) {\n\t\t\tif( !screenData ) {\n\t\t\t\tconst error = new Error( \"clearEvents: No screen available to clear click events.\" );\n\t\t\t\terror.code = \"NO_SCREEN\";\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tclearClickEvents( screenData );\n\t\t} else {\n\t\t\tconst error = new Error(\n\t\t\t\t`clearEvents: Invalid type \"${t}\". ` +\n\t\t\t\t`Valid types: keyboard, mouse, touch, press, click, gamepad.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_TYPE\";\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\n\n/***************************************************************************************************\n * Event Management Functions\n **************************************************************************************************/\n\n\n/**\n * Register an event listener\n * \n * @param {string} mode - Event mode (e.g., \"down\", \"up\", \"move\")\n * @param {Function} fn - Callback function\n * @param {boolean} once - If true, listener is removed after first trigger\n * @param {Object} hitBox - Optional hit box with x, y, width, height properties\n * @param {Array<string>} modes - Valid modes for this event type\n * @param {string} name - Command name for error messages\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} extraId - Optional extra ID to append to mode\n * @param {*} extraData - Optional extra data to store with listener\n * @param {*} customData - Optional custom data passed to callback\n * @returns {boolean} True if listener was successfully registered\n */\nexport function onevent(\n\tmode, fn, once, hitBox, modes, name, listenerArr, extraId, extraData, customData\n) {\n\tlet modeFound = false;\n\n\t// Validate mode\n\tfor( let i = 0; i < modes.length; i++ ) {\n\t\tif( mode === modes[ i ] ) {\n\t\t\tmodeFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !modeFound ) {\n\t\tconst error = new Error(\n\t\t\t`${name}: mode needs to be one of the following: ${modes.join( \", \" )}.`\n\t\t);\n\t\terror.code = \"INVALID_MODE\";\n\t\tthrow error;\n\t}\n\n\t// Validate once parameter\n\tonce = !!( once );\n\n\t// Validate callback function\n\tif( !g_utils.isFunction( fn ) ) {\n\t\tconst error = new Error( `${name}: fn is not a valid function.` );\n\t\terror.code = \"INVALID_FUNCTION\";\n\t\tthrow error;\n\t}\n\n\t// Validate hitBox\n\tif( hitBox ) {\n\t\tif(\n\t\t\t!Number.isInteger( hitBox.x ) ||\n\t\t\t!Number.isInteger( hitBox.y ) ||\n\t\t\t!Number.isInteger( hitBox.width ) ||\n\t\t\t!Number.isInteger( hitBox.height )\n\t\t) {\n\t\t\tconst error = new Error(\n\t\t\t\t`${name}: hitBox must have properties x, y, width, and height ` +\n\t\t\t\t`whose values are integers.`\n\t\t\t);\n\t\t\terror.code = \"INVALID_HITBOX\";\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Use setTimeout to prevent event from being triggered if called within an event\n\tsetTimeout( () => {\n\t\tconst originalFn = fn;\n\t\tlet newMode = mode;\n\n\t\t// Add extraId to mode if provided\n\t\tif( typeof extraId === \"string\" ) {\n\t\t\tnewMode = mode + extraId;\n\t\t}\n\n\t\t// Wrap function if it should only run once\n\t\tlet wrappedFn = fn;\n\t\tif( once ) {\n\t\t\twrappedFn = ( data, customData ) => {\n\t\t\t\toffevent( mode, originalFn, modes, name, listenerArr, extraId );\n\t\t\t\toriginalFn( data, customData );\n\t\t\t};\n\t\t}\n\n\t\t// Initialize listener array for this mode if needed\n\t\tif( !listenerArr[ newMode ] ) {\n\t\t\tlistenerArr[ newMode ] = [];\n\t\t}\n\n\t\t// Add listener\n\t\tlistenerArr[ newMode ].push( {\n\t\t\t\"fn\": wrappedFn,\n\t\t\t\"hitBox\": hitBox,\n\t\t\t\"extraData\": extraData,\n\t\t\t\"clickDown\": false,\n\t\t\t\"originalFn\": originalFn,\n\t\t\t\"customData\": customData\n\t\t} );\n\t}, 1 );\n\n\treturn true;\n}\n\n/**\n * Unregister an event listener\n * \n * @param {string} mode - Event mode\n * @param {Function} fn - Callback function to remove, or null to remove all\n * @param {Array<string>} modes - Valid modes for this event type\n * @param {string} name - Command name for error messages\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} extraId - Optional extra ID appended to mode\n * @returns {boolean} True if listener(s) were successfully removed\n */\nexport function offevent( mode, fn, modes, name, listenerArr, extraId ) {\n\tlet modeFound = false;\n\n\t// Validate mode\n\tfor( let i = 0; i < modes.length; i++ ) {\n\t\tif( mode === modes[ i ] ) {\n\t\t\tmodeFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !modeFound ) {\n\t\tconst error = new Error(\n\t\t\t`${name}: mode needs to be one of the following: ${modes.join( \", \" )}.`\n\t\t);\n\t\terror.code = \"INVALID_MODE\";\n\t\tthrow error;\n\t}\n\n\t// Add extraId to mode if provided\n\tif( typeof extraId === \"string\" ) {\n\t\tmode += extraId;\n\t}\n\n\t// Determine if clearing all listeners or specific function\n\tconst isClear = fn == null;\n\n\tif( !isClear && !g_utils.isFunction( fn ) ) {\n\t\tconst error = new Error( `${name}: fn is not a valid function.` );\n\t\terror.code = \"INVALID_FUNCTION\";\n\t\tthrow error;\n\t}\n\n\t// Remove listeners\n\tif( listenerArr[ mode ] ) {\n\t\tif( isClear ) {\n\n\t\t\t// Remove all listeners for this mode\n\t\t\tdelete listenerArr[ mode ];\n\t\t} else {\n\n\t\t\t// Remove specific function\n\t\t\tfor( let i = listenerArr[ mode ].length - 1; i >= 0; i-- ) {\n\t\t\t\tif( listenerArr[ mode ][ i ].originalFn === fn ) {\n\t\t\t\t\tlistenerArr[ mode ].splice( i, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clean up empty array\n\t\t\tif( listenerArr[ mode ].length === 0 ) {\n\t\t\t\tdelete listenerArr[ mode ];\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Trigger all event listeners for a specific mode\n * \n * @param {string} mode - Event mode to trigger\n * @param {*} data - Event data to pass to listeners\n * @param {Object} listenerArr - Object containing listener arrays by mode\n * @param {string} clickStatus - Optional \"down\" or \"up\" for click tracking\n */\nexport function triggerEventListeners( mode, data, listenerArr, clickStatus ) {\n\tif( !listenerArr[ mode ] ) {\n\t\treturn;\n\t}\n\n\t// Make a copy to prevent infinite loops if listener adds new listeners\n\tconst temp = listenerArr[ mode ].slice();\n\n\t// Loop through all event listeners\n\tfor( let i = 0; i < temp.length; i++ ) {\n\t\tconst listener = temp[ i ];\n\n\t\t// Handle click up without click down\n\t\tif( clickStatus === \"up\" && !listener.clickDown ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check hitBox if present\n\t\tif( listener.hitBox ) {\n\t\t\tlet isHit = false;\n\t\t\tlet newData;\n\n\t\t\t// Handle array data (touches)\n\t\t\tif( Array.isArray( data ) ) {\n\t\t\t\tnewData = [];\n\t\t\t\tfor( let j = 0; j < data.length; j++ ) {\n\t\t\t\t\tconst pos = data[ j ];\n\t\t\t\t\tif( g_utils.inRange( pos, listener.hitBox ) ) {\n\t\t\t\t\t\tnewData.push( pos );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( newData.length > 0 ) {\n\t\t\t\t\tisHit = true;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Handle single data point (mouse)\n\t\t\t\tnewData = data;\n\t\t\t\tif( g_utils.inRange( data, listener.hitBox ) ) {\n\t\t\t\t\tisHit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( isHit ) {\n\n\t\t\t\t// For click events, track down state\n\t\t\t\tif( clickStatus === \"down\" ) {\n\t\t\t\t\tlistener.clickDown = true;\n\t\t\t\t} else {\n\t\t\t\t\tlistener.clickDown = false;\n\t\t\t\t\tlistener.fn( newData, listener.customData );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\t// No hitBox, trigger for all events\n\t\t\tlistener.fn( data, listener.customData );\n\t\t}\n\t}\n}\n\n", "/**\r\n * Pi.js - Main Entry Point\r\n * \r\n * Graphics and sound library for retro-style games and demos.\r\n * \r\n * @module pi.js\r\n * @author Andy Stubbs\r\n * @license Apache-2.0\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Core Modules\r\nimport * as g_utils from \"./core/utils\";\r\nimport * as g_state from \"./core/state-settings.js\";\r\nimport * as g_screenManager from \"./core/screen-manager.js\";\r\nimport * as g_plugins from \"./core/plugins.js\";\r\n\r\n// Graphics\r\nimport * as g_webgl2Renderer from \"./graphics/renderer-webgl2.js\";\r\nimport * as g_canvas2dRenderer from \"./graphics/renderer-canvas2d.js\";\r\nimport * as g_pens from \"./graphics/pens.js\";\r\nimport * as g_colors from \"./graphics/colors.js\";\r\nimport * as g_graphicsApi from \"./graphics/graphics-api.js\";\r\nimport * as g_pixels from \"./graphics/pixels.js\";\r\nimport * as g_images from \"./graphics/images.js\";\r\n\r\n// Text\r\n// TODO: Import text modules\r\n\r\n// Inputs\r\nimport * as g_events from \"./input/events.js\";\r\n\r\n// Audio\r\n// TODO: Import audio modules\r\n\r\n// Version injected during build from package.json\r\nconst VERSION = \"2.0.0-alpha.2\";\r\n\r\n// Create the main api for all external commands later assinged to globals pi or $\r\nconst api = {\r\n\t\"version\": VERSION\r\n};\r\n\r\n// Store modules in array for orderered initialization\r\nconst mods = [\r\n\tg_utils, g_state, g_screenManager, g_plugins, g_webgl2Renderer, g_canvas2dRenderer, g_pens,\r\n\tg_colors, g_graphicsApi, g_pixels, g_images, g_events\r\n];\r\n\r\n// Initialize the modules\r\nfor( const mod of mods ) {\r\n\tif( mod.init ) {\r\n\t\tmod.init( api );\r\n\t}\r\n}\r\n\r\n// Process API commands\r\ng_state.processCommands( api );\r\n\r\n// Set window.pi for browser environments\r\nif( typeof window !== \"undefined\" ) {\r\n\twindow.pi = api;\r\n\r\n\t// Set $ alias only if not already defined (avoid jQuery conflicts)\r\n\tif( window.$ === undefined ) {\r\n\t\twindow.$ = api;\r\n\t}\r\n}\r\n\r\n// Export for different module systems\r\nexport default api;\r\nexport { api as pi };\r\n"],
  "mappings": "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",
  "names": ["pad", "init", "init", "init", "init", "init", "api", "setColor", "t", "commandNames", "buildApi", "x", "y", "init", "api", "commandNames", "buildApi", "init", "api", "registerCommands", "clamp", "point_default", "image_default", "display_default", "init", "point_default", "image_default", "display_default", "cleanup", "cls", "drawImage", "drawPixelUnsafe", "init", "readPixel", "readPixelAsync", "readPixels", "readPixelsAsync", "setImageDirty", "init", "api", "cleanup", "setImageDirty", "cls", "drawPixelUnsafe", "readPixel", "readPixelAsync", "readPixels", "readPixelsAsync", "drawImage", "init", "api", "registerCommands", "screenId", "screen", "newCssWidth", "newCssHeight", "init", "api", "registerCommands", "init", "m_api", "init", "api", "init", "init", "api", "registerCommands", "init", "init", "api", "registerCommands", "drawImage", "init", "init", "api", "customData"]
}
