{
  "version": 3,
  "sources": ["../index.js"],
  "sourcesContent": ["/**\n * Example Plugin for Pi.js\n * \n * Demonstrates basic plugin functionality including:\n * - Adding global commands\n * - Adding screen commands\n * - Using screen data\n * - Lifecycle hooks\n * \n * @module plugins/example-plugin\n */\n\n\"use strict\";\n\n/**\n * Example plugin initialization\n * \n * @param {Object} pluginApi - Plugin API provided by Pi.js\n */\nexport default function examplePlugin( pluginApi ) {\n\n\t// Add custom data to each screen\n\tpluginApi.addScreenDataItem( \"exampleData\", {\n\t\t\"clicks\": 0,\n\t\t\"timestamp\": null\n\t} );\n\n\t// Initialize hook - called when each screen is created\n\tpluginApi.addScreenInitFunction( ( screenData ) => {\n\t\tscreenData.exampleData.timestamp = Date.now();\n\t} );\n\n\t// Cleanup hook - called when screen is removed\n\tpluginApi.addScreenCleanupFunction( ( screenData ) => {\n\t\tscreenData.exampleData = null;\n\t} );\n\n\t// Add a simple global command\n\tpluginApi.addCommand( \"hello\", hello, [ \"name\" ] );\n\n\t/**\n\t * Say hello\n\t * \n\t * @param {Object} options - Command options\n\t * @param {string} options.name - Name to greet\n\t * @returns {string} Greeting message\n\t */\n\tfunction hello( options ) {\n\t\tconst name = options.name || \"World\";\n\t\tconst message = `Hello, ${name}!`;\n\t\tconsole.log( message );\n\t\treturn message;\n\t}\n\n\t// Add a screen command that uses screen data\n\tpluginApi.addScreenCommand( \"trackClick\", trackClick, [ \"x\", \"y\" ] );\n\n\t/**\n\t * Track a click on the screen\n\t * \n\t * @param {Object} screenData - Screen data\n\t * @param {Object} options - Command options\n\t * @param {number} options.x - Click X coordinate\n\t * @param {number} options.y - Click Y coordinate\n\t * @returns {number} Total number of clicks\n\t */\n\tfunction trackClick( screenData, options ) {\n\t\tscreenData.exampleData.clicks++;\n\t\tconst x = options.x || 0;\n\t\tconst y = options.y || 0;\n\t\tconsole.log( `Click #${screenData.exampleData.clicks} at (${x}, ${y})` );\n\t\treturn screenData.exampleData.clicks;\n\t}\n\n\t// Add a command that accesses the main API\n\tpluginApi.addCommand( \"getLibraryInfo\", getLibraryInfo, [] );\n\n\t/**\n\t * Get Pi.js library information\n\t * \n\t * @returns {Object} Library info\n\t */\n\tfunction getLibraryInfo() {\n\t\tconst api = pluginApi.getApi();\n\t\treturn {\n\t\t\t\"version\": api.version,\n\t\t\t\"pluginSystem\": \"enabled\"\n\t\t};\n\t}\n\n\t// Add a drawing command that uses utilities\n\tpluginApi.addScreenCommand( \"drawRandomCircle\", drawRandomCircle, [ \"x\", \"y\", \"radius\" ] );\n\n\t/**\n\t * Draw a circle with random color\n\t * \n\t * @param {Object} screenData - Screen data\n\t * @param {Object} options - Command options\n\t */\n\tfunction drawRandomCircle( screenData, options ) {\n\t\tconst x = options.x || 0;\n\t\tconst y = options.y || 0;\n\t\tconst radius = options.radius || 50;\n\n\t\t// Use Pi.js utilities to generate random color\n\t\tconst utils = pluginApi.utils;\n\t\tconst r = Math.floor( utils.rndRange( 0, 256 ) );\n\t\tconst g = Math.floor( utils.rndRange( 0, 256 ) );\n\t\tconst b = Math.floor( utils.rndRange( 0, 256 ) );\n\t\tconst color = utils.rgbToColor( r, g, b, 255 );\n\n\t\t// Draw circle\n\t\tconst ctx = screenData.context;\n\t\tctx.beginPath();\n\t\tctx.arc( x, y, radius, 0, Math.PI * 2 );\n\t\tctx.fillStyle = color.s;\n\t\tctx.fill();\n\t}\n}\n\n// Auto-register in IIFE mode (when loaded via <script> tag)\nif( typeof window !== \"undefined\" && window.pi ) {\n\twindow.pi.registerPlugin( {\n\t\t\"name\": \"example-plugin\",\n\t\t\"version\": \"1.0.0\",\n\t\t\"description\": \"Example plugin demonstrating Pi.js plugin capabilities\",\n\t\t\"init\": examplePlugin\n\t} );\n}\n\n"],
  "mappings": "mBAmBe,SAARA,EAAgCC,EAAY,CAGlDA,EAAU,kBAAmB,cAAe,CAC3C,OAAU,EACV,UAAa,IACd,CAAE,EAGFA,EAAU,sBAAyBC,GAAgB,CAClDA,EAAW,YAAY,UAAY,KAAK,IAAI,CAC7C,CAAE,EAGFD,EAAU,yBAA4BC,GAAgB,CACrDA,EAAW,YAAc,IAC1B,CAAE,EAGFD,EAAU,WAAY,QAASE,EAAO,CAAE,MAAO,CAAE,EASjD,SAASA,EAAOC,EAAU,CAEzB,IAAMC,EAAU,UADHD,EAAQ,MAAQ,OACC,IAC9B,eAAQ,IAAKC,CAAQ,EACdA,CACR,CAGAJ,EAAU,iBAAkB,aAAcK,EAAY,CAAE,IAAK,GAAI,CAAE,EAWnE,SAASA,EAAYJ,EAAYE,EAAU,CAC1CF,EAAW,YAAY,SACvB,IAAMK,EAAIH,EAAQ,GAAK,EACjBI,EAAIJ,EAAQ,GAAK,EACvB,eAAQ,IAAK,UAAUF,EAAW,YAAY,MAAM,QAAQK,CAAC,KAAKC,CAAC,GAAI,EAChEN,EAAW,YAAY,MAC/B,CAGAD,EAAU,WAAY,iBAAkBQ,EAAgB,CAAC,CAAE,EAO3D,SAASA,GAAiB,CAEzB,MAAO,CACN,QAFWR,EAAU,OAAO,EAEb,QACf,aAAgB,SACjB,CACD,CAGAA,EAAU,iBAAkB,mBAAoBS,EAAkB,CAAE,IAAK,IAAK,QAAS,CAAE,EAQzF,SAASA,EAAkBR,EAAYE,EAAU,CAChD,IAAMG,EAAIH,EAAQ,GAAK,EACjBI,EAAIJ,EAAQ,GAAK,EACjBO,EAASP,EAAQ,QAAU,GAG3BQ,EAAQX,EAAU,MAClBY,EAAI,KAAK,MAAOD,EAAM,SAAU,EAAG,GAAI,CAAE,EACzCE,EAAI,KAAK,MAAOF,EAAM,SAAU,EAAG,GAAI,CAAE,EACzCG,EAAI,KAAK,MAAOH,EAAM,SAAU,EAAG,GAAI,CAAE,EACzCI,EAAQJ,EAAM,WAAYC,EAAGC,EAAGC,EAAG,GAAI,EAGvCE,EAAMf,EAAW,QACvBe,EAAI,UAAU,EACdA,EAAI,IAAKV,EAAGC,EAAGG,EAAQ,EAAG,KAAK,GAAK,CAAE,EACtCM,EAAI,UAAYD,EAAM,EACtBC,EAAI,KAAK,CACV,CACD,CAGI,OAAO,OAAW,KAAe,OAAO,IAC3C,OAAO,GAAG,eAAgB,CACzB,KAAQ,iBACR,QAAW,QACX,YAAe,yDACf,KAAQjB,CACT,CAAE",
  "names": ["examplePlugin", "pluginApi", "screenData", "hello", "options", "message", "trackClick", "x", "y", "getLibraryInfo", "drawRandomCircle", "radius", "utils", "r", "g", "b", "color", "ctx"]
}
