{
  "version": 3,
  "sources": ["index.js"],
  "sourcesContent": ["/**\n * Example Plugin for Pi.js\n * \n * Demonstrates basic plugin functionality including:\n * - Adding global commands\n * - Adding screen commands\n * - Using screen data\n * - Lifecycle hooks\n * \n * @module plugins/example-plugin\n */\n\n\"use strict\";\n\n/**\n * Example plugin initialization\n * \n * @param {Object} pluginApi - Plugin API provided by Pi.js\n */\nexport default function examplePlugin( pluginApi ) {\n\n\t// Add custom data to each screen\n\tpluginApi.addScreenDataItem( \"exampleData\", {\n\t\t\"clicks\": 0,\n\t\t\"timestamp\": null\n\t} );\n\n\t// Initialize hook - called when each screen is created\n\tpluginApi.addScreenInitFunction( ( screenData ) => {\n\t\tscreenData.exampleData.timestamp = Date.now();\n\t} );\n\n\t// Cleanup hook - called when screen is removed\n\tpluginApi.addScreenCleanupFunction( ( screenData ) => {\n\t\tscreenData.exampleData = null;\n\t} );\n\n\t// Add a simple global command\n\tpluginApi.addCommand( \"hello\", hello, [ \"name\" ] );\n\n\t/**\n\t * Say hello\n\t * \n\t * @param {Object} options - Command options\n\t * @param {string} options.name - Name to greet\n\t * @returns {string} Greeting message\n\t */\n\tfunction hello( options ) {\n\t\tconst name = options.name || \"World\";\n\t\tconst message = `Hello, ${name}!`;\n\t\tconsole.log( message );\n\t\treturn message;\n\t}\n\n\t// Add a screen command that uses screen data\n\tpluginApi.addScreenCommand( \"trackClick\", trackClick, [ \"x\", \"y\" ] );\n\n\t/**\n\t * Track a click on the screen\n\t * \n\t * @param {Object} screenData - Screen data\n\t * @param {Object} options - Command options\n\t * @param {number} options.x - Click X coordinate\n\t * @param {number} options.y - Click Y coordinate\n\t * @returns {number} Total number of clicks\n\t */\n\tfunction trackClick( screenData, options ) {\n\t\tscreenData.exampleData.clicks++;\n\t\tconst x = options.x || 0;\n\t\tconst y = options.y || 0;\n\t\tconsole.log( `Click #${screenData.exampleData.clicks} at (${x}, ${y})` );\n\t\treturn screenData.exampleData.clicks;\n\t}\n\n\t// Add a command that accesses the main API\n\tpluginApi.addCommand( \"getLibraryInfo\", getLibraryInfo, [] );\n\n\t/**\n\t * Get Pi.js library information\n\t * \n\t * @returns {Object} Library info\n\t */\n\tfunction getLibraryInfo() {\n\t\tconst api = pluginApi.getApi();\n\t\treturn {\n\t\t\t\"version\": api.version,\n\t\t\t\"pluginSystem\": \"enabled\"\n\t\t};\n\t}\n\n\t// Add a drawing command that uses utilities\n\tpluginApi.addScreenCommand( \"drawRandomCircle\", drawRandomCircle, [ \"x\", \"y\", \"radius\" ] );\n\n\t/**\n\t * Draw a circle with random color\n\t * \n\t * @param {Object} screenData - Screen data\n\t * @param {Object} options - Command options\n\t */\n\tfunction drawRandomCircle( screenData, options ) {\n\t\tconst x = options.x || 0;\n\t\tconst y = options.y || 0;\n\t\tconst radius = options.radius || 50;\n\n\t\t// Use Pi.js utilities to generate random color\n\t\tconst utils = pluginApi.utils;\n\t\tconst r = Math.floor( utils.rndRange( 0, 256 ) );\n\t\tconst g = Math.floor( utils.rndRange( 0, 256 ) );\n\t\tconst b = Math.floor( utils.rndRange( 0, 256 ) );\n\t\tconst color = utils.rgbToColor( r, g, b, 255 );\n\n\t\t// Draw circle\n\t\tconst ctx = screenData.context;\n\t\tctx.beginPath();\n\t\tctx.arc( x, y, radius, 0, Math.PI * 2 );\n\t\tctx.fillStyle = color.s;\n\t\tctx.fill();\n\t}\n}\n\n// Auto-register in IIFE mode (when loaded via <script> tag)\nif( typeof window !== \"undefined\" && window.pi ) {\n\twindow.pi.registerPlugin( {\n\t\t\"name\": \"example-plugin\",\n\t\t\"version\": \"1.0.0\",\n\t\t\"description\": \"Example plugin demonstrating Pi.js plugin capabilities\",\n\t\t\"init\": examplePlugin\n\t} );\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBe,SAAR,cAAgC,WAAY;AAGlD,YAAU,kBAAmB,eAAe;AAAA,IAC3C,UAAU;AAAA,IACV,aAAa;AAAA,EACd,CAAE;AAGF,YAAU,sBAAuB,CAAE,eAAgB;AAClD,eAAW,YAAY,YAAY,KAAK,IAAI;AAAA,EAC7C,CAAE;AAGF,YAAU,yBAA0B,CAAE,eAAgB;AACrD,eAAW,cAAc;AAAA,EAC1B,CAAE;AAGF,YAAU,WAAY,SAAS,OAAO,CAAE,MAAO,CAAE;AASjD,WAAS,MAAO,SAAU;AACzB,UAAM,OAAO,QAAQ,QAAQ;AAC7B,UAAM,UAAU,UAAU,IAAI;AAC9B,YAAQ,IAAK,OAAQ;AACrB,WAAO;AAAA,EACR;AAGA,YAAU,iBAAkB,cAAc,YAAY,CAAE,KAAK,GAAI,CAAE;AAWnE,WAAS,WAAY,YAAY,SAAU;AAC1C,eAAW,YAAY;AACvB,UAAM,IAAI,QAAQ,KAAK;AACvB,UAAM,IAAI,QAAQ,KAAK;AACvB,YAAQ,IAAK,UAAU,WAAW,YAAY,MAAM,QAAQ,CAAC,KAAK,CAAC,GAAI;AACvE,WAAO,WAAW,YAAY;AAAA,EAC/B;AAGA,YAAU,WAAY,kBAAkB,gBAAgB,CAAC,CAAE;AAO3D,WAAS,iBAAiB;AACzB,UAAM,MAAM,UAAU,OAAO;AAC7B,WAAO;AAAA,MACN,WAAW,IAAI;AAAA,MACf,gBAAgB;AAAA,IACjB;AAAA,EACD;AAGA,YAAU,iBAAkB,oBAAoB,kBAAkB,CAAE,KAAK,KAAK,QAAS,CAAE;AAQzF,WAAS,iBAAkB,YAAY,SAAU;AAChD,UAAM,IAAI,QAAQ,KAAK;AACvB,UAAM,IAAI,QAAQ,KAAK;AACvB,UAAM,SAAS,QAAQ,UAAU;AAGjC,UAAM,QAAQ,UAAU;AACxB,UAAM,IAAI,KAAK,MAAO,MAAM,SAAU,GAAG,GAAI,CAAE;AAC/C,UAAM,IAAI,KAAK,MAAO,MAAM,SAAU,GAAG,GAAI,CAAE;AAC/C,UAAM,IAAI,KAAK,MAAO,MAAM,SAAU,GAAG,GAAI,CAAE;AAC/C,UAAM,QAAQ,MAAM,WAAY,GAAG,GAAG,GAAG,GAAI;AAG7C,UAAM,MAAM,WAAW;AACvB,QAAI,UAAU;AACd,QAAI,IAAK,GAAG,GAAG,QAAQ,GAAG,KAAK,KAAK,CAAE;AACtC,QAAI,YAAY,MAAM;AACtB,QAAI,KAAK;AAAA,EACV;AACD;AAGA,IAAI,OAAO,WAAW,eAAe,OAAO,IAAK;AAChD,SAAO,GAAG,eAAgB;AAAA,IACzB,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,eAAe;AAAA,IACf,QAAQ;AAAA,EACT,CAAE;AACH;",
  "names": []
}
